// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: biconom/admin/confirmation/v1/confirmation_self.proto

package service_admin_confirmation_pb

import (
	context "context"
	confirmation "github.com/biconom/go-genproto/biconom/type/confirmation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfirmationSelfClient is the client API for ConfirmationSelf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfirmationSelfClient interface {
	Get(ctx context.Context, in *confirmation.Confirmation_ID, opts ...grpc.CallOption) (*confirmation.Confirmation, error)
	List(ctx context.Context, in *ConfirmationSelfListRequest, opts ...grpc.CallOption) (ConfirmationSelf_ListClient, error)
	LogGet(ctx context.Context, in *confirmation.Confirmation_Log_ID, opts ...grpc.CallOption) (*confirmation.Confirmation_Log, error)
	LogListByConfirmation(ctx context.Context, in *ConfirmationSelfLogListByConfirmationRequest, opts ...grpc.CallOption) (ConfirmationSelf_LogListByConfirmationClient, error)
	GenerateOneTimePassword(ctx context.Context, in *ConfirmationSelfGenerateOneTimePasswordRequest, opts ...grpc.CallOption) (*confirmation.Confirmation_Field_Notification, error)
	Confirm(ctx context.Context, in *ConfirmationSelfConfirmRequest, opts ...grpc.CallOption) (*ConfirmationSelfConfirmResponse, error)
	Cancel(ctx context.Context, in *confirmation.Confirmation_ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type confirmationSelfClient struct {
	cc grpc.ClientConnInterface
}

func NewConfirmationSelfClient(cc grpc.ClientConnInterface) ConfirmationSelfClient {
	return &confirmationSelfClient{cc}
}

func (c *confirmationSelfClient) Get(ctx context.Context, in *confirmation.Confirmation_ID, opts ...grpc.CallOption) (*confirmation.Confirmation, error) {
	out := new(confirmation.Confirmation)
	err := c.cc.Invoke(ctx, "/biconom.admin.confirmation.v1.ConfirmationSelf/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmationSelfClient) List(ctx context.Context, in *ConfirmationSelfListRequest, opts ...grpc.CallOption) (ConfirmationSelf_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfirmationSelf_ServiceDesc.Streams[0], "/biconom.admin.confirmation.v1.ConfirmationSelf/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &confirmationSelfListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfirmationSelf_ListClient interface {
	Recv() (*confirmation.Confirmation, error)
	grpc.ClientStream
}

type confirmationSelfListClient struct {
	grpc.ClientStream
}

func (x *confirmationSelfListClient) Recv() (*confirmation.Confirmation, error) {
	m := new(confirmation.Confirmation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *confirmationSelfClient) LogGet(ctx context.Context, in *confirmation.Confirmation_Log_ID, opts ...grpc.CallOption) (*confirmation.Confirmation_Log, error) {
	out := new(confirmation.Confirmation_Log)
	err := c.cc.Invoke(ctx, "/biconom.admin.confirmation.v1.ConfirmationSelf/LogGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmationSelfClient) LogListByConfirmation(ctx context.Context, in *ConfirmationSelfLogListByConfirmationRequest, opts ...grpc.CallOption) (ConfirmationSelf_LogListByConfirmationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfirmationSelf_ServiceDesc.Streams[1], "/biconom.admin.confirmation.v1.ConfirmationSelf/LogListByConfirmation", opts...)
	if err != nil {
		return nil, err
	}
	x := &confirmationSelfLogListByConfirmationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfirmationSelf_LogListByConfirmationClient interface {
	Recv() (*confirmation.Confirmation_Log, error)
	grpc.ClientStream
}

type confirmationSelfLogListByConfirmationClient struct {
	grpc.ClientStream
}

func (x *confirmationSelfLogListByConfirmationClient) Recv() (*confirmation.Confirmation_Log, error) {
	m := new(confirmation.Confirmation_Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *confirmationSelfClient) GenerateOneTimePassword(ctx context.Context, in *ConfirmationSelfGenerateOneTimePasswordRequest, opts ...grpc.CallOption) (*confirmation.Confirmation_Field_Notification, error) {
	out := new(confirmation.Confirmation_Field_Notification)
	err := c.cc.Invoke(ctx, "/biconom.admin.confirmation.v1.ConfirmationSelf/GenerateOneTimePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmationSelfClient) Confirm(ctx context.Context, in *ConfirmationSelfConfirmRequest, opts ...grpc.CallOption) (*ConfirmationSelfConfirmResponse, error) {
	out := new(ConfirmationSelfConfirmResponse)
	err := c.cc.Invoke(ctx, "/biconom.admin.confirmation.v1.ConfirmationSelf/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmationSelfClient) Cancel(ctx context.Context, in *confirmation.Confirmation_ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/biconom.admin.confirmation.v1.ConfirmationSelf/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfirmationSelfServer is the server API for ConfirmationSelf service.
// All implementations must embed UnimplementedConfirmationSelfServer
// for forward compatibility
type ConfirmationSelfServer interface {
	Get(context.Context, *confirmation.Confirmation_ID) (*confirmation.Confirmation, error)
	List(*ConfirmationSelfListRequest, ConfirmationSelf_ListServer) error
	LogGet(context.Context, *confirmation.Confirmation_Log_ID) (*confirmation.Confirmation_Log, error)
	LogListByConfirmation(*ConfirmationSelfLogListByConfirmationRequest, ConfirmationSelf_LogListByConfirmationServer) error
	GenerateOneTimePassword(context.Context, *ConfirmationSelfGenerateOneTimePasswordRequest) (*confirmation.Confirmation_Field_Notification, error)
	Confirm(context.Context, *ConfirmationSelfConfirmRequest) (*ConfirmationSelfConfirmResponse, error)
	Cancel(context.Context, *confirmation.Confirmation_ID) (*emptypb.Empty, error)
	mustEmbedUnimplementedConfirmationSelfServer()
}

// UnimplementedConfirmationSelfServer must be embedded to have forward compatible implementations.
type UnimplementedConfirmationSelfServer struct {
}

func (UnimplementedConfirmationSelfServer) Get(context.Context, *confirmation.Confirmation_ID) (*confirmation.Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConfirmationSelfServer) List(*ConfirmationSelfListRequest, ConfirmationSelf_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConfirmationSelfServer) LogGet(context.Context, *confirmation.Confirmation_Log_ID) (*confirmation.Confirmation_Log, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogGet not implemented")
}
func (UnimplementedConfirmationSelfServer) LogListByConfirmation(*ConfirmationSelfLogListByConfirmationRequest, ConfirmationSelf_LogListByConfirmationServer) error {
	return status.Errorf(codes.Unimplemented, "method LogListByConfirmation not implemented")
}
func (UnimplementedConfirmationSelfServer) GenerateOneTimePassword(context.Context, *ConfirmationSelfGenerateOneTimePasswordRequest) (*confirmation.Confirmation_Field_Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOneTimePassword not implemented")
}
func (UnimplementedConfirmationSelfServer) Confirm(context.Context, *ConfirmationSelfConfirmRequest) (*ConfirmationSelfConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (UnimplementedConfirmationSelfServer) Cancel(context.Context, *confirmation.Confirmation_ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedConfirmationSelfServer) mustEmbedUnimplementedConfirmationSelfServer() {}

// UnsafeConfirmationSelfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfirmationSelfServer will
// result in compilation errors.
type UnsafeConfirmationSelfServer interface {
	mustEmbedUnimplementedConfirmationSelfServer()
}

func RegisterConfirmationSelfServer(s grpc.ServiceRegistrar, srv ConfirmationSelfServer) {
	s.RegisterService(&ConfirmationSelf_ServiceDesc, srv)
}

func _ConfirmationSelf_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(confirmation.Confirmation_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationSelfServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.confirmation.v1.ConfirmationSelf/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationSelfServer).Get(ctx, req.(*confirmation.Confirmation_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfirmationSelf_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfirmationSelfListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfirmationSelfServer).List(m, &confirmationSelfListServer{stream})
}

type ConfirmationSelf_ListServer interface {
	Send(*confirmation.Confirmation) error
	grpc.ServerStream
}

type confirmationSelfListServer struct {
	grpc.ServerStream
}

func (x *confirmationSelfListServer) Send(m *confirmation.Confirmation) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfirmationSelf_LogGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(confirmation.Confirmation_Log_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationSelfServer).LogGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.confirmation.v1.ConfirmationSelf/LogGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationSelfServer).LogGet(ctx, req.(*confirmation.Confirmation_Log_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfirmationSelf_LogListByConfirmation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfirmationSelfLogListByConfirmationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfirmationSelfServer).LogListByConfirmation(m, &confirmationSelfLogListByConfirmationServer{stream})
}

type ConfirmationSelf_LogListByConfirmationServer interface {
	Send(*confirmation.Confirmation_Log) error
	grpc.ServerStream
}

type confirmationSelfLogListByConfirmationServer struct {
	grpc.ServerStream
}

func (x *confirmationSelfLogListByConfirmationServer) Send(m *confirmation.Confirmation_Log) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfirmationSelf_GenerateOneTimePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmationSelfGenerateOneTimePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationSelfServer).GenerateOneTimePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.confirmation.v1.ConfirmationSelf/GenerateOneTimePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationSelfServer).GenerateOneTimePassword(ctx, req.(*ConfirmationSelfGenerateOneTimePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfirmationSelf_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmationSelfConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationSelfServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.confirmation.v1.ConfirmationSelf/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationSelfServer).Confirm(ctx, req.(*ConfirmationSelfConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfirmationSelf_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(confirmation.Confirmation_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationSelfServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.confirmation.v1.ConfirmationSelf/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationSelfServer).Cancel(ctx, req.(*confirmation.Confirmation_ID))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfirmationSelf_ServiceDesc is the grpc.ServiceDesc for ConfirmationSelf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfirmationSelf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconom.admin.confirmation.v1.ConfirmationSelf",
	HandlerType: (*ConfirmationSelfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ConfirmationSelf_Get_Handler,
		},
		{
			MethodName: "LogGet",
			Handler:    _ConfirmationSelf_LogGet_Handler,
		},
		{
			MethodName: "GenerateOneTimePassword",
			Handler:    _ConfirmationSelf_GenerateOneTimePassword_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _ConfirmationSelf_Confirm_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _ConfirmationSelf_Cancel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ConfirmationSelf_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LogListByConfirmation",
			Handler:       _ConfirmationSelf_LogListByConfirmation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biconom/admin/confirmation/v1/confirmation_self.proto",
}
