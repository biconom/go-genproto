// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: biconom/admin/currency/v1/currency.proto

package service_admin_currency_pb

import (
	currency "github.com/biconom/go-genproto/biconom/type/currency"
	sort "github.com/biconom/go-genproto/biconom/type/sort"
	until "github.com/biconom/go-genproto/biconom/type/until"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort            `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyListRequest) Reset() {
	*x = CurrencyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyListRequest) ProtoMessage() {}

func (x *CurrencyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{0}
}

func (x *CurrencyListRequest) GetStep() *currency.Currency_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyName string `protobuf:"bytes,1,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	Decimal      uint32 `protobuf:"varint,2,opt,name=decimal,proto3" json:"decimal,omitempty"`
}

func (x *CurrencyCreateRequest) Reset() {
	*x = CurrencyCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyCreateRequest) ProtoMessage() {}

func (x *CurrencyCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyCreateRequest.ProtoReflect.Descriptor instead.
func (*CurrencyCreateRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{1}
}

func (x *CurrencyCreateRequest) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *CurrencyCreateRequest) GetDecimal() uint32 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

type CurrencyPairListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                 `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairListRequest) Reset() {
	*x = CurrencyPairListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairListRequest) ProtoMessage() {}

func (x *CurrencyPairListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{2}
}

func (x *CurrencyPairListRequest) GetStep() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                             `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceListRequest) Reset() {
	*x = CurrencyPairRateSourceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{3}
}

func (x *CurrencyPairRateSourceListRequest) GetStep() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSourceName string `protobuf:"bytes,1,opt,name=rate_source_name,json=rateSourceName,proto3" json:"rate_source_name,omitempty"`
}

func (x *CurrencyPairRateSourceCreateRequest) Reset() {
	*x = CurrencyPairRateSourceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceCreateRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceCreateRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceCreateRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{4}
}

func (x *CurrencyPairRateSourceCreateRequest) GetRateSourceName() string {
	if x != nil {
		return x.RateSourceName
	}
	return ""
}

type CurrencyPairRateSourceHeaderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                             `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceHeaderListRequest) Reset() {
	*x = CurrencyPairRateSourceHeaderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceHeaderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceHeaderListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceHeaderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceHeaderListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceHeaderListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{5}
}

func (x *CurrencyPairRateSourceHeaderListRequest) GetStep() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceHeaderListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceHeaderRenameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source            *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	RateSourceNameNew string                                 `protobuf:"bytes,2,opt,name=rate_source_name_new,json=rateSourceNameNew,proto3" json:"rate_source_name_new,omitempty"`
}

func (x *CurrencyPairRateSourceHeaderRenameRequest) Reset() {
	*x = CurrencyPairRateSourceHeaderRenameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceHeaderRenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceHeaderRenameRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceHeaderRenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceHeaderRenameRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceHeaderRenameRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{6}
}

func (x *CurrencyPairRateSourceHeaderRenameRequest) GetSource() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CurrencyPairRateSourceHeaderRenameRequest) GetRateSourceNameNew() string {
	if x != nil {
		return x.RateSourceNameNew
	}
	return ""
}

type CurrencyPairRateSourceValueSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueId     *currency.Currency_Pair_Rate_Source_Value_ID `protobuf:"bytes,1,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`
	SourceValue string                                       `protobuf:"bytes,2,opt,name=source_value,json=sourceValue,proto3" json:"source_value,omitempty"`
	TargetValue string                                       `protobuf:"bytes,3,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
}

func (x *CurrencyPairRateSourceValueSetRequest) Reset() {
	*x = CurrencyPairRateSourceValueSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueSetRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueSetRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueSetRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{7}
}

func (x *CurrencyPairRateSourceValueSetRequest) GetValueId() *currency.Currency_Pair_Rate_Source_Value_ID {
	if x != nil {
		return x.ValueId
	}
	return nil
}

func (x *CurrencyPairRateSourceValueSetRequest) GetSourceValue() string {
	if x != nil {
		return x.SourceValue
	}
	return ""
}

func (x *CurrencyPairRateSourceValueSetRequest) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

type CurrencyPairRateSourceValueListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_Rate_Source_Value_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                                   `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceValueListRequest) Reset() {
	*x = CurrencyPairRateSourceValueListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{8}
}

func (x *CurrencyPairRateSourceValueListRequest) GetStep() *currency.Currency_Pair_Rate_Source_Value_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceValueDefaultListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                 `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) Reset() {
	*x = CurrencyPairRateSourceValueDefaultListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueDefaultListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueDefaultListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueDefaultListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueDefaultListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{9}
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) GetStep() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceBotKeyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_Rate_Source_BotKey_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                                    `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceBotKeyListRequest) Reset() {
	*x = CurrencyPairRateSourceBotKeyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceBotKeyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceBotKeyListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceBotKeyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceBotKeyListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceBotKeyListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{10}
}

func (x *CurrencyPairRateSourceBotKeyListRequest) GetStep() *currency.Currency_Pair_Rate_Source_BotKey_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceBotKeyListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceBotKeyCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSource  *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=rate_source,json=rateSource,proto3" json:"rate_source,omitempty"`
	BotKeyTitle string                                 `protobuf:"bytes,2,opt,name=bot_key_title,json=botKeyTitle,proto3" json:"bot_key_title,omitempty"`
	Ttl         *until.Until                           `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	IpMasks     []string                               `protobuf:"bytes,4,rep,name=ip_masks,json=ipMasks,proto3" json:"ip_masks,omitempty"`
}

func (x *CurrencyPairRateSourceBotKeyCreateRequest) Reset() {
	*x = CurrencyPairRateSourceBotKeyCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceBotKeyCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceBotKeyCreateRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceBotKeyCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceBotKeyCreateRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceBotKeyCreateRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{11}
}

func (x *CurrencyPairRateSourceBotKeyCreateRequest) GetRateSource() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.RateSource
	}
	return nil
}

func (x *CurrencyPairRateSourceBotKeyCreateRequest) GetBotKeyTitle() string {
	if x != nil {
		return x.BotKeyTitle
	}
	return ""
}

func (x *CurrencyPairRateSourceBotKeyCreateRequest) GetTtl() *until.Until {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *CurrencyPairRateSourceBotKeyCreateRequest) GetIpMasks() []string {
	if x != nil {
		return x.IpMasks
	}
	return nil
}

type CurrencyPairRateSourceBotKeyIpMasksSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotKey  *currency.Currency_Pair_Rate_Source_BotKey_ID `protobuf:"bytes,1,opt,name=bot_key,json=botKey,proto3" json:"bot_key,omitempty"`
	IpMasks []string                                      `protobuf:"bytes,2,rep,name=ip_masks,json=ipMasks,proto3" json:"ip_masks,omitempty"`
}

func (x *CurrencyPairRateSourceBotKeyIpMasksSetRequest) Reset() {
	*x = CurrencyPairRateSourceBotKeyIpMasksSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceBotKeyIpMasksSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceBotKeyIpMasksSetRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceBotKeyIpMasksSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceBotKeyIpMasksSetRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceBotKeyIpMasksSetRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_proto_rawDescGZIP(), []int{12}
}

func (x *CurrencyPairRateSourceBotKeyIpMasksSetRequest) GetBotKey() *currency.Currency_Pair_Rate_Source_BotKey_ID {
	if x != nil {
		return x.BotKey
	}
	return nil
}

func (x *CurrencyPairRateSourceBotKeyIpMasksSetRequest) GetIpMasks() []string {
	if x != nil {
		return x.IpMasks
	}
	return nil
}

var File_biconom_admin_currency_v1_currency_proto protoreflect.FileDescriptor

var file_biconom_admin_currency_v1_currency_proto_rawDesc = []byte{
	0x0a, 0x28, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x22, 0x56, 0x0a, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x22, 0x75, 0x0a, 0x17, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49,
	0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22,
	0x8b, 0x01, 0x0a, 0x21, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x4f, 0x0a,
	0x23, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x27, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x29, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x4e, 0x65, 0x77, 0x22, 0xba, 0x01, 0x0a, 0x25, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x49, 0x44, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x26, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x2d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x27, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x74,
	0x4b, 0x65, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x29, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x6f, 0x74, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x62, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70,
	0x4d, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x2d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x62, 0x6f, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x06, 0x62, 0x6f, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x32, 0xb0,
	0x18, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x0e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x1a, 0x1b, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x32, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x1b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x12, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x1a, 0x27, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x1a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x7f,
	0x0a, 0x1f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x12, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x1a, 0x2e, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x9a, 0x01, 0x0a, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x9c, 0x01, 0x0a,
	0x22, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x1e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x47, 0x65, 0x74, 0x12, 0x30,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x49, 0x44,
	0x1a, 0x2d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x93, 0x01, 0x0a, 0x1e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x40, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x1f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x80, 0x01, 0x0a, 0x25, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x1a, 0x35, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x26, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x48, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x28, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x12, 0x30, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x49, 0x44, 0x1a, 0x35, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x28,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x1f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x74,
	0x4b, 0x65, 0x79, 0x47, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x2e, 0x49, 0x44, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x20,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x42, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42, 0x6f,
	0x74, 0x4b, 0x65, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x9c, 0x01, 0x0a, 0x22, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x44, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42,
	0x6f, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x22, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x31, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x2e, 0x49, 0x44,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x26, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x70, 0x4d, 0x61, 0x73,
	0x6b, 0x73, 0x53, 0x65, 0x74, 0x12, 0x48, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x70,
	0x4d, 0x61, 0x73, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x22,
	0x00, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_biconom_admin_currency_v1_currency_proto_rawDescOnce sync.Once
	file_biconom_admin_currency_v1_currency_proto_rawDescData = file_biconom_admin_currency_v1_currency_proto_rawDesc
)

func file_biconom_admin_currency_v1_currency_proto_rawDescGZIP() []byte {
	file_biconom_admin_currency_v1_currency_proto_rawDescOnce.Do(func() {
		file_biconom_admin_currency_v1_currency_proto_rawDescData = protoimpl.X.CompressGZIP(file_biconom_admin_currency_v1_currency_proto_rawDescData)
	})
	return file_biconom_admin_currency_v1_currency_proto_rawDescData
}

var file_biconom_admin_currency_v1_currency_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_biconom_admin_currency_v1_currency_proto_goTypes = []interface{}{
	(*CurrencyListRequest)(nil),                              // 0: biconom.admin.currency.v1.CurrencyListRequest
	(*CurrencyCreateRequest)(nil),                            // 1: biconom.admin.currency.v1.CurrencyCreateRequest
	(*CurrencyPairListRequest)(nil),                          // 2: biconom.admin.currency.v1.CurrencyPairListRequest
	(*CurrencyPairRateSourceListRequest)(nil),                // 3: biconom.admin.currency.v1.CurrencyPairRateSourceListRequest
	(*CurrencyPairRateSourceCreateRequest)(nil),              // 4: biconom.admin.currency.v1.CurrencyPairRateSourceCreateRequest
	(*CurrencyPairRateSourceHeaderListRequest)(nil),          // 5: biconom.admin.currency.v1.CurrencyPairRateSourceHeaderListRequest
	(*CurrencyPairRateSourceHeaderRenameRequest)(nil),        // 6: biconom.admin.currency.v1.CurrencyPairRateSourceHeaderRenameRequest
	(*CurrencyPairRateSourceValueSetRequest)(nil),            // 7: biconom.admin.currency.v1.CurrencyPairRateSourceValueSetRequest
	(*CurrencyPairRateSourceValueListRequest)(nil),           // 8: biconom.admin.currency.v1.CurrencyPairRateSourceValueListRequest
	(*CurrencyPairRateSourceValueDefaultListRequest)(nil),    // 9: biconom.admin.currency.v1.CurrencyPairRateSourceValueDefaultListRequest
	(*CurrencyPairRateSourceBotKeyListRequest)(nil),          // 10: biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyListRequest
	(*CurrencyPairRateSourceBotKeyCreateRequest)(nil),        // 11: biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyCreateRequest
	(*CurrencyPairRateSourceBotKeyIpMasksSetRequest)(nil),    // 12: biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyIpMasksSetRequest
	(*currency.Currency_ID)(nil),                             // 13: biconom.type.Currency.ID
	(*sort.Sort)(nil),                                        // 14: biconom.type.Sort
	(*currency.Currency_Pair_ID)(nil),                        // 15: biconom.type.Currency.Pair.ID
	(*currency.Currency_Pair_Rate_Source_ID)(nil),            // 16: biconom.type.Currency.Pair.Rate.Source.ID
	(*currency.Currency_Pair_Rate_Source_Value_ID)(nil),      // 17: biconom.type.Currency.Pair.Rate.Source.Value.ID
	(*currency.Currency_Pair_Rate_Source_BotKey_ID)(nil),     // 18: biconom.type.Currency.Pair.Rate.Source.BotKey.ID
	(*until.Until)(nil),                                      // 19: biconom.type.Until
	(*currency.Currency_Pair_ID_Currencies)(nil),             // 20: biconom.type.Currency.Pair.ID.Currencies
	(*currency.Currency)(nil),                                // 21: biconom.type.Currency
	(*currency.Currency_Pair)(nil),                           // 22: biconom.type.Currency.Pair
	(*currency.Currency_Pair_Rate_Source)(nil),               // 23: biconom.type.Currency.Pair.Rate.Source
	(*currency.Currency_Pair_Rate_Source_Header)(nil),        // 24: biconom.type.Currency.Pair.Rate.Source.Header
	(*currency.Currency_Pair_Rate_Source_Value)(nil),         // 25: biconom.type.Currency.Pair.Rate.Source.Value
	(*currency.Currency_Pair_Rate_Source_Value_Default)(nil), // 26: biconom.type.Currency.Pair.Rate.Source.Value.Default
	(*emptypb.Empty)(nil),                                    // 27: google.protobuf.Empty
	(*currency.Currency_Pair_Rate_Source_BotKey)(nil),        // 28: biconom.type.Currency.Pair.Rate.Source.BotKey
}
var file_biconom_admin_currency_v1_currency_proto_depIdxs = []int32{
	13, // 0: biconom.admin.currency.v1.CurrencyListRequest.step:type_name -> biconom.type.Currency.ID
	14, // 1: biconom.admin.currency.v1.CurrencyListRequest.sort:type_name -> biconom.type.Sort
	15, // 2: biconom.admin.currency.v1.CurrencyPairListRequest.step:type_name -> biconom.type.Currency.Pair.ID
	14, // 3: biconom.admin.currency.v1.CurrencyPairListRequest.sort:type_name -> biconom.type.Sort
	16, // 4: biconom.admin.currency.v1.CurrencyPairRateSourceListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	14, // 5: biconom.admin.currency.v1.CurrencyPairRateSourceListRequest.sort:type_name -> biconom.type.Sort
	16, // 6: biconom.admin.currency.v1.CurrencyPairRateSourceHeaderListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	14, // 7: biconom.admin.currency.v1.CurrencyPairRateSourceHeaderListRequest.sort:type_name -> biconom.type.Sort
	16, // 8: biconom.admin.currency.v1.CurrencyPairRateSourceHeaderRenameRequest.source:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	17, // 9: biconom.admin.currency.v1.CurrencyPairRateSourceValueSetRequest.value_id:type_name -> biconom.type.Currency.Pair.Rate.Source.Value.ID
	17, // 10: biconom.admin.currency.v1.CurrencyPairRateSourceValueListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.Value.ID
	14, // 11: biconom.admin.currency.v1.CurrencyPairRateSourceValueListRequest.sort:type_name -> biconom.type.Sort
	15, // 12: biconom.admin.currency.v1.CurrencyPairRateSourceValueDefaultListRequest.step:type_name -> biconom.type.Currency.Pair.ID
	14, // 13: biconom.admin.currency.v1.CurrencyPairRateSourceValueDefaultListRequest.sort:type_name -> biconom.type.Sort
	18, // 14: biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.BotKey.ID
	14, // 15: biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyListRequest.sort:type_name -> biconom.type.Sort
	16, // 16: biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyCreateRequest.rate_source:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	19, // 17: biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyCreateRequest.ttl:type_name -> biconom.type.Until
	18, // 18: biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyIpMasksSetRequest.bot_key:type_name -> biconom.type.Currency.Pair.Rate.Source.BotKey.ID
	13, // 19: biconom.admin.currency.v1.Currency.CurrencyGet:input_type -> biconom.type.Currency.ID
	0,  // 20: biconom.admin.currency.v1.Currency.CurrencyList:input_type -> biconom.admin.currency.v1.CurrencyListRequest
	1,  // 21: biconom.admin.currency.v1.Currency.CurrencyCreate:input_type -> biconom.admin.currency.v1.CurrencyCreateRequest
	15, // 22: biconom.admin.currency.v1.Currency.CurrencyPairGet:input_type -> biconom.type.Currency.Pair.ID
	2,  // 23: biconom.admin.currency.v1.Currency.CurrencyPairList:input_type -> biconom.admin.currency.v1.CurrencyPairListRequest
	20, // 24: biconom.admin.currency.v1.Currency.CurrencyPairCreate:input_type -> biconom.type.Currency.Pair.ID.Currencies
	16, // 25: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceGet:input_type -> biconom.type.Currency.Pair.Rate.Source.ID
	3,  // 26: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceList:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceListRequest
	4,  // 27: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceCreate:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceCreateRequest
	16, // 28: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceHeaderGet:input_type -> biconom.type.Currency.Pair.Rate.Source.ID
	5,  // 29: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceHeaderList:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceHeaderListRequest
	6,  // 30: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceHeaderRename:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceHeaderRenameRequest
	17, // 31: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueGet:input_type -> biconom.type.Currency.Pair.Rate.Source.Value.ID
	7,  // 32: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueSet:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceValueSetRequest
	8,  // 33: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueList:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceValueListRequest
	15, // 34: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueDefaultGet:input_type -> biconom.type.Currency.Pair.ID
	9,  // 35: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueDefaultList:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceValueDefaultListRequest
	17, // 36: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueDefaultAttach:input_type -> biconom.type.Currency.Pair.Rate.Source.Value.ID
	15, // 37: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueDefaultDetach:input_type -> biconom.type.Currency.Pair.ID
	18, // 38: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceBotKeyGet:input_type -> biconom.type.Currency.Pair.Rate.Source.BotKey.ID
	10, // 39: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceBotKeyList:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyListRequest
	11, // 40: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceBotKeyCreate:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyCreateRequest
	18, // 41: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceBotKeyDelete:input_type -> biconom.type.Currency.Pair.Rate.Source.BotKey.ID
	12, // 42: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceBotKeyIpMasksSet:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceBotKeyIpMasksSetRequest
	21, // 43: biconom.admin.currency.v1.Currency.CurrencyGet:output_type -> biconom.type.Currency
	21, // 44: biconom.admin.currency.v1.Currency.CurrencyList:output_type -> biconom.type.Currency
	21, // 45: biconom.admin.currency.v1.Currency.CurrencyCreate:output_type -> biconom.type.Currency
	22, // 46: biconom.admin.currency.v1.Currency.CurrencyPairGet:output_type -> biconom.type.Currency.Pair
	22, // 47: biconom.admin.currency.v1.Currency.CurrencyPairList:output_type -> biconom.type.Currency.Pair
	22, // 48: biconom.admin.currency.v1.Currency.CurrencyPairCreate:output_type -> biconom.type.Currency.Pair
	23, // 49: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceGet:output_type -> biconom.type.Currency.Pair.Rate.Source
	23, // 50: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceList:output_type -> biconom.type.Currency.Pair.Rate.Source
	23, // 51: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceCreate:output_type -> biconom.type.Currency.Pair.Rate.Source
	24, // 52: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceHeaderGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	24, // 53: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceHeaderList:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	24, // 54: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceHeaderRename:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	25, // 55: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Value
	25, // 56: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueSet:output_type -> biconom.type.Currency.Pair.Rate.Source.Value
	25, // 57: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueList:output_type -> biconom.type.Currency.Pair.Rate.Source.Value
	26, // 58: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueDefaultGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Value.Default
	26, // 59: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueDefaultList:output_type -> biconom.type.Currency.Pair.Rate.Source.Value.Default
	26, // 60: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueDefaultAttach:output_type -> biconom.type.Currency.Pair.Rate.Source.Value.Default
	27, // 61: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceValueDefaultDetach:output_type -> google.protobuf.Empty
	28, // 62: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceBotKeyGet:output_type -> biconom.type.Currency.Pair.Rate.Source.BotKey
	28, // 63: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceBotKeyList:output_type -> biconom.type.Currency.Pair.Rate.Source.BotKey
	28, // 64: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceBotKeyCreate:output_type -> biconom.type.Currency.Pair.Rate.Source.BotKey
	27, // 65: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceBotKeyDelete:output_type -> google.protobuf.Empty
	28, // 66: biconom.admin.currency.v1.Currency.CurrencyPairRateSourceBotKeyIpMasksSet:output_type -> biconom.type.Currency.Pair.Rate.Source.BotKey
	43, // [43:67] is the sub-list for method output_type
	19, // [19:43] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_biconom_admin_currency_v1_currency_proto_init() }
func file_biconom_admin_currency_v1_currency_proto_init() {
	if File_biconom_admin_currency_v1_currency_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biconom_admin_currency_v1_currency_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceHeaderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceHeaderRenameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueDefaultListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceBotKeyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceBotKeyCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceBotKeyIpMasksSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biconom_admin_currency_v1_currency_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_biconom_admin_currency_v1_currency_proto_goTypes,
		DependencyIndexes: file_biconom_admin_currency_v1_currency_proto_depIdxs,
		MessageInfos:      file_biconom_admin_currency_v1_currency_proto_msgTypes,
	}.Build()
	File_biconom_admin_currency_v1_currency_proto = out.File
	file_biconom_admin_currency_v1_currency_proto_rawDesc = nil
	file_biconom_admin_currency_v1_currency_proto_goTypes = nil
	file_biconom_admin_currency_v1_currency_proto_depIdxs = nil
}
