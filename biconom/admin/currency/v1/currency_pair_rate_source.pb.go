// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: biconom/admin/currency/v1/currency_pair_rate_source.proto

package service_admin_currency_pb

import (
	currency "github.com/biconom/go-genproto/biconom/type/currency"
	sort "github.com/biconom/go-genproto/biconom/type/sort"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyPairRateSourceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step                *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort                *sort.Sort                             `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	OnlyPublishedSource bool                                   `protobuf:"varint,3,opt,name=only_published_source,json=onlyPublishedSource,proto3" json:"only_published_source,omitempty"`
	OnlyPublishedPair   bool                                   `protobuf:"varint,4,opt,name=only_published_pair,json=onlyPublishedPair,proto3" json:"only_published_pair,omitempty"`
}

func (x *CurrencyPairRateSourceListRequest) Reset() {
	*x = CurrencyPairRateSourceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{0}
}

func (x *CurrencyPairRateSourceListRequest) GetStep() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CurrencyPairRateSourceListRequest) GetOnlyPublishedSource() bool {
	if x != nil {
		return x.OnlyPublishedSource
	}
	return false
}

func (x *CurrencyPairRateSourceListRequest) GetOnlyPublishedPair() bool {
	if x != nil {
		return x.OnlyPublishedPair
	}
	return false
}

type CurrencyPairRateSourceListByPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair                *currency.Currency_Pair_ID             `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Step                *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	Sort                *sort.Sort                             `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	OnlyPublishedSource bool                                   `protobuf:"varint,4,opt,name=only_published_source,json=onlyPublishedSource,proto3" json:"only_published_source,omitempty"`
	OnlyPublishedPair   bool                                   `protobuf:"varint,5,opt,name=only_published_pair,json=onlyPublishedPair,proto3" json:"only_published_pair,omitempty"`
}

func (x *CurrencyPairRateSourceListByPairRequest) Reset() {
	*x = CurrencyPairRateSourceListByPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceListByPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceListByPairRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceListByPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceListByPairRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceListByPairRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{1}
}

func (x *CurrencyPairRateSourceListByPairRequest) GetPair() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *CurrencyPairRateSourceListByPairRequest) GetStep() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceListByPairRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CurrencyPairRateSourceListByPairRequest) GetOnlyPublishedSource() bool {
	if x != nil {
		return x.OnlyPublishedSource
	}
	return false
}

func (x *CurrencyPairRateSourceListByPairRequest) GetOnlyPublishedPair() bool {
	if x != nil {
		return x.OnlyPublishedPair
	}
	return false
}

type CurrencyPairRateSourceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSourceName string `protobuf:"bytes,1,opt,name=rate_source_name,json=rateSourceName,proto3" json:"rate_source_name,omitempty"`
	Published      bool   `protobuf:"varint,2,opt,name=published,proto3" json:"published,omitempty"`
}

func (x *CurrencyPairRateSourceCreateRequest) Reset() {
	*x = CurrencyPairRateSourceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceCreateRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceCreateRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceCreateRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{2}
}

func (x *CurrencyPairRateSourceCreateRequest) GetRateSourceName() string {
	if x != nil {
		return x.RateSourceName
	}
	return ""
}

func (x *CurrencyPairRateSourceCreateRequest) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

type CurrencyPairRateSourceHeaderRenameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source         *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	RateSourceName string                                 `protobuf:"bytes,2,opt,name=rate_source_name,json=rateSourceName,proto3" json:"rate_source_name,omitempty"`
}

func (x *CurrencyPairRateSourceHeaderRenameRequest) Reset() {
	*x = CurrencyPairRateSourceHeaderRenameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceHeaderRenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceHeaderRenameRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceHeaderRenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceHeaderRenameRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceHeaderRenameRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{3}
}

func (x *CurrencyPairRateSourceHeaderRenameRequest) GetSource() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CurrencyPairRateSourceHeaderRenameRequest) GetRateSourceName() string {
	if x != nil {
		return x.RateSourceName
	}
	return ""
}

type CurrencyPairRateSourceValueSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option      *currency.Currency_Pair_Rate_Source_Option_ID `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
	SourceValue string                                        `protobuf:"bytes,2,opt,name=source_value,json=sourceValue,proto3" json:"source_value,omitempty"`
	TargetValue string                                        `protobuf:"bytes,3,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
}

func (x *CurrencyPairRateSourceValueSetRequest) Reset() {
	*x = CurrencyPairRateSourceValueSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueSetRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueSetRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueSetRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{4}
}

func (x *CurrencyPairRateSourceValueSetRequest) GetOption() *currency.Currency_Pair_Rate_Source_Option_ID {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *CurrencyPairRateSourceValueSetRequest) GetSourceValue() string {
	if x != nil {
		return x.SourceValue
	}
	return ""
}

func (x *CurrencyPairRateSourceValueSetRequest) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

type CurrencyPairRateSourceValueListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step                *currency.Currency_Pair_Rate_Source_Option_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort                *sort.Sort                                    `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	OnlyPublishedSource bool                                          `protobuf:"varint,3,opt,name=only_published_source,json=onlyPublishedSource,proto3" json:"only_published_source,omitempty"`
	OnlyPublishedPair   bool                                          `protobuf:"varint,4,opt,name=only_published_pair,json=onlyPublishedPair,proto3" json:"only_published_pair,omitempty"`
}

func (x *CurrencyPairRateSourceValueListRequest) Reset() {
	*x = CurrencyPairRateSourceValueListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{5}
}

func (x *CurrencyPairRateSourceValueListRequest) GetStep() *currency.Currency_Pair_Rate_Source_Option_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListRequest) GetOnlyPublishedSource() bool {
	if x != nil {
		return x.OnlyPublishedSource
	}
	return false
}

func (x *CurrencyPairRateSourceValueListRequest) GetOnlyPublishedPair() bool {
	if x != nil {
		return x.OnlyPublishedPair
	}
	return false
}

type CurrencyPairRateSourceValueListByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSources         []*currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,rep,name=rate_sources,json=rateSources,proto3" json:"rate_sources,omitempty"`
	CurrencyPairs       []*currency.Currency_Pair_ID             `protobuf:"bytes,2,rep,name=currency_pairs,json=currencyPairs,proto3" json:"currency_pairs,omitempty"`
	OnlyPublishedSource bool                                     `protobuf:"varint,3,opt,name=only_published_source,json=onlyPublishedSource,proto3" json:"only_published_source,omitempty"`
	OnlyPublishedPair   bool                                     `protobuf:"varint,4,opt,name=only_published_pair,json=onlyPublishedPair,proto3" json:"only_published_pair,omitempty"`
}

func (x *CurrencyPairRateSourceValueListByFilterRequest) Reset() {
	*x = CurrencyPairRateSourceValueListByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueListByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueListByFilterRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueListByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueListByFilterRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueListByFilterRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{6}
}

func (x *CurrencyPairRateSourceValueListByFilterRequest) GetRateSources() []*currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.RateSources
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListByFilterRequest) GetCurrencyPairs() []*currency.Currency_Pair_ID {
	if x != nil {
		return x.CurrencyPairs
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListByFilterRequest) GetOnlyPublishedSource() bool {
	if x != nil {
		return x.OnlyPublishedSource
	}
	return false
}

func (x *CurrencyPairRateSourceValueListByFilterRequest) GetOnlyPublishedPair() bool {
	if x != nil {
		return x.OnlyPublishedPair
	}
	return false
}

type CurrencyPairRateSourceValueListBySourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSource          *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=rate_source,json=rateSource,proto3" json:"rate_source,omitempty"`
	Step                *currency.Currency_Pair_ID             `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	Sort                *sort.Sort                             `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	OnlyPublishedSource bool                                   `protobuf:"varint,4,opt,name=only_published_source,json=onlyPublishedSource,proto3" json:"only_published_source,omitempty"`
	OnlyPublishedPair   bool                                   `protobuf:"varint,5,opt,name=only_published_pair,json=onlyPublishedPair,proto3" json:"only_published_pair,omitempty"`
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) Reset() {
	*x = CurrencyPairRateSourceValueListBySourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueListBySourceRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueListBySourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueListBySourceRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueListBySourceRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{7}
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) GetRateSource() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.RateSource
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) GetStep() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) GetOnlyPublishedSource() bool {
	if x != nil {
		return x.OnlyPublishedSource
	}
	return false
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) GetOnlyPublishedPair() bool {
	if x != nil {
		return x.OnlyPublishedPair
	}
	return false
}

type CurrencyPairRateSourceValueDefaultListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step                *currency.Currency_Pair_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort                *sort.Sort                 `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
	OnlyPublishedSource bool                       `protobuf:"varint,3,opt,name=only_published_source,json=onlyPublishedSource,proto3" json:"only_published_source,omitempty"`
	OnlyPublishedPair   bool                       `protobuf:"varint,4,opt,name=only_published_pair,json=onlyPublishedPair,proto3" json:"only_published_pair,omitempty"`
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) Reset() {
	*x = CurrencyPairRateSourceValueDefaultListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueDefaultListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueDefaultListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueDefaultListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueDefaultListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{8}
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) GetStep() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) GetOnlyPublishedSource() bool {
	if x != nil {
		return x.OnlyPublishedSource
	}
	return false
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) GetOnlyPublishedPair() bool {
	if x != nil {
		return x.OnlyPublishedPair
	}
	return false
}

var File_biconom_admin_currency_v1_currency_pair_rate_source_proto protoreflect.FileDescriptor

var file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDesc = []byte{
	0x0a, 0x39, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x21, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12,
	0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x22, 0xa9, 0x02, 0x0a, 0x27,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x3e, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x22, 0x6d, 0x0a, 0x23, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x29, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x25, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x44, 0x52,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfb, 0x01,
	0x0a, 0x26, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12,
	0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d,
	0x0a, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44,
	0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x22, 0xbd, 0x02, 0x0a, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x22, 0xef, 0x01, 0x0a, 0x2d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x32, 0xa7, 0x14, 0x0a, 0x16, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x1a, 0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7d, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x42, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x73, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x3e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x07, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49,
	0x44, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x09, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x12, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x1a, 0x2e, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x09, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0a, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x42,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x47, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x44, 0x1a, 0x2e,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x7e, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x40, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x82, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x49, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x49, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x1a, 0x34, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00,
	0x12, 0x96, 0x01, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x13, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x65, 0x74,
	0x12, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44,
	0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x12, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12,
	0x31, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x44, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31,
	0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescOnce sync.Once
	file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescData = file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDesc
)

func file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescGZIP() []byte {
	file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescOnce.Do(func() {
		file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescData = protoimpl.X.CompressGZIP(file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescData)
	})
	return file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDescData
}

var file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_biconom_admin_currency_v1_currency_pair_rate_source_proto_goTypes = []interface{}{
	(*CurrencyPairRateSourceListRequest)(nil),              // 0: biconom.admin.currency.v1.CurrencyPairRateSourceListRequest
	(*CurrencyPairRateSourceListByPairRequest)(nil),        // 1: biconom.admin.currency.v1.CurrencyPairRateSourceListByPairRequest
	(*CurrencyPairRateSourceCreateRequest)(nil),            // 2: biconom.admin.currency.v1.CurrencyPairRateSourceCreateRequest
	(*CurrencyPairRateSourceHeaderRenameRequest)(nil),      // 3: biconom.admin.currency.v1.CurrencyPairRateSourceHeaderRenameRequest
	(*CurrencyPairRateSourceValueSetRequest)(nil),          // 4: biconom.admin.currency.v1.CurrencyPairRateSourceValueSetRequest
	(*CurrencyPairRateSourceValueListRequest)(nil),         // 5: biconom.admin.currency.v1.CurrencyPairRateSourceValueListRequest
	(*CurrencyPairRateSourceValueListByFilterRequest)(nil), // 6: biconom.admin.currency.v1.CurrencyPairRateSourceValueListByFilterRequest
	(*CurrencyPairRateSourceValueListBySourceRequest)(nil), // 7: biconom.admin.currency.v1.CurrencyPairRateSourceValueListBySourceRequest
	(*CurrencyPairRateSourceValueDefaultListRequest)(nil),  // 8: biconom.admin.currency.v1.CurrencyPairRateSourceValueDefaultListRequest
	(*currency.Currency_Pair_Rate_Source_ID)(nil),          // 9: biconom.type.Currency.Pair.Rate.Source.ID
	(*sort.Sort)(nil),                                       // 10: biconom.type.Sort
	(*currency.Currency_Pair_ID)(nil),                       // 11: biconom.type.Currency.Pair.ID
	(*currency.Currency_Pair_Rate_Source_Option_ID)(nil),    // 12: biconom.type.Currency.Pair.Rate.Source.Option.ID
	(*currency.Currency_Pair_Rate_Source)(nil),              // 13: biconom.type.Currency.Pair.Rate.Source
	(*currency.Currency_Pair_Rate_Source_Header)(nil),       // 14: biconom.type.Currency.Pair.Rate.Source.Header
	(*currency.Currency_Pair_Rate_Source_Option)(nil),       // 15: biconom.type.Currency.Pair.Rate.Source.Option
	(*currency.Currency_Pair_Rate_Source_Option_Value)(nil), // 16: biconom.type.Currency.Pair.Rate.Source.Option.Value
	(*emptypb.Empty)(nil),                                   // 17: google.protobuf.Empty
}
var file_biconom_admin_currency_v1_currency_pair_rate_source_proto_depIdxs = []int32{
	9,  // 0: biconom.admin.currency.v1.CurrencyPairRateSourceListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	10, // 1: biconom.admin.currency.v1.CurrencyPairRateSourceListRequest.sort:type_name -> biconom.type.Sort
	11, // 2: biconom.admin.currency.v1.CurrencyPairRateSourceListByPairRequest.pair:type_name -> biconom.type.Currency.Pair.ID
	9,  // 3: biconom.admin.currency.v1.CurrencyPairRateSourceListByPairRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	10, // 4: biconom.admin.currency.v1.CurrencyPairRateSourceListByPairRequest.sort:type_name -> biconom.type.Sort
	9,  // 5: biconom.admin.currency.v1.CurrencyPairRateSourceHeaderRenameRequest.source:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	12, // 6: biconom.admin.currency.v1.CurrencyPairRateSourceValueSetRequest.option:type_name -> biconom.type.Currency.Pair.Rate.Source.Option.ID
	12, // 7: biconom.admin.currency.v1.CurrencyPairRateSourceValueListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.Option.ID
	10, // 8: biconom.admin.currency.v1.CurrencyPairRateSourceValueListRequest.sort:type_name -> biconom.type.Sort
	9,  // 9: biconom.admin.currency.v1.CurrencyPairRateSourceValueListByFilterRequest.rate_sources:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	11, // 10: biconom.admin.currency.v1.CurrencyPairRateSourceValueListByFilterRequest.currency_pairs:type_name -> biconom.type.Currency.Pair.ID
	9,  // 11: biconom.admin.currency.v1.CurrencyPairRateSourceValueListBySourceRequest.rate_source:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	11, // 12: biconom.admin.currency.v1.CurrencyPairRateSourceValueListBySourceRequest.step:type_name -> biconom.type.Currency.Pair.ID
	10, // 13: biconom.admin.currency.v1.CurrencyPairRateSourceValueListBySourceRequest.sort:type_name -> biconom.type.Sort
	11, // 14: biconom.admin.currency.v1.CurrencyPairRateSourceValueDefaultListRequest.step:type_name -> biconom.type.Currency.Pair.ID
	10, // 15: biconom.admin.currency.v1.CurrencyPairRateSourceValueDefaultListRequest.sort:type_name -> biconom.type.Sort
	9,  // 16: biconom.admin.currency.v1.CurrencyPairRateSource.Get:input_type -> biconom.type.Currency.Pair.Rate.Source.ID
	0,  // 17: biconom.admin.currency.v1.CurrencyPairRateSource.List:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceListRequest
	1,  // 18: biconom.admin.currency.v1.CurrencyPairRateSource.ListByPair:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceListByPairRequest
	2,  // 19: biconom.admin.currency.v1.CurrencyPairRateSource.Create:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceCreateRequest
	9,  // 20: biconom.admin.currency.v1.CurrencyPairRateSource.Publish:input_type -> biconom.type.Currency.Pair.Rate.Source.ID
	9,  // 21: biconom.admin.currency.v1.CurrencyPairRateSource.Unpublish:input_type -> biconom.type.Currency.Pair.Rate.Source.ID
	9,  // 22: biconom.admin.currency.v1.CurrencyPairRateSource.HeaderGet:input_type -> biconom.type.Currency.Pair.Rate.Source.ID
	0,  // 23: biconom.admin.currency.v1.CurrencyPairRateSource.HeaderList:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceListRequest
	1,  // 24: biconom.admin.currency.v1.CurrencyPairRateSource.HeaderListByPair:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceListByPairRequest
	3,  // 25: biconom.admin.currency.v1.CurrencyPairRateSource.HeaderRename:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceHeaderRenameRequest
	12, // 26: biconom.admin.currency.v1.CurrencyPairRateSource.ValueGet:input_type -> biconom.type.Currency.Pair.Rate.Source.Option.ID
	4,  // 27: biconom.admin.currency.v1.CurrencyPairRateSource.ValueSet:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceValueSetRequest
	5,  // 28: biconom.admin.currency.v1.CurrencyPairRateSource.ValueList:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceValueListRequest
	6,  // 29: biconom.admin.currency.v1.CurrencyPairRateSource.ValueListByFilter:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceValueListByFilterRequest
	7,  // 30: biconom.admin.currency.v1.CurrencyPairRateSource.ValueListBySource:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceValueListBySourceRequest
	11, // 31: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultGet:input_type -> biconom.type.Currency.Pair.ID
	8,  // 32: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultList:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceValueDefaultListRequest
	11, // 33: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultFullGet:input_type -> biconom.type.Currency.Pair.ID
	8,  // 34: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultFullList:input_type -> biconom.admin.currency.v1.CurrencyPairRateSourceValueDefaultListRequest
	12, // 35: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultAttach:input_type -> biconom.type.Currency.Pair.Rate.Source.Option.ID
	11, // 36: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultDetach:input_type -> biconom.type.Currency.Pair.ID
	13, // 37: biconom.admin.currency.v1.CurrencyPairRateSource.Get:output_type -> biconom.type.Currency.Pair.Rate.Source
	13, // 38: biconom.admin.currency.v1.CurrencyPairRateSource.List:output_type -> biconom.type.Currency.Pair.Rate.Source
	13, // 39: biconom.admin.currency.v1.CurrencyPairRateSource.ListByPair:output_type -> biconom.type.Currency.Pair.Rate.Source
	13, // 40: biconom.admin.currency.v1.CurrencyPairRateSource.Create:output_type -> biconom.type.Currency.Pair.Rate.Source
	14, // 41: biconom.admin.currency.v1.CurrencyPairRateSource.Publish:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	14, // 42: biconom.admin.currency.v1.CurrencyPairRateSource.Unpublish:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	14, // 43: biconom.admin.currency.v1.CurrencyPairRateSource.HeaderGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	14, // 44: biconom.admin.currency.v1.CurrencyPairRateSource.HeaderList:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	14, // 45: biconom.admin.currency.v1.CurrencyPairRateSource.HeaderListByPair:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	14, // 46: biconom.admin.currency.v1.CurrencyPairRateSource.HeaderRename:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	15, // 47: biconom.admin.currency.v1.CurrencyPairRateSource.ValueGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	15, // 48: biconom.admin.currency.v1.CurrencyPairRateSource.ValueSet:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	15, // 49: biconom.admin.currency.v1.CurrencyPairRateSource.ValueList:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	15, // 50: biconom.admin.currency.v1.CurrencyPairRateSource.ValueListByFilter:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	16, // 51: biconom.admin.currency.v1.CurrencyPairRateSource.ValueListBySource:output_type -> biconom.type.Currency.Pair.Rate.Source.Option.Value
	16, // 52: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Option.Value
	16, // 53: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultList:output_type -> biconom.type.Currency.Pair.Rate.Source.Option.Value
	15, // 54: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultFullGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	15, // 55: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultFullList:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	15, // 56: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultAttach:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	17, // 57: biconom.admin.currency.v1.CurrencyPairRateSource.ValueDefaultDetach:output_type -> google.protobuf.Empty
	37, // [37:58] is the sub-list for method output_type
	16, // [16:37] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_biconom_admin_currency_v1_currency_pair_rate_source_proto_init() }
func file_biconom_admin_currency_v1_currency_pair_rate_source_proto_init() {
	if File_biconom_admin_currency_v1_currency_pair_rate_source_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceListByPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceHeaderRenameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueListByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueListBySourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueDefaultListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_biconom_admin_currency_v1_currency_pair_rate_source_proto_goTypes,
		DependencyIndexes: file_biconom_admin_currency_v1_currency_pair_rate_source_proto_depIdxs,
		MessageInfos:      file_biconom_admin_currency_v1_currency_pair_rate_source_proto_msgTypes,
	}.Build()
	File_biconom_admin_currency_v1_currency_pair_rate_source_proto = out.File
	file_biconom_admin_currency_v1_currency_pair_rate_source_proto_rawDesc = nil
	file_biconom_admin_currency_v1_currency_pair_rate_source_proto_goTypes = nil
	file_biconom_admin_currency_v1_currency_pair_rate_source_proto_depIdxs = nil
}
