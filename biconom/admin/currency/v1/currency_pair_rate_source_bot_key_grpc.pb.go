// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: biconom/admin/currency/v1/currency_pair_rate_source_bot_key.proto

package service_admin_currency_pb

import (
	context "context"
	bot_key "github.com/biconom/go-genproto/biconom/type/bot_key"
	currency "github.com/biconom/go-genproto/biconom/type/currency"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyPairRateSourceBotKeyClient is the client API for CurrencyPairRateSourceBotKey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyPairRateSourceBotKeyClient interface {
	Get(ctx context.Context, in *currency.Currency_Pair_Rate_Source_BotKey_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_BotKey, error)
	List(ctx context.Context, in *CurrencyPairRateSourceBotKeyListRequest, opts ...grpc.CallOption) (CurrencyPairRateSourceBotKey_ListClient, error)
	ListBySource(ctx context.Context, in *CurrencyPairRateSourceBotKeyListBySourceRequest, opts ...grpc.CallOption) (CurrencyPairRateSourceBotKey_ListBySourceClient, error)
	Create(ctx context.Context, in *CurrencyPairRateSourceBotKeyCreateRequest, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_BotKey, error)
	Revoke(ctx context.Context, in *currency.Currency_Pair_Rate_Source_BotKey_ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IpMasksSet(ctx context.Context, in *CurrencyPairRateSourceBotKeyIpMasksSetRequest, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_BotKey, error)
}

type currencyPairRateSourceBotKeyClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyPairRateSourceBotKeyClient(cc grpc.ClientConnInterface) CurrencyPairRateSourceBotKeyClient {
	return &currencyPairRateSourceBotKeyClient{cc}
}

func (c *currencyPairRateSourceBotKeyClient) Get(ctx context.Context, in *currency.Currency_Pair_Rate_Source_BotKey_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_BotKey, error) {
	out := new(currency.Currency_Pair_Rate_Source_BotKey)
	err := c.cc.Invoke(ctx, "/biconom.admin.currency.v1.CurrencyPairRateSourceBotKey/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyPairRateSourceBotKeyClient) List(ctx context.Context, in *CurrencyPairRateSourceBotKeyListRequest, opts ...grpc.CallOption) (CurrencyPairRateSourceBotKey_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &CurrencyPairRateSourceBotKey_ServiceDesc.Streams[0], "/biconom.admin.currency.v1.CurrencyPairRateSourceBotKey/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyPairRateSourceBotKeyListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CurrencyPairRateSourceBotKey_ListClient interface {
	Recv() (*currency.Currency_Pair_Rate_Source_BotKey, error)
	grpc.ClientStream
}

type currencyPairRateSourceBotKeyListClient struct {
	grpc.ClientStream
}

func (x *currencyPairRateSourceBotKeyListClient) Recv() (*currency.Currency_Pair_Rate_Source_BotKey, error) {
	m := new(currency.Currency_Pair_Rate_Source_BotKey)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *currencyPairRateSourceBotKeyClient) ListBySource(ctx context.Context, in *CurrencyPairRateSourceBotKeyListBySourceRequest, opts ...grpc.CallOption) (CurrencyPairRateSourceBotKey_ListBySourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &CurrencyPairRateSourceBotKey_ServiceDesc.Streams[1], "/biconom.admin.currency.v1.CurrencyPairRateSourceBotKey/ListBySource", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyPairRateSourceBotKeyListBySourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CurrencyPairRateSourceBotKey_ListBySourceClient interface {
	Recv() (*bot_key.BotKey, error)
	grpc.ClientStream
}

type currencyPairRateSourceBotKeyListBySourceClient struct {
	grpc.ClientStream
}

func (x *currencyPairRateSourceBotKeyListBySourceClient) Recv() (*bot_key.BotKey, error) {
	m := new(bot_key.BotKey)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *currencyPairRateSourceBotKeyClient) Create(ctx context.Context, in *CurrencyPairRateSourceBotKeyCreateRequest, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_BotKey, error) {
	out := new(currency.Currency_Pair_Rate_Source_BotKey)
	err := c.cc.Invoke(ctx, "/biconom.admin.currency.v1.CurrencyPairRateSourceBotKey/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyPairRateSourceBotKeyClient) Revoke(ctx context.Context, in *currency.Currency_Pair_Rate_Source_BotKey_ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/biconom.admin.currency.v1.CurrencyPairRateSourceBotKey/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyPairRateSourceBotKeyClient) IpMasksSet(ctx context.Context, in *CurrencyPairRateSourceBotKeyIpMasksSetRequest, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_BotKey, error) {
	out := new(currency.Currency_Pair_Rate_Source_BotKey)
	err := c.cc.Invoke(ctx, "/biconom.admin.currency.v1.CurrencyPairRateSourceBotKey/IpMasksSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyPairRateSourceBotKeyServer is the server API for CurrencyPairRateSourceBotKey service.
// All implementations must embed UnimplementedCurrencyPairRateSourceBotKeyServer
// for forward compatibility
type CurrencyPairRateSourceBotKeyServer interface {
	Get(context.Context, *currency.Currency_Pair_Rate_Source_BotKey_ID) (*currency.Currency_Pair_Rate_Source_BotKey, error)
	List(*CurrencyPairRateSourceBotKeyListRequest, CurrencyPairRateSourceBotKey_ListServer) error
	ListBySource(*CurrencyPairRateSourceBotKeyListBySourceRequest, CurrencyPairRateSourceBotKey_ListBySourceServer) error
	Create(context.Context, *CurrencyPairRateSourceBotKeyCreateRequest) (*currency.Currency_Pair_Rate_Source_BotKey, error)
	Revoke(context.Context, *currency.Currency_Pair_Rate_Source_BotKey_ID) (*emptypb.Empty, error)
	IpMasksSet(context.Context, *CurrencyPairRateSourceBotKeyIpMasksSetRequest) (*currency.Currency_Pair_Rate_Source_BotKey, error)
	mustEmbedUnimplementedCurrencyPairRateSourceBotKeyServer()
}

// UnimplementedCurrencyPairRateSourceBotKeyServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyPairRateSourceBotKeyServer struct {
}

func (UnimplementedCurrencyPairRateSourceBotKeyServer) Get(context.Context, *currency.Currency_Pair_Rate_Source_BotKey_ID) (*currency.Currency_Pair_Rate_Source_BotKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCurrencyPairRateSourceBotKeyServer) List(*CurrencyPairRateSourceBotKeyListRequest, CurrencyPairRateSourceBotKey_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCurrencyPairRateSourceBotKeyServer) ListBySource(*CurrencyPairRateSourceBotKeyListBySourceRequest, CurrencyPairRateSourceBotKey_ListBySourceServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBySource not implemented")
}
func (UnimplementedCurrencyPairRateSourceBotKeyServer) Create(context.Context, *CurrencyPairRateSourceBotKeyCreateRequest) (*currency.Currency_Pair_Rate_Source_BotKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCurrencyPairRateSourceBotKeyServer) Revoke(context.Context, *currency.Currency_Pair_Rate_Source_BotKey_ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedCurrencyPairRateSourceBotKeyServer) IpMasksSet(context.Context, *CurrencyPairRateSourceBotKeyIpMasksSetRequest) (*currency.Currency_Pair_Rate_Source_BotKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpMasksSet not implemented")
}
func (UnimplementedCurrencyPairRateSourceBotKeyServer) mustEmbedUnimplementedCurrencyPairRateSourceBotKeyServer() {
}

// UnsafeCurrencyPairRateSourceBotKeyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyPairRateSourceBotKeyServer will
// result in compilation errors.
type UnsafeCurrencyPairRateSourceBotKeyServer interface {
	mustEmbedUnimplementedCurrencyPairRateSourceBotKeyServer()
}

func RegisterCurrencyPairRateSourceBotKeyServer(s grpc.ServiceRegistrar, srv CurrencyPairRateSourceBotKeyServer) {
	s.RegisterService(&CurrencyPairRateSourceBotKey_ServiceDesc, srv)
}

func _CurrencyPairRateSourceBotKey_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(currency.Currency_Pair_Rate_Source_BotKey_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyPairRateSourceBotKeyServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.currency.v1.CurrencyPairRateSourceBotKey/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyPairRateSourceBotKeyServer).Get(ctx, req.(*currency.Currency_Pair_Rate_Source_BotKey_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyPairRateSourceBotKey_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyPairRateSourceBotKeyListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyPairRateSourceBotKeyServer).List(m, &currencyPairRateSourceBotKeyListServer{stream})
}

type CurrencyPairRateSourceBotKey_ListServer interface {
	Send(*currency.Currency_Pair_Rate_Source_BotKey) error
	grpc.ServerStream
}

type currencyPairRateSourceBotKeyListServer struct {
	grpc.ServerStream
}

func (x *currencyPairRateSourceBotKeyListServer) Send(m *currency.Currency_Pair_Rate_Source_BotKey) error {
	return x.ServerStream.SendMsg(m)
}

func _CurrencyPairRateSourceBotKey_ListBySource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyPairRateSourceBotKeyListBySourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyPairRateSourceBotKeyServer).ListBySource(m, &currencyPairRateSourceBotKeyListBySourceServer{stream})
}

type CurrencyPairRateSourceBotKey_ListBySourceServer interface {
	Send(*bot_key.BotKey) error
	grpc.ServerStream
}

type currencyPairRateSourceBotKeyListBySourceServer struct {
	grpc.ServerStream
}

func (x *currencyPairRateSourceBotKeyListBySourceServer) Send(m *bot_key.BotKey) error {
	return x.ServerStream.SendMsg(m)
}

func _CurrencyPairRateSourceBotKey_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyPairRateSourceBotKeyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyPairRateSourceBotKeyServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.currency.v1.CurrencyPairRateSourceBotKey/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyPairRateSourceBotKeyServer).Create(ctx, req.(*CurrencyPairRateSourceBotKeyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyPairRateSourceBotKey_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(currency.Currency_Pair_Rate_Source_BotKey_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyPairRateSourceBotKeyServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.currency.v1.CurrencyPairRateSourceBotKey/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyPairRateSourceBotKeyServer).Revoke(ctx, req.(*currency.Currency_Pair_Rate_Source_BotKey_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyPairRateSourceBotKey_IpMasksSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyPairRateSourceBotKeyIpMasksSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyPairRateSourceBotKeyServer).IpMasksSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.currency.v1.CurrencyPairRateSourceBotKey/IpMasksSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyPairRateSourceBotKeyServer).IpMasksSet(ctx, req.(*CurrencyPairRateSourceBotKeyIpMasksSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyPairRateSourceBotKey_ServiceDesc is the grpc.ServiceDesc for CurrencyPairRateSourceBotKey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyPairRateSourceBotKey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconom.admin.currency.v1.CurrencyPairRateSourceBotKey",
	HandlerType: (*CurrencyPairRateSourceBotKeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CurrencyPairRateSourceBotKey_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CurrencyPairRateSourceBotKey_Create_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _CurrencyPairRateSourceBotKey_Revoke_Handler,
		},
		{
			MethodName: "IpMasksSet",
			Handler:    _CurrencyPairRateSourceBotKey_IpMasksSet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _CurrencyPairRateSourceBotKey_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBySource",
			Handler:       _CurrencyPairRateSourceBotKey_ListBySource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biconom/admin/currency/v1/currency_pair_rate_source_bot_key.proto",
}
