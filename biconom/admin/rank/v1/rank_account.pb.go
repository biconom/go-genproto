// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: biconom/admin/rank/v1/rank_account.proto

package service_admin_rank_pb

import (
	account "github.com/biconom/go-genproto/biconom/type/account"
	rank "github.com/biconom/go-genproto/biconom/type/rank"
	sort "github.com/biconom/go-genproto/biconom/type/sort"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RankAccountGetByActivatedWithNextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankActivated *account.Account_RankSystem_Rank `protobuf:"bytes,1,opt,name=rank_activated,json=rankActivated,proto3" json:"rank_activated,omitempty"`
	RankNext      *account.Account_RankSystem_Rank `protobuf:"bytes,2,opt,name=rank_next,json=rankNext,proto3" json:"rank_next,omitempty"`
}

func (x *RankAccountGetByActivatedWithNextResponse) Reset() {
	*x = RankAccountGetByActivatedWithNextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_rank_v1_rank_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankAccountGetByActivatedWithNextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankAccountGetByActivatedWithNextResponse) ProtoMessage() {}

func (x *RankAccountGetByActivatedWithNextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_rank_v1_rank_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankAccountGetByActivatedWithNextResponse.ProtoReflect.Descriptor instead.
func (*RankAccountGetByActivatedWithNextResponse) Descriptor() ([]byte, []int) {
	return file_biconom_admin_rank_v1_rank_account_proto_rawDescGZIP(), []int{0}
}

func (x *RankAccountGetByActivatedWithNextResponse) GetRankActivated() *account.Account_RankSystem_Rank {
	if x != nil {
		return x.RankActivated
	}
	return nil
}

func (x *RankAccountGetByActivatedWithNextResponse) GetRankNext() *account.Account_RankSystem_Rank {
	if x != nil {
		return x.RankNext
	}
	return nil
}

type RankAccountListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account                 *account.Account_ID      `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Step                    *rank.RankSystem_Rank_ID `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	Sort                    *sort.Sort               `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	OnlyPublishedRankSystem bool                     `protobuf:"varint,4,opt,name=only_published_rank_system,json=onlyPublishedRankSystem,proto3" json:"only_published_rank_system,omitempty"`
}

func (x *RankAccountListRequest) Reset() {
	*x = RankAccountListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_rank_v1_rank_account_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankAccountListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankAccountListRequest) ProtoMessage() {}

func (x *RankAccountListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_rank_v1_rank_account_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankAccountListRequest.ProtoReflect.Descriptor instead.
func (*RankAccountListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_rank_v1_rank_account_proto_rawDescGZIP(), []int{1}
}

func (x *RankAccountListRequest) GetAccount() *account.Account_ID {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *RankAccountListRequest) GetStep() *rank.RankSystem_Rank_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *RankAccountListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *RankAccountListRequest) GetOnlyPublishedRankSystem() bool {
	if x != nil {
		return x.OnlyPublishedRankSystem
	}
	return false
}

type RankAccountListByRankSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankSystem              *account.Account_RankSystem_ID `protobuf:"bytes,1,opt,name=rank_system,json=rankSystem,proto3" json:"rank_system,omitempty"`
	Step                    *rank.RankSystem_Rank_ID_Inner `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	Sort                    *sort.Sort                     `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	OnlyPublishedRankSystem bool                           `protobuf:"varint,4,opt,name=only_published_rank_system,json=onlyPublishedRankSystem,proto3" json:"only_published_rank_system,omitempty"`
}

func (x *RankAccountListByRankSystemRequest) Reset() {
	*x = RankAccountListByRankSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_admin_rank_v1_rank_account_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankAccountListByRankSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankAccountListByRankSystemRequest) ProtoMessage() {}

func (x *RankAccountListByRankSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_admin_rank_v1_rank_account_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankAccountListByRankSystemRequest.ProtoReflect.Descriptor instead.
func (*RankAccountListByRankSystemRequest) Descriptor() ([]byte, []int) {
	return file_biconom_admin_rank_v1_rank_account_proto_rawDescGZIP(), []int{2}
}

func (x *RankAccountListByRankSystemRequest) GetRankSystem() *account.Account_RankSystem_ID {
	if x != nil {
		return x.RankSystem
	}
	return nil
}

func (x *RankAccountListByRankSystemRequest) GetStep() *rank.RankSystem_Rank_ID_Inner {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *RankAccountListByRankSystemRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *RankAccountListByRankSystemRequest) GetOnlyPublishedRankSystem() bool {
	if x != nil {
		return x.OnlyPublishedRankSystem
	}
	return false
}

var File_biconom_admin_rank_v1_rank_account_proto protoreflect.FileDescriptor

var file_biconom_admin_rank_v1_rank_account_proto_rawDesc = []byte{
	0x0a, 0x28, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x72, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x1a, 0x1a, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x6f, 0x72, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x29, 0x52, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x16, 0x52, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x22, 0x8b, 0x02, 0x0a, 0x22, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49,
	0x44, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3a, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x49, 0x44, 0x2e, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x32, 0xa9,
	0x04, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x49, 0x44, 0x1a,
	0x25, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x1a,
	0x25, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x65, 0x78, 0x74, 0x12, 0x23, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x1a, 0x40, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x78, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x2f,
	0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_biconom_admin_rank_v1_rank_account_proto_rawDescOnce sync.Once
	file_biconom_admin_rank_v1_rank_account_proto_rawDescData = file_biconom_admin_rank_v1_rank_account_proto_rawDesc
)

func file_biconom_admin_rank_v1_rank_account_proto_rawDescGZIP() []byte {
	file_biconom_admin_rank_v1_rank_account_proto_rawDescOnce.Do(func() {
		file_biconom_admin_rank_v1_rank_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_biconom_admin_rank_v1_rank_account_proto_rawDescData)
	})
	return file_biconom_admin_rank_v1_rank_account_proto_rawDescData
}

var file_biconom_admin_rank_v1_rank_account_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_biconom_admin_rank_v1_rank_account_proto_goTypes = []interface{}{
	(*RankAccountGetByActivatedWithNextResponse)(nil), // 0: biconom.admin.rank.v1.RankAccountGetByActivatedWithNextResponse
	(*RankAccountListRequest)(nil),                    // 1: biconom.admin.rank.v1.RankAccountListRequest
	(*RankAccountListByRankSystemRequest)(nil),        // 2: biconom.admin.rank.v1.RankAccountListByRankSystemRequest
	(*account.Account_RankSystem_Rank)(nil),           // 3: biconom.type.Account.RankSystem.Rank
	(*account.Account_ID)(nil),                        // 4: biconom.type.Account.ID
	(*rank.RankSystem_Rank_ID)(nil),                   // 5: biconom.type.RankSystem.Rank.ID
	(*sort.Sort)(nil),                                 // 6: biconom.type.Sort
	(*account.Account_RankSystem_ID)(nil),             // 7: biconom.type.Account.RankSystem.ID
	(*rank.RankSystem_Rank_ID_Inner)(nil),             // 8: biconom.type.RankSystem.Rank.ID.Inner
	(*account.Account_RankSystem_Rank_ID)(nil),        // 9: biconom.type.Account.RankSystem.Rank.ID
	(*account.Account_RankSystem_Option)(nil),         // 10: biconom.type.Account.RankSystem.Option
}
var file_biconom_admin_rank_v1_rank_account_proto_depIdxs = []int32{
	3,  // 0: biconom.admin.rank.v1.RankAccountGetByActivatedWithNextResponse.rank_activated:type_name -> biconom.type.Account.RankSystem.Rank
	3,  // 1: biconom.admin.rank.v1.RankAccountGetByActivatedWithNextResponse.rank_next:type_name -> biconom.type.Account.RankSystem.Rank
	4,  // 2: biconom.admin.rank.v1.RankAccountListRequest.account:type_name -> biconom.type.Account.ID
	5,  // 3: biconom.admin.rank.v1.RankAccountListRequest.step:type_name -> biconom.type.RankSystem.Rank.ID
	6,  // 4: biconom.admin.rank.v1.RankAccountListRequest.sort:type_name -> biconom.type.Sort
	7,  // 5: biconom.admin.rank.v1.RankAccountListByRankSystemRequest.rank_system:type_name -> biconom.type.Account.RankSystem.ID
	8,  // 6: biconom.admin.rank.v1.RankAccountListByRankSystemRequest.step:type_name -> biconom.type.RankSystem.Rank.ID.Inner
	6,  // 7: biconom.admin.rank.v1.RankAccountListByRankSystemRequest.sort:type_name -> biconom.type.Sort
	9,  // 8: biconom.admin.rank.v1.RankAccount.Get:input_type -> biconom.type.Account.RankSystem.Rank.ID
	7,  // 9: biconom.admin.rank.v1.RankAccount.GetByActivated:input_type -> biconom.type.Account.RankSystem.ID
	7,  // 10: biconom.admin.rank.v1.RankAccount.GetByActivatedWithNext:input_type -> biconom.type.Account.RankSystem.ID
	1,  // 11: biconom.admin.rank.v1.RankAccount.List:input_type -> biconom.admin.rank.v1.RankAccountListRequest
	2,  // 12: biconom.admin.rank.v1.RankAccount.ListByRankSystem:input_type -> biconom.admin.rank.v1.RankAccountListByRankSystemRequest
	3,  // 13: biconom.admin.rank.v1.RankAccount.Get:output_type -> biconom.type.Account.RankSystem.Rank
	3,  // 14: biconom.admin.rank.v1.RankAccount.GetByActivated:output_type -> biconom.type.Account.RankSystem.Rank
	0,  // 15: biconom.admin.rank.v1.RankAccount.GetByActivatedWithNext:output_type -> biconom.admin.rank.v1.RankAccountGetByActivatedWithNextResponse
	10, // 16: biconom.admin.rank.v1.RankAccount.List:output_type -> biconom.type.Account.RankSystem.Option
	3,  // 17: biconom.admin.rank.v1.RankAccount.ListByRankSystem:output_type -> biconom.type.Account.RankSystem.Rank
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_biconom_admin_rank_v1_rank_account_proto_init() }
func file_biconom_admin_rank_v1_rank_account_proto_init() {
	if File_biconom_admin_rank_v1_rank_account_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biconom_admin_rank_v1_rank_account_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankAccountGetByActivatedWithNextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_rank_v1_rank_account_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankAccountListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_admin_rank_v1_rank_account_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankAccountListByRankSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biconom_admin_rank_v1_rank_account_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_biconom_admin_rank_v1_rank_account_proto_goTypes,
		DependencyIndexes: file_biconom_admin_rank_v1_rank_account_proto_depIdxs,
		MessageInfos:      file_biconom_admin_rank_v1_rank_account_proto_msgTypes,
	}.Build()
	File_biconom_admin_rank_v1_rank_account_proto = out.File
	file_biconom_admin_rank_v1_rank_account_proto_rawDesc = nil
	file_biconom_admin_rank_v1_rank_account_proto_goTypes = nil
	file_biconom_admin_rank_v1_rank_account_proto_depIdxs = nil
}
