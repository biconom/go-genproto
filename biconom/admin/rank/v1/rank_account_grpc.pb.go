// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: biconom/admin/rank/v1/rank_account.proto

package service_admin_rank_pb

import (
	context "context"
	account "github.com/biconom/go-genproto/biconom/type/account"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RankAccountClient is the client API for RankAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankAccountClient interface {
	Get(ctx context.Context, in *account.Account_RankSystem_Rank_ID, opts ...grpc.CallOption) (*account.Account_RankSystem_Rank, error)
	GetByActivated(ctx context.Context, in *account.Account_RankSystem_ID, opts ...grpc.CallOption) (*account.Account_RankSystem_Rank, error)
	GetByActivatedWithNext(ctx context.Context, in *account.Account_RankSystem_ID, opts ...grpc.CallOption) (*RankAccountGetByActivatedWithNextResponse, error)
	List(ctx context.Context, in *RankAccountListRequest, opts ...grpc.CallOption) (RankAccount_ListClient, error)
	ListByRankSystem(ctx context.Context, in *RankAccountListByRankSystemRequest, opts ...grpc.CallOption) (RankAccount_ListByRankSystemClient, error)
}

type rankAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewRankAccountClient(cc grpc.ClientConnInterface) RankAccountClient {
	return &rankAccountClient{cc}
}

func (c *rankAccountClient) Get(ctx context.Context, in *account.Account_RankSystem_Rank_ID, opts ...grpc.CallOption) (*account.Account_RankSystem_Rank, error) {
	out := new(account.Account_RankSystem_Rank)
	err := c.cc.Invoke(ctx, "/biconom.admin.rank.v1.RankAccount/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankAccountClient) GetByActivated(ctx context.Context, in *account.Account_RankSystem_ID, opts ...grpc.CallOption) (*account.Account_RankSystem_Rank, error) {
	out := new(account.Account_RankSystem_Rank)
	err := c.cc.Invoke(ctx, "/biconom.admin.rank.v1.RankAccount/GetByActivated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankAccountClient) GetByActivatedWithNext(ctx context.Context, in *account.Account_RankSystem_ID, opts ...grpc.CallOption) (*RankAccountGetByActivatedWithNextResponse, error) {
	out := new(RankAccountGetByActivatedWithNextResponse)
	err := c.cc.Invoke(ctx, "/biconom.admin.rank.v1.RankAccount/GetByActivatedWithNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankAccountClient) List(ctx context.Context, in *RankAccountListRequest, opts ...grpc.CallOption) (RankAccount_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankAccount_ServiceDesc.Streams[0], "/biconom.admin.rank.v1.RankAccount/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankAccountListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankAccount_ListClient interface {
	Recv() (*account.Account_RankSystem_Option, error)
	grpc.ClientStream
}

type rankAccountListClient struct {
	grpc.ClientStream
}

func (x *rankAccountListClient) Recv() (*account.Account_RankSystem_Option, error) {
	m := new(account.Account_RankSystem_Option)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rankAccountClient) ListByRankSystem(ctx context.Context, in *RankAccountListByRankSystemRequest, opts ...grpc.CallOption) (RankAccount_ListByRankSystemClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankAccount_ServiceDesc.Streams[1], "/biconom.admin.rank.v1.RankAccount/ListByRankSystem", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankAccountListByRankSystemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankAccount_ListByRankSystemClient interface {
	Recv() (*account.Account_RankSystem_Rank, error)
	grpc.ClientStream
}

type rankAccountListByRankSystemClient struct {
	grpc.ClientStream
}

func (x *rankAccountListByRankSystemClient) Recv() (*account.Account_RankSystem_Rank, error) {
	m := new(account.Account_RankSystem_Rank)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RankAccountServer is the server API for RankAccount service.
// All implementations must embed UnimplementedRankAccountServer
// for forward compatibility
type RankAccountServer interface {
	Get(context.Context, *account.Account_RankSystem_Rank_ID) (*account.Account_RankSystem_Rank, error)
	GetByActivated(context.Context, *account.Account_RankSystem_ID) (*account.Account_RankSystem_Rank, error)
	GetByActivatedWithNext(context.Context, *account.Account_RankSystem_ID) (*RankAccountGetByActivatedWithNextResponse, error)
	List(*RankAccountListRequest, RankAccount_ListServer) error
	ListByRankSystem(*RankAccountListByRankSystemRequest, RankAccount_ListByRankSystemServer) error
	mustEmbedUnimplementedRankAccountServer()
}

// UnimplementedRankAccountServer must be embedded to have forward compatible implementations.
type UnimplementedRankAccountServer struct {
}

func (UnimplementedRankAccountServer) Get(context.Context, *account.Account_RankSystem_Rank_ID) (*account.Account_RankSystem_Rank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRankAccountServer) GetByActivated(context.Context, *account.Account_RankSystem_ID) (*account.Account_RankSystem_Rank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByActivated not implemented")
}
func (UnimplementedRankAccountServer) GetByActivatedWithNext(context.Context, *account.Account_RankSystem_ID) (*RankAccountGetByActivatedWithNextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByActivatedWithNext not implemented")
}
func (UnimplementedRankAccountServer) List(*RankAccountListRequest, RankAccount_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRankAccountServer) ListByRankSystem(*RankAccountListByRankSystemRequest, RankAccount_ListByRankSystemServer) error {
	return status.Errorf(codes.Unimplemented, "method ListByRankSystem not implemented")
}
func (UnimplementedRankAccountServer) mustEmbedUnimplementedRankAccountServer() {}

// UnsafeRankAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankAccountServer will
// result in compilation errors.
type UnsafeRankAccountServer interface {
	mustEmbedUnimplementedRankAccountServer()
}

func RegisterRankAccountServer(s grpc.ServiceRegistrar, srv RankAccountServer) {
	s.RegisterService(&RankAccount_ServiceDesc, srv)
}

func _RankAccount_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account_RankSystem_Rank_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankAccountServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.rank.v1.RankAccount/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankAccountServer).Get(ctx, req.(*account.Account_RankSystem_Rank_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankAccount_GetByActivated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account_RankSystem_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankAccountServer).GetByActivated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.rank.v1.RankAccount/GetByActivated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankAccountServer).GetByActivated(ctx, req.(*account.Account_RankSystem_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankAccount_GetByActivatedWithNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account_RankSystem_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankAccountServer).GetByActivatedWithNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.rank.v1.RankAccount/GetByActivatedWithNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankAccountServer).GetByActivatedWithNext(ctx, req.(*account.Account_RankSystem_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankAccount_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankAccountListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankAccountServer).List(m, &rankAccountListServer{stream})
}

type RankAccount_ListServer interface {
	Send(*account.Account_RankSystem_Option) error
	grpc.ServerStream
}

type rankAccountListServer struct {
	grpc.ServerStream
}

func (x *rankAccountListServer) Send(m *account.Account_RankSystem_Option) error {
	return x.ServerStream.SendMsg(m)
}

func _RankAccount_ListByRankSystem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankAccountListByRankSystemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankAccountServer).ListByRankSystem(m, &rankAccountListByRankSystemServer{stream})
}

type RankAccount_ListByRankSystemServer interface {
	Send(*account.Account_RankSystem_Rank) error
	grpc.ServerStream
}

type rankAccountListByRankSystemServer struct {
	grpc.ServerStream
}

func (x *rankAccountListByRankSystemServer) Send(m *account.Account_RankSystem_Rank) error {
	return x.ServerStream.SendMsg(m)
}

// RankAccount_ServiceDesc is the grpc.ServiceDesc for RankAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconom.admin.rank.v1.RankAccount",
	HandlerType: (*RankAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RankAccount_Get_Handler,
		},
		{
			MethodName: "GetByActivated",
			Handler:    _RankAccount_GetByActivated_Handler,
		},
		{
			MethodName: "GetByActivatedWithNext",
			Handler:    _RankAccount_GetByActivatedWithNext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _RankAccount_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListByRankSystem",
			Handler:       _RankAccount_ListByRankSystem_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biconom/admin/rank/v1/rank_account.proto",
}
