// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: biconom/admin/rank/v1/rank_system_account.proto

package service_admin_rank_pb

import (
	context "context"
	account "github.com/biconom/go-genproto/biconom/type/account"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RankSystemAccountClient is the client API for RankSystemAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankSystemAccountClient interface {
	Get(ctx context.Context, in *account.Account_RankSystem_ID, opts ...grpc.CallOption) (*account.Account_RankSystem, error)
	List(ctx context.Context, in *RankSystemAccountListRequest, opts ...grpc.CallOption) (RankSystemAccount_ListClient, error)
	GetWithRankActivated(ctx context.Context, in *account.Account_RankSystem_ID, opts ...grpc.CallOption) (*account.Account_RankSystem_Option, error)
	ListWithRankActivated(ctx context.Context, in *RankSystemAccountListRequest, opts ...grpc.CallOption) (RankSystemAccount_ListWithRankActivatedClient, error)
	GetWithRankActivatedAndNext(ctx context.Context, in *account.Account_RankSystem_ID, opts ...grpc.CallOption) (*RankSystemAccountWithRankActivatedAndNextResponse, error)
	ListWithRankActivatedAndNext(ctx context.Context, in *RankSystemAccountListRequest, opts ...grpc.CallOption) (RankSystemAccount_ListWithRankActivatedAndNextClient, error)
}

type rankSystemAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewRankSystemAccountClient(cc grpc.ClientConnInterface) RankSystemAccountClient {
	return &rankSystemAccountClient{cc}
}

func (c *rankSystemAccountClient) Get(ctx context.Context, in *account.Account_RankSystem_ID, opts ...grpc.CallOption) (*account.Account_RankSystem, error) {
	out := new(account.Account_RankSystem)
	err := c.cc.Invoke(ctx, "/biconom.admin.rank.v1.RankSystemAccount/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankSystemAccountClient) List(ctx context.Context, in *RankSystemAccountListRequest, opts ...grpc.CallOption) (RankSystemAccount_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankSystemAccount_ServiceDesc.Streams[0], "/biconom.admin.rank.v1.RankSystemAccount/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankSystemAccountListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankSystemAccount_ListClient interface {
	Recv() (*account.Account_RankSystem, error)
	grpc.ClientStream
}

type rankSystemAccountListClient struct {
	grpc.ClientStream
}

func (x *rankSystemAccountListClient) Recv() (*account.Account_RankSystem, error) {
	m := new(account.Account_RankSystem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rankSystemAccountClient) GetWithRankActivated(ctx context.Context, in *account.Account_RankSystem_ID, opts ...grpc.CallOption) (*account.Account_RankSystem_Option, error) {
	out := new(account.Account_RankSystem_Option)
	err := c.cc.Invoke(ctx, "/biconom.admin.rank.v1.RankSystemAccount/GetWithRankActivated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankSystemAccountClient) ListWithRankActivated(ctx context.Context, in *RankSystemAccountListRequest, opts ...grpc.CallOption) (RankSystemAccount_ListWithRankActivatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankSystemAccount_ServiceDesc.Streams[1], "/biconom.admin.rank.v1.RankSystemAccount/ListWithRankActivated", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankSystemAccountListWithRankActivatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankSystemAccount_ListWithRankActivatedClient interface {
	Recv() (*account.Account_RankSystem_Option, error)
	grpc.ClientStream
}

type rankSystemAccountListWithRankActivatedClient struct {
	grpc.ClientStream
}

func (x *rankSystemAccountListWithRankActivatedClient) Recv() (*account.Account_RankSystem_Option, error) {
	m := new(account.Account_RankSystem_Option)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rankSystemAccountClient) GetWithRankActivatedAndNext(ctx context.Context, in *account.Account_RankSystem_ID, opts ...grpc.CallOption) (*RankSystemAccountWithRankActivatedAndNextResponse, error) {
	out := new(RankSystemAccountWithRankActivatedAndNextResponse)
	err := c.cc.Invoke(ctx, "/biconom.admin.rank.v1.RankSystemAccount/GetWithRankActivatedAndNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankSystemAccountClient) ListWithRankActivatedAndNext(ctx context.Context, in *RankSystemAccountListRequest, opts ...grpc.CallOption) (RankSystemAccount_ListWithRankActivatedAndNextClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankSystemAccount_ServiceDesc.Streams[2], "/biconom.admin.rank.v1.RankSystemAccount/ListWithRankActivatedAndNext", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankSystemAccountListWithRankActivatedAndNextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankSystemAccount_ListWithRankActivatedAndNextClient interface {
	Recv() (*RankSystemAccountWithRankActivatedAndNextResponse, error)
	grpc.ClientStream
}

type rankSystemAccountListWithRankActivatedAndNextClient struct {
	grpc.ClientStream
}

func (x *rankSystemAccountListWithRankActivatedAndNextClient) Recv() (*RankSystemAccountWithRankActivatedAndNextResponse, error) {
	m := new(RankSystemAccountWithRankActivatedAndNextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RankSystemAccountServer is the server API for RankSystemAccount service.
// All implementations must embed UnimplementedRankSystemAccountServer
// for forward compatibility
type RankSystemAccountServer interface {
	Get(context.Context, *account.Account_RankSystem_ID) (*account.Account_RankSystem, error)
	List(*RankSystemAccountListRequest, RankSystemAccount_ListServer) error
	GetWithRankActivated(context.Context, *account.Account_RankSystem_ID) (*account.Account_RankSystem_Option, error)
	ListWithRankActivated(*RankSystemAccountListRequest, RankSystemAccount_ListWithRankActivatedServer) error
	GetWithRankActivatedAndNext(context.Context, *account.Account_RankSystem_ID) (*RankSystemAccountWithRankActivatedAndNextResponse, error)
	ListWithRankActivatedAndNext(*RankSystemAccountListRequest, RankSystemAccount_ListWithRankActivatedAndNextServer) error
	mustEmbedUnimplementedRankSystemAccountServer()
}

// UnimplementedRankSystemAccountServer must be embedded to have forward compatible implementations.
type UnimplementedRankSystemAccountServer struct {
}

func (UnimplementedRankSystemAccountServer) Get(context.Context, *account.Account_RankSystem_ID) (*account.Account_RankSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRankSystemAccountServer) List(*RankSystemAccountListRequest, RankSystemAccount_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRankSystemAccountServer) GetWithRankActivated(context.Context, *account.Account_RankSystem_ID) (*account.Account_RankSystem_Option, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithRankActivated not implemented")
}
func (UnimplementedRankSystemAccountServer) ListWithRankActivated(*RankSystemAccountListRequest, RankSystemAccount_ListWithRankActivatedServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWithRankActivated not implemented")
}
func (UnimplementedRankSystemAccountServer) GetWithRankActivatedAndNext(context.Context, *account.Account_RankSystem_ID) (*RankSystemAccountWithRankActivatedAndNextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithRankActivatedAndNext not implemented")
}
func (UnimplementedRankSystemAccountServer) ListWithRankActivatedAndNext(*RankSystemAccountListRequest, RankSystemAccount_ListWithRankActivatedAndNextServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWithRankActivatedAndNext not implemented")
}
func (UnimplementedRankSystemAccountServer) mustEmbedUnimplementedRankSystemAccountServer() {}

// UnsafeRankSystemAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankSystemAccountServer will
// result in compilation errors.
type UnsafeRankSystemAccountServer interface {
	mustEmbedUnimplementedRankSystemAccountServer()
}

func RegisterRankSystemAccountServer(s grpc.ServiceRegistrar, srv RankSystemAccountServer) {
	s.RegisterService(&RankSystemAccount_ServiceDesc, srv)
}

func _RankSystemAccount_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account_RankSystem_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankSystemAccountServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.rank.v1.RankSystemAccount/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankSystemAccountServer).Get(ctx, req.(*account.Account_RankSystem_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankSystemAccount_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankSystemAccountListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankSystemAccountServer).List(m, &rankSystemAccountListServer{stream})
}

type RankSystemAccount_ListServer interface {
	Send(*account.Account_RankSystem) error
	grpc.ServerStream
}

type rankSystemAccountListServer struct {
	grpc.ServerStream
}

func (x *rankSystemAccountListServer) Send(m *account.Account_RankSystem) error {
	return x.ServerStream.SendMsg(m)
}

func _RankSystemAccount_GetWithRankActivated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account_RankSystem_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankSystemAccountServer).GetWithRankActivated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.rank.v1.RankSystemAccount/GetWithRankActivated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankSystemAccountServer).GetWithRankActivated(ctx, req.(*account.Account_RankSystem_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankSystemAccount_ListWithRankActivated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankSystemAccountListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankSystemAccountServer).ListWithRankActivated(m, &rankSystemAccountListWithRankActivatedServer{stream})
}

type RankSystemAccount_ListWithRankActivatedServer interface {
	Send(*account.Account_RankSystem_Option) error
	grpc.ServerStream
}

type rankSystemAccountListWithRankActivatedServer struct {
	grpc.ServerStream
}

func (x *rankSystemAccountListWithRankActivatedServer) Send(m *account.Account_RankSystem_Option) error {
	return x.ServerStream.SendMsg(m)
}

func _RankSystemAccount_GetWithRankActivatedAndNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account_RankSystem_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankSystemAccountServer).GetWithRankActivatedAndNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.admin.rank.v1.RankSystemAccount/GetWithRankActivatedAndNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankSystemAccountServer).GetWithRankActivatedAndNext(ctx, req.(*account.Account_RankSystem_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankSystemAccount_ListWithRankActivatedAndNext_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankSystemAccountListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankSystemAccountServer).ListWithRankActivatedAndNext(m, &rankSystemAccountListWithRankActivatedAndNextServer{stream})
}

type RankSystemAccount_ListWithRankActivatedAndNextServer interface {
	Send(*RankSystemAccountWithRankActivatedAndNextResponse) error
	grpc.ServerStream
}

type rankSystemAccountListWithRankActivatedAndNextServer struct {
	grpc.ServerStream
}

func (x *rankSystemAccountListWithRankActivatedAndNextServer) Send(m *RankSystemAccountWithRankActivatedAndNextResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RankSystemAccount_ServiceDesc is the grpc.ServiceDesc for RankSystemAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankSystemAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconom.admin.rank.v1.RankSystemAccount",
	HandlerType: (*RankSystemAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RankSystemAccount_Get_Handler,
		},
		{
			MethodName: "GetWithRankActivated",
			Handler:    _RankSystemAccount_GetWithRankActivated_Handler,
		},
		{
			MethodName: "GetWithRankActivatedAndNext",
			Handler:    _RankSystemAccount_GetWithRankActivatedAndNext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _RankSystemAccount_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListWithRankActivated",
			Handler:       _RankSystemAccount_ListWithRankActivated_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListWithRankActivatedAndNext",
			Handler:       _RankSystemAccount_ListWithRankActivatedAndNext_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biconom/admin/rank/v1/rank_system_account.proto",
}
