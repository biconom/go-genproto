// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: biconom/bot/currency/v1/currency_pair_rate_source.proto

package service_bot_currency_pb

import (
	context "context"
	currency "github.com/biconom/go-genproto/biconom/type/currency"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyPairRateSourceClient is the client API for CurrencyPairRateSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyPairRateSourceClient interface {
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source, error)
	HeaderGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Header, error)
	ValueGet(ctx context.Context, in *currency.Currency_Pair_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Option_Value, error)
	ValueSet(ctx context.Context, in *CurrencyPairRateSourceValueSetRequest, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Option_Value, error)
	ValueList(ctx context.Context, in *CurrencyPairRateSourceValueListRequest, opts ...grpc.CallOption) (CurrencyPairRateSource_ValueListClient, error)
	ValueListByFilter(ctx context.Context, in *CurrencyPairRateSourceValueListByFilterRequest, opts ...grpc.CallOption) (CurrencyPairRateSource_ValueListByFilterClient, error)
}

type currencyPairRateSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyPairRateSourceClient(cc grpc.ClientConnInterface) CurrencyPairRateSourceClient {
	return &currencyPairRateSourceClient{cc}
}

func (c *currencyPairRateSourceClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source, error) {
	out := new(currency.Currency_Pair_Rate_Source)
	err := c.cc.Invoke(ctx, "/biconom.bot.currency.v1.CurrencyPairRateSource/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyPairRateSourceClient) HeaderGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Header, error) {
	out := new(currency.Currency_Pair_Rate_Source_Header)
	err := c.cc.Invoke(ctx, "/biconom.bot.currency.v1.CurrencyPairRateSource/HeaderGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyPairRateSourceClient) ValueGet(ctx context.Context, in *currency.Currency_Pair_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Option_Value, error) {
	out := new(currency.Currency_Pair_Rate_Source_Option_Value)
	err := c.cc.Invoke(ctx, "/biconom.bot.currency.v1.CurrencyPairRateSource/ValueGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyPairRateSourceClient) ValueSet(ctx context.Context, in *CurrencyPairRateSourceValueSetRequest, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Option_Value, error) {
	out := new(currency.Currency_Pair_Rate_Source_Option_Value)
	err := c.cc.Invoke(ctx, "/biconom.bot.currency.v1.CurrencyPairRateSource/ValueSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyPairRateSourceClient) ValueList(ctx context.Context, in *CurrencyPairRateSourceValueListRequest, opts ...grpc.CallOption) (CurrencyPairRateSource_ValueListClient, error) {
	stream, err := c.cc.NewStream(ctx, &CurrencyPairRateSource_ServiceDesc.Streams[0], "/biconom.bot.currency.v1.CurrencyPairRateSource/ValueList", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyPairRateSourceValueListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CurrencyPairRateSource_ValueListClient interface {
	Recv() (*currency.Currency_Pair_Rate_Source_Option_Value, error)
	grpc.ClientStream
}

type currencyPairRateSourceValueListClient struct {
	grpc.ClientStream
}

func (x *currencyPairRateSourceValueListClient) Recv() (*currency.Currency_Pair_Rate_Source_Option_Value, error) {
	m := new(currency.Currency_Pair_Rate_Source_Option_Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *currencyPairRateSourceClient) ValueListByFilter(ctx context.Context, in *CurrencyPairRateSourceValueListByFilterRequest, opts ...grpc.CallOption) (CurrencyPairRateSource_ValueListByFilterClient, error) {
	stream, err := c.cc.NewStream(ctx, &CurrencyPairRateSource_ServiceDesc.Streams[1], "/biconom.bot.currency.v1.CurrencyPairRateSource/ValueListByFilter", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyPairRateSourceValueListByFilterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CurrencyPairRateSource_ValueListByFilterClient interface {
	Recv() (*currency.Currency_Pair_Rate_Source_Option_Value, error)
	grpc.ClientStream
}

type currencyPairRateSourceValueListByFilterClient struct {
	grpc.ClientStream
}

func (x *currencyPairRateSourceValueListByFilterClient) Recv() (*currency.Currency_Pair_Rate_Source_Option_Value, error) {
	m := new(currency.Currency_Pair_Rate_Source_Option_Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CurrencyPairRateSourceServer is the server API for CurrencyPairRateSource service.
// All implementations must embed UnimplementedCurrencyPairRateSourceServer
// for forward compatibility
type CurrencyPairRateSourceServer interface {
	Get(context.Context, *emptypb.Empty) (*currency.Currency_Pair_Rate_Source, error)
	HeaderGet(context.Context, *emptypb.Empty) (*currency.Currency_Pair_Rate_Source_Header, error)
	ValueGet(context.Context, *currency.Currency_Pair_ID) (*currency.Currency_Pair_Rate_Source_Option_Value, error)
	ValueSet(context.Context, *CurrencyPairRateSourceValueSetRequest) (*currency.Currency_Pair_Rate_Source_Option_Value, error)
	ValueList(*CurrencyPairRateSourceValueListRequest, CurrencyPairRateSource_ValueListServer) error
	ValueListByFilter(*CurrencyPairRateSourceValueListByFilterRequest, CurrencyPairRateSource_ValueListByFilterServer) error
	mustEmbedUnimplementedCurrencyPairRateSourceServer()
}

// UnimplementedCurrencyPairRateSourceServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyPairRateSourceServer struct {
}

func (UnimplementedCurrencyPairRateSourceServer) Get(context.Context, *emptypb.Empty) (*currency.Currency_Pair_Rate_Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCurrencyPairRateSourceServer) HeaderGet(context.Context, *emptypb.Empty) (*currency.Currency_Pair_Rate_Source_Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeaderGet not implemented")
}
func (UnimplementedCurrencyPairRateSourceServer) ValueGet(context.Context, *currency.Currency_Pair_ID) (*currency.Currency_Pair_Rate_Source_Option_Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueGet not implemented")
}
func (UnimplementedCurrencyPairRateSourceServer) ValueSet(context.Context, *CurrencyPairRateSourceValueSetRequest) (*currency.Currency_Pair_Rate_Source_Option_Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueSet not implemented")
}
func (UnimplementedCurrencyPairRateSourceServer) ValueList(*CurrencyPairRateSourceValueListRequest, CurrencyPairRateSource_ValueListServer) error {
	return status.Errorf(codes.Unimplemented, "method ValueList not implemented")
}
func (UnimplementedCurrencyPairRateSourceServer) ValueListByFilter(*CurrencyPairRateSourceValueListByFilterRequest, CurrencyPairRateSource_ValueListByFilterServer) error {
	return status.Errorf(codes.Unimplemented, "method ValueListByFilter not implemented")
}
func (UnimplementedCurrencyPairRateSourceServer) mustEmbedUnimplementedCurrencyPairRateSourceServer() {
}

// UnsafeCurrencyPairRateSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyPairRateSourceServer will
// result in compilation errors.
type UnsafeCurrencyPairRateSourceServer interface {
	mustEmbedUnimplementedCurrencyPairRateSourceServer()
}

func RegisterCurrencyPairRateSourceServer(s grpc.ServiceRegistrar, srv CurrencyPairRateSourceServer) {
	s.RegisterService(&CurrencyPairRateSource_ServiceDesc, srv)
}

func _CurrencyPairRateSource_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyPairRateSourceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.bot.currency.v1.CurrencyPairRateSource/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyPairRateSourceServer).Get(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyPairRateSource_HeaderGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyPairRateSourceServer).HeaderGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.bot.currency.v1.CurrencyPairRateSource/HeaderGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyPairRateSourceServer).HeaderGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyPairRateSource_ValueGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(currency.Currency_Pair_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyPairRateSourceServer).ValueGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.bot.currency.v1.CurrencyPairRateSource/ValueGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyPairRateSourceServer).ValueGet(ctx, req.(*currency.Currency_Pair_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyPairRateSource_ValueSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyPairRateSourceValueSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyPairRateSourceServer).ValueSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.bot.currency.v1.CurrencyPairRateSource/ValueSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyPairRateSourceServer).ValueSet(ctx, req.(*CurrencyPairRateSourceValueSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyPairRateSource_ValueList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyPairRateSourceValueListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyPairRateSourceServer).ValueList(m, &currencyPairRateSourceValueListServer{stream})
}

type CurrencyPairRateSource_ValueListServer interface {
	Send(*currency.Currency_Pair_Rate_Source_Option_Value) error
	grpc.ServerStream
}

type currencyPairRateSourceValueListServer struct {
	grpc.ServerStream
}

func (x *currencyPairRateSourceValueListServer) Send(m *currency.Currency_Pair_Rate_Source_Option_Value) error {
	return x.ServerStream.SendMsg(m)
}

func _CurrencyPairRateSource_ValueListByFilter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyPairRateSourceValueListByFilterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyPairRateSourceServer).ValueListByFilter(m, &currencyPairRateSourceValueListByFilterServer{stream})
}

type CurrencyPairRateSource_ValueListByFilterServer interface {
	Send(*currency.Currency_Pair_Rate_Source_Option_Value) error
	grpc.ServerStream
}

type currencyPairRateSourceValueListByFilterServer struct {
	grpc.ServerStream
}

func (x *currencyPairRateSourceValueListByFilterServer) Send(m *currency.Currency_Pair_Rate_Source_Option_Value) error {
	return x.ServerStream.SendMsg(m)
}

// CurrencyPairRateSource_ServiceDesc is the grpc.ServiceDesc for CurrencyPairRateSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyPairRateSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconom.bot.currency.v1.CurrencyPairRateSource",
	HandlerType: (*CurrencyPairRateSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CurrencyPairRateSource_Get_Handler,
		},
		{
			MethodName: "HeaderGet",
			Handler:    _CurrencyPairRateSource_HeaderGet_Handler,
		},
		{
			MethodName: "ValueGet",
			Handler:    _CurrencyPairRateSource_ValueGet_Handler,
		},
		{
			MethodName: "ValueSet",
			Handler:    _CurrencyPairRateSource_ValueSet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ValueList",
			Handler:       _CurrencyPairRateSource_ValueList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ValueListByFilter",
			Handler:       _CurrencyPairRateSource_ValueListByFilter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biconom/bot/currency/v1/currency_pair_rate_source.proto",
}
