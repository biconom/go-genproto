// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: biconom/client/confirmation/v1/confirmation.proto

package service_client_confirmation_pb

import (
	context "context"
	confirmation "github.com/biconom/go-genproto/biconom/type/confirmation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfirmationClient is the client API for Confirmation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfirmationClient interface {
	Get(ctx context.Context, in *confirmation.Confirmation_ID, opts ...grpc.CallOption) (*confirmation.Confirmation, error)
	List(ctx context.Context, in *ConfirmationListRequest, opts ...grpc.CallOption) (Confirmation_ListClient, error)
	LogGet(ctx context.Context, in *confirmation.Confirmation_Log_ID, opts ...grpc.CallOption) (*confirmation.Confirmation_Log, error)
	LogListByConfirmation(ctx context.Context, in *ConfirmationLogListByConfirmationRequest, opts ...grpc.CallOption) (Confirmation_LogListByConfirmationClient, error)
	GenerateOneTimePassword(ctx context.Context, in *ConfirmationGenerateOneTimePasswordRequest, opts ...grpc.CallOption) (*confirmation.Confirmation_Field_Notification, error)
	Confirm(ctx context.Context, in *ConfirmationConfirmRequest, opts ...grpc.CallOption) (*ConfirmationConfirmResponse, error)
	Cancel(ctx context.Context, in *confirmation.Confirmation_ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type confirmationClient struct {
	cc grpc.ClientConnInterface
}

func NewConfirmationClient(cc grpc.ClientConnInterface) ConfirmationClient {
	return &confirmationClient{cc}
}

func (c *confirmationClient) Get(ctx context.Context, in *confirmation.Confirmation_ID, opts ...grpc.CallOption) (*confirmation.Confirmation, error) {
	out := new(confirmation.Confirmation)
	err := c.cc.Invoke(ctx, "/biconom.client.confirmation.v1.Confirmation/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmationClient) List(ctx context.Context, in *ConfirmationListRequest, opts ...grpc.CallOption) (Confirmation_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Confirmation_ServiceDesc.Streams[0], "/biconom.client.confirmation.v1.Confirmation/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &confirmationListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Confirmation_ListClient interface {
	Recv() (*confirmation.Confirmation, error)
	grpc.ClientStream
}

type confirmationListClient struct {
	grpc.ClientStream
}

func (x *confirmationListClient) Recv() (*confirmation.Confirmation, error) {
	m := new(confirmation.Confirmation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *confirmationClient) LogGet(ctx context.Context, in *confirmation.Confirmation_Log_ID, opts ...grpc.CallOption) (*confirmation.Confirmation_Log, error) {
	out := new(confirmation.Confirmation_Log)
	err := c.cc.Invoke(ctx, "/biconom.client.confirmation.v1.Confirmation/LogGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmationClient) LogListByConfirmation(ctx context.Context, in *ConfirmationLogListByConfirmationRequest, opts ...grpc.CallOption) (Confirmation_LogListByConfirmationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Confirmation_ServiceDesc.Streams[1], "/biconom.client.confirmation.v1.Confirmation/LogListByConfirmation", opts...)
	if err != nil {
		return nil, err
	}
	x := &confirmationLogListByConfirmationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Confirmation_LogListByConfirmationClient interface {
	Recv() (*confirmation.Confirmation_Log, error)
	grpc.ClientStream
}

type confirmationLogListByConfirmationClient struct {
	grpc.ClientStream
}

func (x *confirmationLogListByConfirmationClient) Recv() (*confirmation.Confirmation_Log, error) {
	m := new(confirmation.Confirmation_Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *confirmationClient) GenerateOneTimePassword(ctx context.Context, in *ConfirmationGenerateOneTimePasswordRequest, opts ...grpc.CallOption) (*confirmation.Confirmation_Field_Notification, error) {
	out := new(confirmation.Confirmation_Field_Notification)
	err := c.cc.Invoke(ctx, "/biconom.client.confirmation.v1.Confirmation/GenerateOneTimePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmationClient) Confirm(ctx context.Context, in *ConfirmationConfirmRequest, opts ...grpc.CallOption) (*ConfirmationConfirmResponse, error) {
	out := new(ConfirmationConfirmResponse)
	err := c.cc.Invoke(ctx, "/biconom.client.confirmation.v1.Confirmation/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmationClient) Cancel(ctx context.Context, in *confirmation.Confirmation_ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/biconom.client.confirmation.v1.Confirmation/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfirmationServer is the server API for Confirmation service.
// All implementations must embed UnimplementedConfirmationServer
// for forward compatibility
type ConfirmationServer interface {
	Get(context.Context, *confirmation.Confirmation_ID) (*confirmation.Confirmation, error)
	List(*ConfirmationListRequest, Confirmation_ListServer) error
	LogGet(context.Context, *confirmation.Confirmation_Log_ID) (*confirmation.Confirmation_Log, error)
	LogListByConfirmation(*ConfirmationLogListByConfirmationRequest, Confirmation_LogListByConfirmationServer) error
	GenerateOneTimePassword(context.Context, *ConfirmationGenerateOneTimePasswordRequest) (*confirmation.Confirmation_Field_Notification, error)
	Confirm(context.Context, *ConfirmationConfirmRequest) (*ConfirmationConfirmResponse, error)
	Cancel(context.Context, *confirmation.Confirmation_ID) (*emptypb.Empty, error)
	mustEmbedUnimplementedConfirmationServer()
}

// UnimplementedConfirmationServer must be embedded to have forward compatible implementations.
type UnimplementedConfirmationServer struct {
}

func (UnimplementedConfirmationServer) Get(context.Context, *confirmation.Confirmation_ID) (*confirmation.Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConfirmationServer) List(*ConfirmationListRequest, Confirmation_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConfirmationServer) LogGet(context.Context, *confirmation.Confirmation_Log_ID) (*confirmation.Confirmation_Log, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogGet not implemented")
}
func (UnimplementedConfirmationServer) LogListByConfirmation(*ConfirmationLogListByConfirmationRequest, Confirmation_LogListByConfirmationServer) error {
	return status.Errorf(codes.Unimplemented, "method LogListByConfirmation not implemented")
}
func (UnimplementedConfirmationServer) GenerateOneTimePassword(context.Context, *ConfirmationGenerateOneTimePasswordRequest) (*confirmation.Confirmation_Field_Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOneTimePassword not implemented")
}
func (UnimplementedConfirmationServer) Confirm(context.Context, *ConfirmationConfirmRequest) (*ConfirmationConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (UnimplementedConfirmationServer) Cancel(context.Context, *confirmation.Confirmation_ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedConfirmationServer) mustEmbedUnimplementedConfirmationServer() {}

// UnsafeConfirmationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfirmationServer will
// result in compilation errors.
type UnsafeConfirmationServer interface {
	mustEmbedUnimplementedConfirmationServer()
}

func RegisterConfirmationServer(s grpc.ServiceRegistrar, srv ConfirmationServer) {
	s.RegisterService(&Confirmation_ServiceDesc, srv)
}

func _Confirmation_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(confirmation.Confirmation_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.confirmation.v1.Confirmation/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationServer).Get(ctx, req.(*confirmation.Confirmation_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Confirmation_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfirmationListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfirmationServer).List(m, &confirmationListServer{stream})
}

type Confirmation_ListServer interface {
	Send(*confirmation.Confirmation) error
	grpc.ServerStream
}

type confirmationListServer struct {
	grpc.ServerStream
}

func (x *confirmationListServer) Send(m *confirmation.Confirmation) error {
	return x.ServerStream.SendMsg(m)
}

func _Confirmation_LogGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(confirmation.Confirmation_Log_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationServer).LogGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.confirmation.v1.Confirmation/LogGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationServer).LogGet(ctx, req.(*confirmation.Confirmation_Log_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Confirmation_LogListByConfirmation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfirmationLogListByConfirmationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfirmationServer).LogListByConfirmation(m, &confirmationLogListByConfirmationServer{stream})
}

type Confirmation_LogListByConfirmationServer interface {
	Send(*confirmation.Confirmation_Log) error
	grpc.ServerStream
}

type confirmationLogListByConfirmationServer struct {
	grpc.ServerStream
}

func (x *confirmationLogListByConfirmationServer) Send(m *confirmation.Confirmation_Log) error {
	return x.ServerStream.SendMsg(m)
}

func _Confirmation_GenerateOneTimePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmationGenerateOneTimePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationServer).GenerateOneTimePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.confirmation.v1.Confirmation/GenerateOneTimePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationServer).GenerateOneTimePassword(ctx, req.(*ConfirmationGenerateOneTimePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Confirmation_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmationConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.confirmation.v1.Confirmation/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationServer).Confirm(ctx, req.(*ConfirmationConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Confirmation_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(confirmation.Confirmation_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.confirmation.v1.Confirmation/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationServer).Cancel(ctx, req.(*confirmation.Confirmation_ID))
	}
	return interceptor(ctx, in, info, handler)
}

// Confirmation_ServiceDesc is the grpc.ServiceDesc for Confirmation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Confirmation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconom.client.confirmation.v1.Confirmation",
	HandlerType: (*ConfirmationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Confirmation_Get_Handler,
		},
		{
			MethodName: "LogGet",
			Handler:    _Confirmation_LogGet_Handler,
		},
		{
			MethodName: "GenerateOneTimePassword",
			Handler:    _Confirmation_GenerateOneTimePassword_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _Confirmation_Confirm_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Confirmation_Cancel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Confirmation_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LogListByConfirmation",
			Handler:       _Confirmation_LogListByConfirmation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biconom/client/confirmation/v1/confirmation.proto",
}
