// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: biconom/client/currency/v1/currency.proto

package service_client_currency_pb

import (
	currency "github.com/biconom/go-genproto/biconom/type/currency"
	sort "github.com/biconom/go-genproto/biconom/type/sort"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort            `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyListRequest) Reset() {
	*x = CurrencyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyListRequest) ProtoMessage() {}

func (x *CurrencyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_proto_rawDescGZIP(), []int{0}
}

func (x *CurrencyListRequest) GetStep() *currency.Currency_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                 `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairListRequest) Reset() {
	*x = CurrencyPairListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairListRequest) ProtoMessage() {}

func (x *CurrencyPairListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_proto_rawDescGZIP(), []int{1}
}

func (x *CurrencyPairListRequest) GetStep() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                             `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceListRequest) Reset() {
	*x = CurrencyPairRateSourceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_proto_rawDescGZIP(), []int{2}
}

func (x *CurrencyPairRateSourceListRequest) GetStep() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceHeaderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                             `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceHeaderListRequest) Reset() {
	*x = CurrencyPairRateSourceHeaderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceHeaderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceHeaderListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceHeaderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceHeaderListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceHeaderListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_proto_rawDescGZIP(), []int{3}
}

func (x *CurrencyPairRateSourceHeaderListRequest) GetStep() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceHeaderListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceValueListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_Rate_Source_Value_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                                   `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceValueListRequest) Reset() {
	*x = CurrencyPairRateSourceValueListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_proto_rawDescGZIP(), []int{4}
}

func (x *CurrencyPairRateSourceValueListRequest) GetStep() *currency.Currency_Pair_Rate_Source_Value_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceValueDefaultListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                 `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) Reset() {
	*x = CurrencyPairRateSourceValueDefaultListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueDefaultListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueDefaultListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueDefaultListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueDefaultListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_proto_rawDescGZIP(), []int{5}
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) GetStep() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

var File_biconom_client_currency_v1_currency_proto protoreflect.FileDescriptor

var file_biconom_client_currency_v1_currency_proto_rawDesc = []byte{
	0x0a, 0x29, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a,
	0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x75, 0x0a, 0x17, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x21, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x22, 0x91, 0x01, 0x0a, 0x27, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x26, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x49, 0x44, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x8b, 0x01,
	0x0a, 0x2d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x32, 0xc9, 0x0b, 0x0a, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x49, 0x44, 0x1a, 0x16, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x1a, 0x1b, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x10, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x33, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x1a, 0x27,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x1f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x49, 0x44, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x47, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x49, 0x44, 0x1a, 0x2d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x1f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x25, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x1a, 0x2d, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0xa6,
	0x01, 0x0a, 0x26, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x56, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_biconom_client_currency_v1_currency_proto_rawDescOnce sync.Once
	file_biconom_client_currency_v1_currency_proto_rawDescData = file_biconom_client_currency_v1_currency_proto_rawDesc
)

func file_biconom_client_currency_v1_currency_proto_rawDescGZIP() []byte {
	file_biconom_client_currency_v1_currency_proto_rawDescOnce.Do(func() {
		file_biconom_client_currency_v1_currency_proto_rawDescData = protoimpl.X.CompressGZIP(file_biconom_client_currency_v1_currency_proto_rawDescData)
	})
	return file_biconom_client_currency_v1_currency_proto_rawDescData
}

var file_biconom_client_currency_v1_currency_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_biconom_client_currency_v1_currency_proto_goTypes = []interface{}{
	(*CurrencyListRequest)(nil),                           // 0: biconom.client.currency.v1.CurrencyListRequest
	(*CurrencyPairListRequest)(nil),                       // 1: biconom.client.currency.v1.CurrencyPairListRequest
	(*CurrencyPairRateSourceListRequest)(nil),             // 2: biconom.client.currency.v1.CurrencyPairRateSourceListRequest
	(*CurrencyPairRateSourceHeaderListRequest)(nil),       // 3: biconom.client.currency.v1.CurrencyPairRateSourceHeaderListRequest
	(*CurrencyPairRateSourceValueListRequest)(nil),        // 4: biconom.client.currency.v1.CurrencyPairRateSourceValueListRequest
	(*CurrencyPairRateSourceValueDefaultListRequest)(nil), // 5: biconom.client.currency.v1.CurrencyPairRateSourceValueDefaultListRequest
	(*currency.Currency_ID)(nil),                          // 6: biconom.type.Currency.ID
	(*sort.Sort)(nil),                                     // 7: biconom.type.Sort
	(*currency.Currency_Pair_ID)(nil),                     // 8: biconom.type.Currency.Pair.ID
	(*currency.Currency_Pair_Rate_Source_ID)(nil),         // 9: biconom.type.Currency.Pair.Rate.Source.ID
	(*currency.Currency_Pair_Rate_Source_Value_ID)(nil),   // 10: biconom.type.Currency.Pair.Rate.Source.Value.ID
	(*currency.Currency)(nil),                             // 11: biconom.type.Currency
	(*currency.Currency_Pair)(nil),                        // 12: biconom.type.Currency.Pair
	(*currency.Currency_Pair_Rate_Source)(nil),            // 13: biconom.type.Currency.Pair.Rate.Source
	(*currency.Currency_Pair_Rate_Source_Header)(nil),     // 14: biconom.type.Currency.Pair.Rate.Source.Header
	(*currency.Currency_Pair_Rate_Source_Value)(nil),      // 15: biconom.type.Currency.Pair.Rate.Source.Value
}
var file_biconom_client_currency_v1_currency_proto_depIdxs = []int32{
	6,  // 0: biconom.client.currency.v1.CurrencyListRequest.step:type_name -> biconom.type.Currency.ID
	7,  // 1: biconom.client.currency.v1.CurrencyListRequest.sort:type_name -> biconom.type.Sort
	8,  // 2: biconom.client.currency.v1.CurrencyPairListRequest.step:type_name -> biconom.type.Currency.Pair.ID
	7,  // 3: biconom.client.currency.v1.CurrencyPairListRequest.sort:type_name -> biconom.type.Sort
	9,  // 4: biconom.client.currency.v1.CurrencyPairRateSourceListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	7,  // 5: biconom.client.currency.v1.CurrencyPairRateSourceListRequest.sort:type_name -> biconom.type.Sort
	9,  // 6: biconom.client.currency.v1.CurrencyPairRateSourceHeaderListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	7,  // 7: biconom.client.currency.v1.CurrencyPairRateSourceHeaderListRequest.sort:type_name -> biconom.type.Sort
	10, // 8: biconom.client.currency.v1.CurrencyPairRateSourceValueListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.Value.ID
	7,  // 9: biconom.client.currency.v1.CurrencyPairRateSourceValueListRequest.sort:type_name -> biconom.type.Sort
	8,  // 10: biconom.client.currency.v1.CurrencyPairRateSourceValueDefaultListRequest.step:type_name -> biconom.type.Currency.Pair.ID
	7,  // 11: biconom.client.currency.v1.CurrencyPairRateSourceValueDefaultListRequest.sort:type_name -> biconom.type.Sort
	6,  // 12: biconom.client.currency.v1.Currency.CurrencyGet:input_type -> biconom.type.Currency.ID
	0,  // 13: biconom.client.currency.v1.Currency.CurrencyList:input_type -> biconom.client.currency.v1.CurrencyListRequest
	8,  // 14: biconom.client.currency.v1.Currency.CurrencyPairGet:input_type -> biconom.type.Currency.Pair.ID
	1,  // 15: biconom.client.currency.v1.Currency.CurrencyPairList:input_type -> biconom.client.currency.v1.CurrencyPairListRequest
	9,  // 16: biconom.client.currency.v1.Currency.CurrencyPairRateSourceGet:input_type -> biconom.type.Currency.Pair.Rate.Source.ID
	2,  // 17: biconom.client.currency.v1.Currency.CurrencyPairRateSourceList:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceListRequest
	9,  // 18: biconom.client.currency.v1.Currency.CurrencyPairRateSourceHeaderGet:input_type -> biconom.type.Currency.Pair.Rate.Source.ID
	3,  // 19: biconom.client.currency.v1.Currency.CurrencyPairRateSourceHeaderList:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceHeaderListRequest
	10, // 20: biconom.client.currency.v1.Currency.CurrencyPairRateSourceValueGet:input_type -> biconom.type.Currency.Pair.Rate.Source.Value.ID
	4,  // 21: biconom.client.currency.v1.Currency.CurrencyPairRateSourceValueList:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceValueListRequest
	8,  // 22: biconom.client.currency.v1.Currency.CurrencyPairRateSourceValueDefaultGet:input_type -> biconom.type.Currency.Pair.ID
	5,  // 23: biconom.client.currency.v1.Currency.CurrencyPairRateSourceValueDefaultList:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceValueDefaultListRequest
	11, // 24: biconom.client.currency.v1.Currency.CurrencyGet:output_type -> biconom.type.Currency
	11, // 25: biconom.client.currency.v1.Currency.CurrencyList:output_type -> biconom.type.Currency
	12, // 26: biconom.client.currency.v1.Currency.CurrencyPairGet:output_type -> biconom.type.Currency.Pair
	12, // 27: biconom.client.currency.v1.Currency.CurrencyPairList:output_type -> biconom.type.Currency.Pair
	13, // 28: biconom.client.currency.v1.Currency.CurrencyPairRateSourceGet:output_type -> biconom.type.Currency.Pair.Rate.Source
	13, // 29: biconom.client.currency.v1.Currency.CurrencyPairRateSourceList:output_type -> biconom.type.Currency.Pair.Rate.Source
	14, // 30: biconom.client.currency.v1.Currency.CurrencyPairRateSourceHeaderGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	14, // 31: biconom.client.currency.v1.Currency.CurrencyPairRateSourceHeaderList:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	15, // 32: biconom.client.currency.v1.Currency.CurrencyPairRateSourceValueGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Value
	15, // 33: biconom.client.currency.v1.Currency.CurrencyPairRateSourceValueList:output_type -> biconom.type.Currency.Pair.Rate.Source.Value
	15, // 34: biconom.client.currency.v1.Currency.CurrencyPairRateSourceValueDefaultGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Value
	15, // 35: biconom.client.currency.v1.Currency.CurrencyPairRateSourceValueDefaultList:output_type -> biconom.type.Currency.Pair.Rate.Source.Value
	24, // [24:36] is the sub-list for method output_type
	12, // [12:24] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_biconom_client_currency_v1_currency_proto_init() }
func file_biconom_client_currency_v1_currency_proto_init() {
	if File_biconom_client_currency_v1_currency_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biconom_client_currency_v1_currency_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceHeaderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueDefaultListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biconom_client_currency_v1_currency_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_biconom_client_currency_v1_currency_proto_goTypes,
		DependencyIndexes: file_biconom_client_currency_v1_currency_proto_depIdxs,
		MessageInfos:      file_biconom_client_currency_v1_currency_proto_msgTypes,
	}.Build()
	File_biconom_client_currency_v1_currency_proto = out.File
	file_biconom_client_currency_v1_currency_proto_rawDesc = nil
	file_biconom_client_currency_v1_currency_proto_goTypes = nil
	file_biconom_client_currency_v1_currency_proto_depIdxs = nil
}
