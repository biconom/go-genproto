// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: biconom/client/currency/v1/currency.proto

package service_client_currency_pb

import (
	context "context"
	currency "github.com/biconom/go-genproto/biconom/type/currency"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyClient is the client API for Currency service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyClient interface {
	CurrencyGet(ctx context.Context, in *currency.Currency_ID, opts ...grpc.CallOption) (*currency.Currency, error)
	CurrencyList(ctx context.Context, in *CurrencyListRequest, opts ...grpc.CallOption) (Currency_CurrencyListClient, error)
	CurrencyPairGet(ctx context.Context, in *currency.Currency_Pair_ID, opts ...grpc.CallOption) (*currency.Currency_Pair, error)
	CurrencyPairList(ctx context.Context, in *CurrencyPairListRequest, opts ...grpc.CallOption) (Currency_CurrencyPairListClient, error)
	CurrencyPairRateSourceGet(ctx context.Context, in *currency.Currency_Pair_Rate_Source_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source, error)
	CurrencyPairRateSourceList(ctx context.Context, in *CurrencyPairRateSourceListRequest, opts ...grpc.CallOption) (Currency_CurrencyPairRateSourceListClient, error)
	CurrencyPairRateSourceHeaderGet(ctx context.Context, in *currency.Currency_Pair_Rate_Source_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Header, error)
	CurrencyPairRateSourceHeaderList(ctx context.Context, in *CurrencyPairRateSourceHeaderListRequest, opts ...grpc.CallOption) (Currency_CurrencyPairRateSourceHeaderListClient, error)
	CurrencyPairRateSourceValueGet(ctx context.Context, in *currency.Currency_Pair_Rate_Source_Value_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Value, error)
	CurrencyPairRateSourceValueList(ctx context.Context, in *CurrencyPairRateSourceValueListRequest, opts ...grpc.CallOption) (Currency_CurrencyPairRateSourceValueListClient, error)
	CurrencyPairRateSourceValueDefaultGet(ctx context.Context, in *currency.Currency_Pair_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Value, error)
	CurrencyPairRateSourceValueDefaultList(ctx context.Context, in *CurrencyPairRateSourceValueDefaultListRequest, opts ...grpc.CallOption) (Currency_CurrencyPairRateSourceValueDefaultListClient, error)
}

type currencyClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyClient(cc grpc.ClientConnInterface) CurrencyClient {
	return &currencyClient{cc}
}

func (c *currencyClient) CurrencyGet(ctx context.Context, in *currency.Currency_ID, opts ...grpc.CallOption) (*currency.Currency, error) {
	out := new(currency.Currency)
	err := c.cc.Invoke(ctx, "/biconom.client.currency.v1.Currency/CurrencyGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyClient) CurrencyList(ctx context.Context, in *CurrencyListRequest, opts ...grpc.CallOption) (Currency_CurrencyListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Currency_ServiceDesc.Streams[0], "/biconom.client.currency.v1.Currency/CurrencyList", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyCurrencyListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Currency_CurrencyListClient interface {
	Recv() (*currency.Currency, error)
	grpc.ClientStream
}

type currencyCurrencyListClient struct {
	grpc.ClientStream
}

func (x *currencyCurrencyListClient) Recv() (*currency.Currency, error) {
	m := new(currency.Currency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *currencyClient) CurrencyPairGet(ctx context.Context, in *currency.Currency_Pair_ID, opts ...grpc.CallOption) (*currency.Currency_Pair, error) {
	out := new(currency.Currency_Pair)
	err := c.cc.Invoke(ctx, "/biconom.client.currency.v1.Currency/CurrencyPairGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyClient) CurrencyPairList(ctx context.Context, in *CurrencyPairListRequest, opts ...grpc.CallOption) (Currency_CurrencyPairListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Currency_ServiceDesc.Streams[1], "/biconom.client.currency.v1.Currency/CurrencyPairList", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyCurrencyPairListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Currency_CurrencyPairListClient interface {
	Recv() (*currency.Currency_Pair, error)
	grpc.ClientStream
}

type currencyCurrencyPairListClient struct {
	grpc.ClientStream
}

func (x *currencyCurrencyPairListClient) Recv() (*currency.Currency_Pair, error) {
	m := new(currency.Currency_Pair)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *currencyClient) CurrencyPairRateSourceGet(ctx context.Context, in *currency.Currency_Pair_Rate_Source_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source, error) {
	out := new(currency.Currency_Pair_Rate_Source)
	err := c.cc.Invoke(ctx, "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyClient) CurrencyPairRateSourceList(ctx context.Context, in *CurrencyPairRateSourceListRequest, opts ...grpc.CallOption) (Currency_CurrencyPairRateSourceListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Currency_ServiceDesc.Streams[2], "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceList", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyCurrencyPairRateSourceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Currency_CurrencyPairRateSourceListClient interface {
	Recv() (*currency.Currency_Pair_Rate_Source, error)
	grpc.ClientStream
}

type currencyCurrencyPairRateSourceListClient struct {
	grpc.ClientStream
}

func (x *currencyCurrencyPairRateSourceListClient) Recv() (*currency.Currency_Pair_Rate_Source, error) {
	m := new(currency.Currency_Pair_Rate_Source)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *currencyClient) CurrencyPairRateSourceHeaderGet(ctx context.Context, in *currency.Currency_Pair_Rate_Source_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Header, error) {
	out := new(currency.Currency_Pair_Rate_Source_Header)
	err := c.cc.Invoke(ctx, "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceHeaderGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyClient) CurrencyPairRateSourceHeaderList(ctx context.Context, in *CurrencyPairRateSourceHeaderListRequest, opts ...grpc.CallOption) (Currency_CurrencyPairRateSourceHeaderListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Currency_ServiceDesc.Streams[3], "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceHeaderList", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyCurrencyPairRateSourceHeaderListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Currency_CurrencyPairRateSourceHeaderListClient interface {
	Recv() (*currency.Currency_Pair_Rate_Source_Header, error)
	grpc.ClientStream
}

type currencyCurrencyPairRateSourceHeaderListClient struct {
	grpc.ClientStream
}

func (x *currencyCurrencyPairRateSourceHeaderListClient) Recv() (*currency.Currency_Pair_Rate_Source_Header, error) {
	m := new(currency.Currency_Pair_Rate_Source_Header)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *currencyClient) CurrencyPairRateSourceValueGet(ctx context.Context, in *currency.Currency_Pair_Rate_Source_Value_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Value, error) {
	out := new(currency.Currency_Pair_Rate_Source_Value)
	err := c.cc.Invoke(ctx, "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceValueGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyClient) CurrencyPairRateSourceValueList(ctx context.Context, in *CurrencyPairRateSourceValueListRequest, opts ...grpc.CallOption) (Currency_CurrencyPairRateSourceValueListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Currency_ServiceDesc.Streams[4], "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceValueList", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyCurrencyPairRateSourceValueListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Currency_CurrencyPairRateSourceValueListClient interface {
	Recv() (*currency.Currency_Pair_Rate_Source_Value, error)
	grpc.ClientStream
}

type currencyCurrencyPairRateSourceValueListClient struct {
	grpc.ClientStream
}

func (x *currencyCurrencyPairRateSourceValueListClient) Recv() (*currency.Currency_Pair_Rate_Source_Value, error) {
	m := new(currency.Currency_Pair_Rate_Source_Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *currencyClient) CurrencyPairRateSourceValueDefaultGet(ctx context.Context, in *currency.Currency_Pair_ID, opts ...grpc.CallOption) (*currency.Currency_Pair_Rate_Source_Value, error) {
	out := new(currency.Currency_Pair_Rate_Source_Value)
	err := c.cc.Invoke(ctx, "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceValueDefaultGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyClient) CurrencyPairRateSourceValueDefaultList(ctx context.Context, in *CurrencyPairRateSourceValueDefaultListRequest, opts ...grpc.CallOption) (Currency_CurrencyPairRateSourceValueDefaultListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Currency_ServiceDesc.Streams[5], "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceValueDefaultList", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyCurrencyPairRateSourceValueDefaultListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Currency_CurrencyPairRateSourceValueDefaultListClient interface {
	Recv() (*currency.Currency_Pair_Rate_Source_Value, error)
	grpc.ClientStream
}

type currencyCurrencyPairRateSourceValueDefaultListClient struct {
	grpc.ClientStream
}

func (x *currencyCurrencyPairRateSourceValueDefaultListClient) Recv() (*currency.Currency_Pair_Rate_Source_Value, error) {
	m := new(currency.Currency_Pair_Rate_Source_Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CurrencyServer is the server API for Currency service.
// All implementations must embed UnimplementedCurrencyServer
// for forward compatibility
type CurrencyServer interface {
	CurrencyGet(context.Context, *currency.Currency_ID) (*currency.Currency, error)
	CurrencyList(*CurrencyListRequest, Currency_CurrencyListServer) error
	CurrencyPairGet(context.Context, *currency.Currency_Pair_ID) (*currency.Currency_Pair, error)
	CurrencyPairList(*CurrencyPairListRequest, Currency_CurrencyPairListServer) error
	CurrencyPairRateSourceGet(context.Context, *currency.Currency_Pair_Rate_Source_ID) (*currency.Currency_Pair_Rate_Source, error)
	CurrencyPairRateSourceList(*CurrencyPairRateSourceListRequest, Currency_CurrencyPairRateSourceListServer) error
	CurrencyPairRateSourceHeaderGet(context.Context, *currency.Currency_Pair_Rate_Source_ID) (*currency.Currency_Pair_Rate_Source_Header, error)
	CurrencyPairRateSourceHeaderList(*CurrencyPairRateSourceHeaderListRequest, Currency_CurrencyPairRateSourceHeaderListServer) error
	CurrencyPairRateSourceValueGet(context.Context, *currency.Currency_Pair_Rate_Source_Value_ID) (*currency.Currency_Pair_Rate_Source_Value, error)
	CurrencyPairRateSourceValueList(*CurrencyPairRateSourceValueListRequest, Currency_CurrencyPairRateSourceValueListServer) error
	CurrencyPairRateSourceValueDefaultGet(context.Context, *currency.Currency_Pair_ID) (*currency.Currency_Pair_Rate_Source_Value, error)
	CurrencyPairRateSourceValueDefaultList(*CurrencyPairRateSourceValueDefaultListRequest, Currency_CurrencyPairRateSourceValueDefaultListServer) error
	mustEmbedUnimplementedCurrencyServer()
}

// UnimplementedCurrencyServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyServer struct {
}

func (UnimplementedCurrencyServer) CurrencyGet(context.Context, *currency.Currency_ID) (*currency.Currency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrencyGet not implemented")
}
func (UnimplementedCurrencyServer) CurrencyList(*CurrencyListRequest, Currency_CurrencyListServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrencyList not implemented")
}
func (UnimplementedCurrencyServer) CurrencyPairGet(context.Context, *currency.Currency_Pair_ID) (*currency.Currency_Pair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrencyPairGet not implemented")
}
func (UnimplementedCurrencyServer) CurrencyPairList(*CurrencyPairListRequest, Currency_CurrencyPairListServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrencyPairList not implemented")
}
func (UnimplementedCurrencyServer) CurrencyPairRateSourceGet(context.Context, *currency.Currency_Pair_Rate_Source_ID) (*currency.Currency_Pair_Rate_Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrencyPairRateSourceGet not implemented")
}
func (UnimplementedCurrencyServer) CurrencyPairRateSourceList(*CurrencyPairRateSourceListRequest, Currency_CurrencyPairRateSourceListServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrencyPairRateSourceList not implemented")
}
func (UnimplementedCurrencyServer) CurrencyPairRateSourceHeaderGet(context.Context, *currency.Currency_Pair_Rate_Source_ID) (*currency.Currency_Pair_Rate_Source_Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrencyPairRateSourceHeaderGet not implemented")
}
func (UnimplementedCurrencyServer) CurrencyPairRateSourceHeaderList(*CurrencyPairRateSourceHeaderListRequest, Currency_CurrencyPairRateSourceHeaderListServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrencyPairRateSourceHeaderList not implemented")
}
func (UnimplementedCurrencyServer) CurrencyPairRateSourceValueGet(context.Context, *currency.Currency_Pair_Rate_Source_Value_ID) (*currency.Currency_Pair_Rate_Source_Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrencyPairRateSourceValueGet not implemented")
}
func (UnimplementedCurrencyServer) CurrencyPairRateSourceValueList(*CurrencyPairRateSourceValueListRequest, Currency_CurrencyPairRateSourceValueListServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrencyPairRateSourceValueList not implemented")
}
func (UnimplementedCurrencyServer) CurrencyPairRateSourceValueDefaultGet(context.Context, *currency.Currency_Pair_ID) (*currency.Currency_Pair_Rate_Source_Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrencyPairRateSourceValueDefaultGet not implemented")
}
func (UnimplementedCurrencyServer) CurrencyPairRateSourceValueDefaultList(*CurrencyPairRateSourceValueDefaultListRequest, Currency_CurrencyPairRateSourceValueDefaultListServer) error {
	return status.Errorf(codes.Unimplemented, "method CurrencyPairRateSourceValueDefaultList not implemented")
}
func (UnimplementedCurrencyServer) mustEmbedUnimplementedCurrencyServer() {}

// UnsafeCurrencyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyServer will
// result in compilation errors.
type UnsafeCurrencyServer interface {
	mustEmbedUnimplementedCurrencyServer()
}

func RegisterCurrencyServer(s grpc.ServiceRegistrar, srv CurrencyServer) {
	s.RegisterService(&Currency_ServiceDesc, srv)
}

func _Currency_CurrencyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(currency.Currency_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServer).CurrencyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.currency.v1.Currency/CurrencyGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServer).CurrencyGet(ctx, req.(*currency.Currency_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currency_CurrencyList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyServer).CurrencyList(m, &currencyCurrencyListServer{stream})
}

type Currency_CurrencyListServer interface {
	Send(*currency.Currency) error
	grpc.ServerStream
}

type currencyCurrencyListServer struct {
	grpc.ServerStream
}

func (x *currencyCurrencyListServer) Send(m *currency.Currency) error {
	return x.ServerStream.SendMsg(m)
}

func _Currency_CurrencyPairGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(currency.Currency_Pair_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServer).CurrencyPairGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.currency.v1.Currency/CurrencyPairGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServer).CurrencyPairGet(ctx, req.(*currency.Currency_Pair_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currency_CurrencyPairList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyPairListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyServer).CurrencyPairList(m, &currencyCurrencyPairListServer{stream})
}

type Currency_CurrencyPairListServer interface {
	Send(*currency.Currency_Pair) error
	grpc.ServerStream
}

type currencyCurrencyPairListServer struct {
	grpc.ServerStream
}

func (x *currencyCurrencyPairListServer) Send(m *currency.Currency_Pair) error {
	return x.ServerStream.SendMsg(m)
}

func _Currency_CurrencyPairRateSourceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(currency.Currency_Pair_Rate_Source_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServer).CurrencyPairRateSourceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServer).CurrencyPairRateSourceGet(ctx, req.(*currency.Currency_Pair_Rate_Source_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currency_CurrencyPairRateSourceList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyPairRateSourceListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyServer).CurrencyPairRateSourceList(m, &currencyCurrencyPairRateSourceListServer{stream})
}

type Currency_CurrencyPairRateSourceListServer interface {
	Send(*currency.Currency_Pair_Rate_Source) error
	grpc.ServerStream
}

type currencyCurrencyPairRateSourceListServer struct {
	grpc.ServerStream
}

func (x *currencyCurrencyPairRateSourceListServer) Send(m *currency.Currency_Pair_Rate_Source) error {
	return x.ServerStream.SendMsg(m)
}

func _Currency_CurrencyPairRateSourceHeaderGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(currency.Currency_Pair_Rate_Source_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServer).CurrencyPairRateSourceHeaderGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceHeaderGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServer).CurrencyPairRateSourceHeaderGet(ctx, req.(*currency.Currency_Pair_Rate_Source_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currency_CurrencyPairRateSourceHeaderList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyPairRateSourceHeaderListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyServer).CurrencyPairRateSourceHeaderList(m, &currencyCurrencyPairRateSourceHeaderListServer{stream})
}

type Currency_CurrencyPairRateSourceHeaderListServer interface {
	Send(*currency.Currency_Pair_Rate_Source_Header) error
	grpc.ServerStream
}

type currencyCurrencyPairRateSourceHeaderListServer struct {
	grpc.ServerStream
}

func (x *currencyCurrencyPairRateSourceHeaderListServer) Send(m *currency.Currency_Pair_Rate_Source_Header) error {
	return x.ServerStream.SendMsg(m)
}

func _Currency_CurrencyPairRateSourceValueGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(currency.Currency_Pair_Rate_Source_Value_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServer).CurrencyPairRateSourceValueGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceValueGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServer).CurrencyPairRateSourceValueGet(ctx, req.(*currency.Currency_Pair_Rate_Source_Value_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currency_CurrencyPairRateSourceValueList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyPairRateSourceValueListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyServer).CurrencyPairRateSourceValueList(m, &currencyCurrencyPairRateSourceValueListServer{stream})
}

type Currency_CurrencyPairRateSourceValueListServer interface {
	Send(*currency.Currency_Pair_Rate_Source_Value) error
	grpc.ServerStream
}

type currencyCurrencyPairRateSourceValueListServer struct {
	grpc.ServerStream
}

func (x *currencyCurrencyPairRateSourceValueListServer) Send(m *currency.Currency_Pair_Rate_Source_Value) error {
	return x.ServerStream.SendMsg(m)
}

func _Currency_CurrencyPairRateSourceValueDefaultGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(currency.Currency_Pair_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServer).CurrencyPairRateSourceValueDefaultGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.currency.v1.Currency/CurrencyPairRateSourceValueDefaultGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServer).CurrencyPairRateSourceValueDefaultGet(ctx, req.(*currency.Currency_Pair_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Currency_CurrencyPairRateSourceValueDefaultList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyPairRateSourceValueDefaultListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyServer).CurrencyPairRateSourceValueDefaultList(m, &currencyCurrencyPairRateSourceValueDefaultListServer{stream})
}

type Currency_CurrencyPairRateSourceValueDefaultListServer interface {
	Send(*currency.Currency_Pair_Rate_Source_Value) error
	grpc.ServerStream
}

type currencyCurrencyPairRateSourceValueDefaultListServer struct {
	grpc.ServerStream
}

func (x *currencyCurrencyPairRateSourceValueDefaultListServer) Send(m *currency.Currency_Pair_Rate_Source_Value) error {
	return x.ServerStream.SendMsg(m)
}

// Currency_ServiceDesc is the grpc.ServiceDesc for Currency service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Currency_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconom.client.currency.v1.Currency",
	HandlerType: (*CurrencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrencyGet",
			Handler:    _Currency_CurrencyGet_Handler,
		},
		{
			MethodName: "CurrencyPairGet",
			Handler:    _Currency_CurrencyPairGet_Handler,
		},
		{
			MethodName: "CurrencyPairRateSourceGet",
			Handler:    _Currency_CurrencyPairRateSourceGet_Handler,
		},
		{
			MethodName: "CurrencyPairRateSourceHeaderGet",
			Handler:    _Currency_CurrencyPairRateSourceHeaderGet_Handler,
		},
		{
			MethodName: "CurrencyPairRateSourceValueGet",
			Handler:    _Currency_CurrencyPairRateSourceValueGet_Handler,
		},
		{
			MethodName: "CurrencyPairRateSourceValueDefaultGet",
			Handler:    _Currency_CurrencyPairRateSourceValueDefaultGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CurrencyList",
			Handler:       _Currency_CurrencyList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CurrencyPairList",
			Handler:       _Currency_CurrencyPairList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CurrencyPairRateSourceList",
			Handler:       _Currency_CurrencyPairRateSourceList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CurrencyPairRateSourceHeaderList",
			Handler:       _Currency_CurrencyPairRateSourceHeaderList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CurrencyPairRateSourceValueList",
			Handler:       _Currency_CurrencyPairRateSourceValueList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CurrencyPairRateSourceValueDefaultList",
			Handler:       _Currency_CurrencyPairRateSourceValueDefaultList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biconom/client/currency/v1/currency.proto",
}
