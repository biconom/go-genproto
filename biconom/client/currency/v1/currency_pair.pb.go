// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: biconom/client/currency/v1/currency_pair.proto

package service_client_currency_pb

import (
	currency "github.com/biconom/go-genproto/biconom/type/currency"
	sort "github.com/biconom/go-genproto/biconom/type/sort"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyPairListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                 `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairListRequest) Reset() {
	*x = CurrencyPairListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairListRequest) ProtoMessage() {}

func (x *CurrencyPairListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_proto_rawDescGZIP(), []int{0}
}

func (x *CurrencyPairListRequest) GetStep() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairListBySourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCurrency *currency.Currency_ID `protobuf:"bytes,1,opt,name=source_currency,json=sourceCurrency,proto3" json:"source_currency,omitempty"`
	Step           *currency.Currency_ID `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	Sort           *sort.Sort            `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairListBySourceRequest) Reset() {
	*x = CurrencyPairListBySourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairListBySourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairListBySourceRequest) ProtoMessage() {}

func (x *CurrencyPairListBySourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairListBySourceRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairListBySourceRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_proto_rawDescGZIP(), []int{1}
}

func (x *CurrencyPairListBySourceRequest) GetSourceCurrency() *currency.Currency_ID {
	if x != nil {
		return x.SourceCurrency
	}
	return nil
}

func (x *CurrencyPairListBySourceRequest) GetStep() *currency.Currency_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairListBySourceRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairListByTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetCurrency *currency.Currency_ID `protobuf:"bytes,1,opt,name=target_currency,json=targetCurrency,proto3" json:"target_currency,omitempty"`
	Step           *currency.Currency_ID `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	Sort           *sort.Sort            `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairListByTargetRequest) Reset() {
	*x = CurrencyPairListByTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairListByTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairListByTargetRequest) ProtoMessage() {}

func (x *CurrencyPairListByTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairListByTargetRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairListByTargetRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_proto_rawDescGZIP(), []int{2}
}

func (x *CurrencyPairListByTargetRequest) GetTargetCurrency() *currency.Currency_ID {
	if x != nil {
		return x.TargetCurrency
	}
	return nil
}

func (x *CurrencyPairListByTargetRequest) GetStep() *currency.Currency_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairListByTargetRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairListByCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency *currency.Currency_ID `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Sort     *sort.Sort            `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairListByCurrencyRequest) Reset() {
	*x = CurrencyPairListByCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairListByCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairListByCurrencyRequest) ProtoMessage() {}

func (x *CurrencyPairListByCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairListByCurrencyRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairListByCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_proto_rawDescGZIP(), []int{3}
}

func (x *CurrencyPairListByCurrencyRequest) GetCurrency() *currency.Currency_ID {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *CurrencyPairListByCurrencyRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

var File_biconom_client_currency_v1_currency_pair_proto protoreflect.FileDescriptor

var file_biconom_client_currency_v1_currency_pair_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x75, 0x0a, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61,
	0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x1f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x49,
	0x44, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x1f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x49, 0x44,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2d, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12,
	0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x21, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x32, 0x80, 0x04, 0x0a,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x44, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x2e, 0x49, 0x44, 0x1a, 0x1b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x6c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x3b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x6c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x3b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x70, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x22, 0x00, 0x30, 0x01, 0x42,
	0x56, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_biconom_client_currency_v1_currency_pair_proto_rawDescOnce sync.Once
	file_biconom_client_currency_v1_currency_pair_proto_rawDescData = file_biconom_client_currency_v1_currency_pair_proto_rawDesc
)

func file_biconom_client_currency_v1_currency_pair_proto_rawDescGZIP() []byte {
	file_biconom_client_currency_v1_currency_pair_proto_rawDescOnce.Do(func() {
		file_biconom_client_currency_v1_currency_pair_proto_rawDescData = protoimpl.X.CompressGZIP(file_biconom_client_currency_v1_currency_pair_proto_rawDescData)
	})
	return file_biconom_client_currency_v1_currency_pair_proto_rawDescData
}

var file_biconom_client_currency_v1_currency_pair_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_biconom_client_currency_v1_currency_pair_proto_goTypes = []interface{}{
	(*CurrencyPairListRequest)(nil),           // 0: biconom.client.currency.v1.CurrencyPairListRequest
	(*CurrencyPairListBySourceRequest)(nil),   // 1: biconom.client.currency.v1.CurrencyPairListBySourceRequest
	(*CurrencyPairListByTargetRequest)(nil),   // 2: biconom.client.currency.v1.CurrencyPairListByTargetRequest
	(*CurrencyPairListByCurrencyRequest)(nil), // 3: biconom.client.currency.v1.CurrencyPairListByCurrencyRequest
	(*currency.Currency_Pair_ID)(nil),         // 4: biconom.type.Currency.Pair.ID
	(*sort.Sort)(nil),                         // 5: biconom.type.Sort
	(*currency.Currency_ID)(nil),              // 6: biconom.type.Currency.ID
	(*currency.Currency_Pair)(nil),            // 7: biconom.type.Currency.Pair
}
var file_biconom_client_currency_v1_currency_pair_proto_depIdxs = []int32{
	4,  // 0: biconom.client.currency.v1.CurrencyPairListRequest.step:type_name -> biconom.type.Currency.Pair.ID
	5,  // 1: biconom.client.currency.v1.CurrencyPairListRequest.sort:type_name -> biconom.type.Sort
	6,  // 2: biconom.client.currency.v1.CurrencyPairListBySourceRequest.source_currency:type_name -> biconom.type.Currency.ID
	6,  // 3: biconom.client.currency.v1.CurrencyPairListBySourceRequest.step:type_name -> biconom.type.Currency.ID
	5,  // 4: biconom.client.currency.v1.CurrencyPairListBySourceRequest.sort:type_name -> biconom.type.Sort
	6,  // 5: biconom.client.currency.v1.CurrencyPairListByTargetRequest.target_currency:type_name -> biconom.type.Currency.ID
	6,  // 6: biconom.client.currency.v1.CurrencyPairListByTargetRequest.step:type_name -> biconom.type.Currency.ID
	5,  // 7: biconom.client.currency.v1.CurrencyPairListByTargetRequest.sort:type_name -> biconom.type.Sort
	6,  // 8: biconom.client.currency.v1.CurrencyPairListByCurrencyRequest.currency:type_name -> biconom.type.Currency.ID
	5,  // 9: biconom.client.currency.v1.CurrencyPairListByCurrencyRequest.sort:type_name -> biconom.type.Sort
	4,  // 10: biconom.client.currency.v1.CurrencyPair.Get:input_type -> biconom.type.Currency.Pair.ID
	0,  // 11: biconom.client.currency.v1.CurrencyPair.List:input_type -> biconom.client.currency.v1.CurrencyPairListRequest
	1,  // 12: biconom.client.currency.v1.CurrencyPair.ListBySource:input_type -> biconom.client.currency.v1.CurrencyPairListBySourceRequest
	2,  // 13: biconom.client.currency.v1.CurrencyPair.ListByTarget:input_type -> biconom.client.currency.v1.CurrencyPairListByTargetRequest
	3,  // 14: biconom.client.currency.v1.CurrencyPair.ListByCurrency:input_type -> biconom.client.currency.v1.CurrencyPairListByCurrencyRequest
	7,  // 15: biconom.client.currency.v1.CurrencyPair.Get:output_type -> biconom.type.Currency.Pair
	7,  // 16: biconom.client.currency.v1.CurrencyPair.List:output_type -> biconom.type.Currency.Pair
	7,  // 17: biconom.client.currency.v1.CurrencyPair.ListBySource:output_type -> biconom.type.Currency.Pair
	7,  // 18: biconom.client.currency.v1.CurrencyPair.ListByTarget:output_type -> biconom.type.Currency.Pair
	7,  // 19: biconom.client.currency.v1.CurrencyPair.ListByCurrency:output_type -> biconom.type.Currency.Pair
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_biconom_client_currency_v1_currency_pair_proto_init() }
func file_biconom_client_currency_v1_currency_pair_proto_init() {
	if File_biconom_client_currency_v1_currency_pair_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biconom_client_currency_v1_currency_pair_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_pair_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairListBySourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_pair_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairListByTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_pair_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairListByCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biconom_client_currency_v1_currency_pair_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_biconom_client_currency_v1_currency_pair_proto_goTypes,
		DependencyIndexes: file_biconom_client_currency_v1_currency_pair_proto_depIdxs,
		MessageInfos:      file_biconom_client_currency_v1_currency_pair_proto_msgTypes,
	}.Build()
	File_biconom_client_currency_v1_currency_pair_proto = out.File
	file_biconom_client_currency_v1_currency_pair_proto_rawDesc = nil
	file_biconom_client_currency_v1_currency_pair_proto_goTypes = nil
	file_biconom_client_currency_v1_currency_pair_proto_depIdxs = nil
}
