// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: biconom/client/currency/v1/currency_pair_rate_source.proto

package service_client_currency_pb

import (
	currency "github.com/biconom/go-genproto/biconom/type/currency"
	sort "github.com/biconom/go-genproto/biconom/type/sort"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyPairRateSourceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                             `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceListRequest) Reset() {
	*x = CurrencyPairRateSourceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{0}
}

func (x *CurrencyPairRateSourceListRequest) GetStep() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceListByPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair *currency.Currency_Pair_ID             `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Step *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                             `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceListByPairRequest) Reset() {
	*x = CurrencyPairRateSourceListByPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceListByPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceListByPairRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceListByPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceListByPairRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceListByPairRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{1}
}

func (x *CurrencyPairRateSourceListByPairRequest) GetPair() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Pair
	}
	return nil
}

func (x *CurrencyPairRateSourceListByPairRequest) GetStep() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceListByPairRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceValueSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option      *currency.Currency_Pair_Rate_Source_Option_ID `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
	SourceValue string                                        `protobuf:"bytes,2,opt,name=source_value,json=sourceValue,proto3" json:"source_value,omitempty"`
	TargetValue string                                        `protobuf:"bytes,3,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
}

func (x *CurrencyPairRateSourceValueSetRequest) Reset() {
	*x = CurrencyPairRateSourceValueSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueSetRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueSetRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueSetRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{2}
}

func (x *CurrencyPairRateSourceValueSetRequest) GetOption() *currency.Currency_Pair_Rate_Source_Option_ID {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *CurrencyPairRateSourceValueSetRequest) GetSourceValue() string {
	if x != nil {
		return x.SourceValue
	}
	return ""
}

func (x *CurrencyPairRateSourceValueSetRequest) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

type CurrencyPairRateSourceValueListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_Rate_Source_Option_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                                    `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceValueListRequest) Reset() {
	*x = CurrencyPairRateSourceValueListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{3}
}

func (x *CurrencyPairRateSourceValueListRequest) GetStep() *currency.Currency_Pair_Rate_Source_Option_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceValueListByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSources   []*currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,rep,name=rate_sources,json=rateSources,proto3" json:"rate_sources,omitempty"`
	CurrencyPairs []*currency.Currency_Pair_ID             `protobuf:"bytes,2,rep,name=currency_pairs,json=currencyPairs,proto3" json:"currency_pairs,omitempty"`
}

func (x *CurrencyPairRateSourceValueListByFilterRequest) Reset() {
	*x = CurrencyPairRateSourceValueListByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueListByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueListByFilterRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueListByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueListByFilterRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueListByFilterRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{4}
}

func (x *CurrencyPairRateSourceValueListByFilterRequest) GetRateSources() []*currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.RateSources
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListByFilterRequest) GetCurrencyPairs() []*currency.Currency_Pair_ID {
	if x != nil {
		return x.CurrencyPairs
	}
	return nil
}

type CurrencyPairRateSourceValueListBySourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSource *currency.Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=rate_source,json=rateSource,proto3" json:"rate_source,omitempty"`
	Step       *currency.Currency_Pair_ID             `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	Sort       *sort.Sort                             `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) Reset() {
	*x = CurrencyPairRateSourceValueListBySourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueListBySourceRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueListBySourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueListBySourceRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueListBySourceRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{5}
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) GetRateSource() *currency.Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.RateSource
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) GetStep() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceValueListBySourceRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type CurrencyPairRateSourceValueDefaultListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *currency.Currency_Pair_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                 `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) Reset() {
	*x = CurrencyPairRateSourceValueDefaultListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyPairRateSourceValueDefaultListRequest) ProtoMessage() {}

func (x *CurrencyPairRateSourceValueDefaultListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyPairRateSourceValueDefaultListRequest.ProtoReflect.Descriptor instead.
func (*CurrencyPairRateSourceValueDefaultListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescGZIP(), []int{6}
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) GetStep() *currency.Currency_Pair_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *CurrencyPairRateSourceValueDefaultListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

var File_biconom_client_currency_v1_currency_pair_rate_source_proto protoreflect.FileDescriptor

var file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b,
	0x01, 0x0a, 0x21, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xc5, 0x01, 0x0a,
	0x27, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x3e, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x25, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x44, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x26, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0c,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x0b,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x2e, 0x49, 0x44, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x8b,
	0x01, 0x0a, 0x2d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x32, 0x94, 0x0f, 0x0a,
	0x16, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2a,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x1a, 0x27, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x43, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50,
	0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x49, 0x44, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x43, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x47, 0x65, 0x74, 0x12,
	0x31, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x44, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x41, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x42, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x11,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x4a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x69, 0x0a,
	0x0f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x65, 0x74,
	0x12, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44,
	0x1a, 0x34, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x10, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x67, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x1a, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x14,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x56, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31,
	0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescOnce sync.Once
	file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescData = file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDesc
)

func file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescGZIP() []byte {
	file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescOnce.Do(func() {
		file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescData = protoimpl.X.CompressGZIP(file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescData)
	})
	return file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDescData
}

var file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_biconom_client_currency_v1_currency_pair_rate_source_proto_goTypes = []interface{}{
	(*CurrencyPairRateSourceListRequest)(nil),              // 0: biconom.client.currency.v1.CurrencyPairRateSourceListRequest
	(*CurrencyPairRateSourceListByPairRequest)(nil),        // 1: biconom.client.currency.v1.CurrencyPairRateSourceListByPairRequest
	(*CurrencyPairRateSourceValueSetRequest)(nil),          // 2: biconom.client.currency.v1.CurrencyPairRateSourceValueSetRequest
	(*CurrencyPairRateSourceValueListRequest)(nil),         // 3: biconom.client.currency.v1.CurrencyPairRateSourceValueListRequest
	(*CurrencyPairRateSourceValueListByFilterRequest)(nil), // 4: biconom.client.currency.v1.CurrencyPairRateSourceValueListByFilterRequest
	(*CurrencyPairRateSourceValueListBySourceRequest)(nil), // 5: biconom.client.currency.v1.CurrencyPairRateSourceValueListBySourceRequest
	(*CurrencyPairRateSourceValueDefaultListRequest)(nil),  // 6: biconom.client.currency.v1.CurrencyPairRateSourceValueDefaultListRequest
	(*currency.Currency_Pair_Rate_Source_ID)(nil),          // 7: biconom.type.Currency.Pair.Rate.Source.ID
	(*sort.Sort)(nil),                                       // 8: biconom.type.Sort
	(*currency.Currency_Pair_ID)(nil),                       // 9: biconom.type.Currency.Pair.ID
	(*currency.Currency_Pair_Rate_Source_Option_ID)(nil),    // 10: biconom.type.Currency.Pair.Rate.Source.Option.ID
	(*currency.Currency_Pair_Rate_Source)(nil),              // 11: biconom.type.Currency.Pair.Rate.Source
	(*currency.Currency_Pair_Rate_Source_Header)(nil),       // 12: biconom.type.Currency.Pair.Rate.Source.Header
	(*currency.Currency_Pair_Rate_Source_Option)(nil),       // 13: biconom.type.Currency.Pair.Rate.Source.Option
	(*currency.Currency_Pair_Rate_Source_Option_Value)(nil), // 14: biconom.type.Currency.Pair.Rate.Source.Option.Value
}
var file_biconom_client_currency_v1_currency_pair_rate_source_proto_depIdxs = []int32{
	7,  // 0: biconom.client.currency.v1.CurrencyPairRateSourceListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	8,  // 1: biconom.client.currency.v1.CurrencyPairRateSourceListRequest.sort:type_name -> biconom.type.Sort
	9,  // 2: biconom.client.currency.v1.CurrencyPairRateSourceListByPairRequest.pair:type_name -> biconom.type.Currency.Pair.ID
	7,  // 3: biconom.client.currency.v1.CurrencyPairRateSourceListByPairRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	8,  // 4: biconom.client.currency.v1.CurrencyPairRateSourceListByPairRequest.sort:type_name -> biconom.type.Sort
	10, // 5: biconom.client.currency.v1.CurrencyPairRateSourceValueSetRequest.option:type_name -> biconom.type.Currency.Pair.Rate.Source.Option.ID
	10, // 6: biconom.client.currency.v1.CurrencyPairRateSourceValueListRequest.step:type_name -> biconom.type.Currency.Pair.Rate.Source.Option.ID
	8,  // 7: biconom.client.currency.v1.CurrencyPairRateSourceValueListRequest.sort:type_name -> biconom.type.Sort
	7,  // 8: biconom.client.currency.v1.CurrencyPairRateSourceValueListByFilterRequest.rate_sources:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	9,  // 9: biconom.client.currency.v1.CurrencyPairRateSourceValueListByFilterRequest.currency_pairs:type_name -> biconom.type.Currency.Pair.ID
	7,  // 10: biconom.client.currency.v1.CurrencyPairRateSourceValueListBySourceRequest.rate_source:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	9,  // 11: biconom.client.currency.v1.CurrencyPairRateSourceValueListBySourceRequest.step:type_name -> biconom.type.Currency.Pair.ID
	8,  // 12: biconom.client.currency.v1.CurrencyPairRateSourceValueListBySourceRequest.sort:type_name -> biconom.type.Sort
	9,  // 13: biconom.client.currency.v1.CurrencyPairRateSourceValueDefaultListRequest.step:type_name -> biconom.type.Currency.Pair.ID
	8,  // 14: biconom.client.currency.v1.CurrencyPairRateSourceValueDefaultListRequest.sort:type_name -> biconom.type.Sort
	7,  // 15: biconom.client.currency.v1.CurrencyPairRateSource.Get:input_type -> biconom.type.Currency.Pair.Rate.Source.ID
	0,  // 16: biconom.client.currency.v1.CurrencyPairRateSource.List:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceListRequest
	1,  // 17: biconom.client.currency.v1.CurrencyPairRateSource.ListByPair:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceListByPairRequest
	7,  // 18: biconom.client.currency.v1.CurrencyPairRateSource.HeaderGet:input_type -> biconom.type.Currency.Pair.Rate.Source.ID
	0,  // 19: biconom.client.currency.v1.CurrencyPairRateSource.HeaderList:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceListRequest
	1,  // 20: biconom.client.currency.v1.CurrencyPairRateSource.HeaderListByPair:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceListByPairRequest
	10, // 21: biconom.client.currency.v1.CurrencyPairRateSource.ValueGet:input_type -> biconom.type.Currency.Pair.Rate.Source.Option.ID
	2,  // 22: biconom.client.currency.v1.CurrencyPairRateSource.ValueSet:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceValueSetRequest
	3,  // 23: biconom.client.currency.v1.CurrencyPairRateSource.ValueList:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceValueListRequest
	4,  // 24: biconom.client.currency.v1.CurrencyPairRateSource.ValueListByFilter:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceValueListByFilterRequest
	5,  // 25: biconom.client.currency.v1.CurrencyPairRateSource.ValueListBySource:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceValueListBySourceRequest
	9,  // 26: biconom.client.currency.v1.CurrencyPairRateSource.ValueDefaultGet:input_type -> biconom.type.Currency.Pair.ID
	6,  // 27: biconom.client.currency.v1.CurrencyPairRateSource.ValueDefaultList:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceValueDefaultListRequest
	9,  // 28: biconom.client.currency.v1.CurrencyPairRateSource.ValueDefaultFullGet:input_type -> biconom.type.Currency.Pair.ID
	6,  // 29: biconom.client.currency.v1.CurrencyPairRateSource.ValueDefaultFullList:input_type -> biconom.client.currency.v1.CurrencyPairRateSourceValueDefaultListRequest
	11, // 30: biconom.client.currency.v1.CurrencyPairRateSource.Get:output_type -> biconom.type.Currency.Pair.Rate.Source
	11, // 31: biconom.client.currency.v1.CurrencyPairRateSource.List:output_type -> biconom.type.Currency.Pair.Rate.Source
	11, // 32: biconom.client.currency.v1.CurrencyPairRateSource.ListByPair:output_type -> biconom.type.Currency.Pair.Rate.Source
	12, // 33: biconom.client.currency.v1.CurrencyPairRateSource.HeaderGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	12, // 34: biconom.client.currency.v1.CurrencyPairRateSource.HeaderList:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	12, // 35: biconom.client.currency.v1.CurrencyPairRateSource.HeaderListByPair:output_type -> biconom.type.Currency.Pair.Rate.Source.Header
	13, // 36: biconom.client.currency.v1.CurrencyPairRateSource.ValueGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	13, // 37: biconom.client.currency.v1.CurrencyPairRateSource.ValueSet:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	13, // 38: biconom.client.currency.v1.CurrencyPairRateSource.ValueList:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	13, // 39: biconom.client.currency.v1.CurrencyPairRateSource.ValueListByFilter:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	14, // 40: biconom.client.currency.v1.CurrencyPairRateSource.ValueListBySource:output_type -> biconom.type.Currency.Pair.Rate.Source.Option.Value
	14, // 41: biconom.client.currency.v1.CurrencyPairRateSource.ValueDefaultGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Option.Value
	14, // 42: biconom.client.currency.v1.CurrencyPairRateSource.ValueDefaultList:output_type -> biconom.type.Currency.Pair.Rate.Source.Option.Value
	13, // 43: biconom.client.currency.v1.CurrencyPairRateSource.ValueDefaultFullGet:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	13, // 44: biconom.client.currency.v1.CurrencyPairRateSource.ValueDefaultFullList:output_type -> biconom.type.Currency.Pair.Rate.Source.Option
	30, // [30:45] is the sub-list for method output_type
	15, // [15:30] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_biconom_client_currency_v1_currency_pair_rate_source_proto_init() }
func file_biconom_client_currency_v1_currency_pair_rate_source_proto_init() {
	if File_biconom_client_currency_v1_currency_pair_rate_source_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceListByPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueListByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueListBySourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyPairRateSourceValueDefaultListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_biconom_client_currency_v1_currency_pair_rate_source_proto_goTypes,
		DependencyIndexes: file_biconom_client_currency_v1_currency_pair_rate_source_proto_depIdxs,
		MessageInfos:      file_biconom_client_currency_v1_currency_pair_rate_source_proto_msgTypes,
	}.Build()
	File_biconom_client_currency_v1_currency_pair_rate_source_proto = out.File
	file_biconom_client_currency_v1_currency_pair_rate_source_proto_rawDesc = nil
	file_biconom_client_currency_v1_currency_pair_rate_source_proto_goTypes = nil
	file_biconom_client_currency_v1_currency_pair_rate_source_proto_depIdxs = nil
}
