// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: biconom/client/rank/v1/rank_network_statistics.proto

package service_client_rank_pb

import (
	context "context"
	account "github.com/biconom/go-genproto/biconom/type/account"
	rank_statistics "github.com/biconom/go-genproto/biconom/type/rank_statistics"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RankNetworkStatisticsClient is the client API for RankNetworkStatistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankNetworkStatisticsClient interface {
	AccountCountGet(ctx context.Context, in *account.Account_RankSystem_Rank_ID, opts ...grpc.CallOption) (*rank_statistics.RankStatistics_AccountCount, error)
	AccountCountList(ctx context.Context, in *RankNetworkStatisticsAccountCountListRequest, opts ...grpc.CallOption) (RankNetworkStatistics_AccountCountListClient, error)
	AccountCountListByRankSystem(ctx context.Context, in *RankNetworkStatisticsAccountCountListByRankSystemRequest, opts ...grpc.CallOption) (RankNetworkStatistics_AccountCountListByRankSystemClient, error)
	AccountTopRankGet(ctx context.Context, in *rank_statistics.RankStatistics_AccountTop_ID, opts ...grpc.CallOption) (*rank_statistics.RankStatistics_AccountTop, error)
	AccountTopRankList(ctx context.Context, in *RankNetworkStatisticsAccountTopRankListRequest, opts ...grpc.CallOption) (RankNetworkStatistics_AccountTopRankListClient, error)
	AccountTopRankListByRankSystem(ctx context.Context, in *RankNetworkStatisticsAccountTopRankListByRankSystemRequest, opts ...grpc.CallOption) (RankNetworkStatistics_AccountTopRankListByRankSystemClient, error)
}

type rankNetworkStatisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewRankNetworkStatisticsClient(cc grpc.ClientConnInterface) RankNetworkStatisticsClient {
	return &rankNetworkStatisticsClient{cc}
}

func (c *rankNetworkStatisticsClient) AccountCountGet(ctx context.Context, in *account.Account_RankSystem_Rank_ID, opts ...grpc.CallOption) (*rank_statistics.RankStatistics_AccountCount, error) {
	out := new(rank_statistics.RankStatistics_AccountCount)
	err := c.cc.Invoke(ctx, "/biconom.client.rank.v1.RankNetworkStatistics/AccountCountGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankNetworkStatisticsClient) AccountCountList(ctx context.Context, in *RankNetworkStatisticsAccountCountListRequest, opts ...grpc.CallOption) (RankNetworkStatistics_AccountCountListClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankNetworkStatistics_ServiceDesc.Streams[0], "/biconom.client.rank.v1.RankNetworkStatistics/AccountCountList", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankNetworkStatisticsAccountCountListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankNetworkStatistics_AccountCountListClient interface {
	Recv() (*rank_statistics.RankStatistics_AccountCount, error)
	grpc.ClientStream
}

type rankNetworkStatisticsAccountCountListClient struct {
	grpc.ClientStream
}

func (x *rankNetworkStatisticsAccountCountListClient) Recv() (*rank_statistics.RankStatistics_AccountCount, error) {
	m := new(rank_statistics.RankStatistics_AccountCount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rankNetworkStatisticsClient) AccountCountListByRankSystem(ctx context.Context, in *RankNetworkStatisticsAccountCountListByRankSystemRequest, opts ...grpc.CallOption) (RankNetworkStatistics_AccountCountListByRankSystemClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankNetworkStatistics_ServiceDesc.Streams[1], "/biconom.client.rank.v1.RankNetworkStatistics/AccountCountListByRankSystem", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankNetworkStatisticsAccountCountListByRankSystemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankNetworkStatistics_AccountCountListByRankSystemClient interface {
	Recv() (*rank_statistics.RankStatistics_AccountCount, error)
	grpc.ClientStream
}

type rankNetworkStatisticsAccountCountListByRankSystemClient struct {
	grpc.ClientStream
}

func (x *rankNetworkStatisticsAccountCountListByRankSystemClient) Recv() (*rank_statistics.RankStatistics_AccountCount, error) {
	m := new(rank_statistics.RankStatistics_AccountCount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rankNetworkStatisticsClient) AccountTopRankGet(ctx context.Context, in *rank_statistics.RankStatistics_AccountTop_ID, opts ...grpc.CallOption) (*rank_statistics.RankStatistics_AccountTop, error) {
	out := new(rank_statistics.RankStatistics_AccountTop)
	err := c.cc.Invoke(ctx, "/biconom.client.rank.v1.RankNetworkStatistics/AccountTopRankGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankNetworkStatisticsClient) AccountTopRankList(ctx context.Context, in *RankNetworkStatisticsAccountTopRankListRequest, opts ...grpc.CallOption) (RankNetworkStatistics_AccountTopRankListClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankNetworkStatistics_ServiceDesc.Streams[2], "/biconom.client.rank.v1.RankNetworkStatistics/AccountTopRankList", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankNetworkStatisticsAccountTopRankListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankNetworkStatistics_AccountTopRankListClient interface {
	Recv() (*rank_statistics.RankStatistics_AccountTop, error)
	grpc.ClientStream
}

type rankNetworkStatisticsAccountTopRankListClient struct {
	grpc.ClientStream
}

func (x *rankNetworkStatisticsAccountTopRankListClient) Recv() (*rank_statistics.RankStatistics_AccountTop, error) {
	m := new(rank_statistics.RankStatistics_AccountTop)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rankNetworkStatisticsClient) AccountTopRankListByRankSystem(ctx context.Context, in *RankNetworkStatisticsAccountTopRankListByRankSystemRequest, opts ...grpc.CallOption) (RankNetworkStatistics_AccountTopRankListByRankSystemClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankNetworkStatistics_ServiceDesc.Streams[3], "/biconom.client.rank.v1.RankNetworkStatistics/AccountTopRankListByRankSystem", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankNetworkStatisticsAccountTopRankListByRankSystemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankNetworkStatistics_AccountTopRankListByRankSystemClient interface {
	Recv() (*rank_statistics.RankStatistics_AccountTop, error)
	grpc.ClientStream
}

type rankNetworkStatisticsAccountTopRankListByRankSystemClient struct {
	grpc.ClientStream
}

func (x *rankNetworkStatisticsAccountTopRankListByRankSystemClient) Recv() (*rank_statistics.RankStatistics_AccountTop, error) {
	m := new(rank_statistics.RankStatistics_AccountTop)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RankNetworkStatisticsServer is the server API for RankNetworkStatistics service.
// All implementations must embed UnimplementedRankNetworkStatisticsServer
// for forward compatibility
type RankNetworkStatisticsServer interface {
	AccountCountGet(context.Context, *account.Account_RankSystem_Rank_ID) (*rank_statistics.RankStatistics_AccountCount, error)
	AccountCountList(*RankNetworkStatisticsAccountCountListRequest, RankNetworkStatistics_AccountCountListServer) error
	AccountCountListByRankSystem(*RankNetworkStatisticsAccountCountListByRankSystemRequest, RankNetworkStatistics_AccountCountListByRankSystemServer) error
	AccountTopRankGet(context.Context, *rank_statistics.RankStatistics_AccountTop_ID) (*rank_statistics.RankStatistics_AccountTop, error)
	AccountTopRankList(*RankNetworkStatisticsAccountTopRankListRequest, RankNetworkStatistics_AccountTopRankListServer) error
	AccountTopRankListByRankSystem(*RankNetworkStatisticsAccountTopRankListByRankSystemRequest, RankNetworkStatistics_AccountTopRankListByRankSystemServer) error
	mustEmbedUnimplementedRankNetworkStatisticsServer()
}

// UnimplementedRankNetworkStatisticsServer must be embedded to have forward compatible implementations.
type UnimplementedRankNetworkStatisticsServer struct {
}

func (UnimplementedRankNetworkStatisticsServer) AccountCountGet(context.Context, *account.Account_RankSystem_Rank_ID) (*rank_statistics.RankStatistics_AccountCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCountGet not implemented")
}
func (UnimplementedRankNetworkStatisticsServer) AccountCountList(*RankNetworkStatisticsAccountCountListRequest, RankNetworkStatistics_AccountCountListServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountCountList not implemented")
}
func (UnimplementedRankNetworkStatisticsServer) AccountCountListByRankSystem(*RankNetworkStatisticsAccountCountListByRankSystemRequest, RankNetworkStatistics_AccountCountListByRankSystemServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountCountListByRankSystem not implemented")
}
func (UnimplementedRankNetworkStatisticsServer) AccountTopRankGet(context.Context, *rank_statistics.RankStatistics_AccountTop_ID) (*rank_statistics.RankStatistics_AccountTop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountTopRankGet not implemented")
}
func (UnimplementedRankNetworkStatisticsServer) AccountTopRankList(*RankNetworkStatisticsAccountTopRankListRequest, RankNetworkStatistics_AccountTopRankListServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountTopRankList not implemented")
}
func (UnimplementedRankNetworkStatisticsServer) AccountTopRankListByRankSystem(*RankNetworkStatisticsAccountTopRankListByRankSystemRequest, RankNetworkStatistics_AccountTopRankListByRankSystemServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountTopRankListByRankSystem not implemented")
}
func (UnimplementedRankNetworkStatisticsServer) mustEmbedUnimplementedRankNetworkStatisticsServer() {}

// UnsafeRankNetworkStatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankNetworkStatisticsServer will
// result in compilation errors.
type UnsafeRankNetworkStatisticsServer interface {
	mustEmbedUnimplementedRankNetworkStatisticsServer()
}

func RegisterRankNetworkStatisticsServer(s grpc.ServiceRegistrar, srv RankNetworkStatisticsServer) {
	s.RegisterService(&RankNetworkStatistics_ServiceDesc, srv)
}

func _RankNetworkStatistics_AccountCountGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account_RankSystem_Rank_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankNetworkStatisticsServer).AccountCountGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.rank.v1.RankNetworkStatistics/AccountCountGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankNetworkStatisticsServer).AccountCountGet(ctx, req.(*account.Account_RankSystem_Rank_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankNetworkStatistics_AccountCountList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankNetworkStatisticsAccountCountListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankNetworkStatisticsServer).AccountCountList(m, &rankNetworkStatisticsAccountCountListServer{stream})
}

type RankNetworkStatistics_AccountCountListServer interface {
	Send(*rank_statistics.RankStatistics_AccountCount) error
	grpc.ServerStream
}

type rankNetworkStatisticsAccountCountListServer struct {
	grpc.ServerStream
}

func (x *rankNetworkStatisticsAccountCountListServer) Send(m *rank_statistics.RankStatistics_AccountCount) error {
	return x.ServerStream.SendMsg(m)
}

func _RankNetworkStatistics_AccountCountListByRankSystem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankNetworkStatisticsAccountCountListByRankSystemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankNetworkStatisticsServer).AccountCountListByRankSystem(m, &rankNetworkStatisticsAccountCountListByRankSystemServer{stream})
}

type RankNetworkStatistics_AccountCountListByRankSystemServer interface {
	Send(*rank_statistics.RankStatistics_AccountCount) error
	grpc.ServerStream
}

type rankNetworkStatisticsAccountCountListByRankSystemServer struct {
	grpc.ServerStream
}

func (x *rankNetworkStatisticsAccountCountListByRankSystemServer) Send(m *rank_statistics.RankStatistics_AccountCount) error {
	return x.ServerStream.SendMsg(m)
}

func _RankNetworkStatistics_AccountTopRankGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rank_statistics.RankStatistics_AccountTop_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankNetworkStatisticsServer).AccountTopRankGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.rank.v1.RankNetworkStatistics/AccountTopRankGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankNetworkStatisticsServer).AccountTopRankGet(ctx, req.(*rank_statistics.RankStatistics_AccountTop_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankNetworkStatistics_AccountTopRankList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankNetworkStatisticsAccountTopRankListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankNetworkStatisticsServer).AccountTopRankList(m, &rankNetworkStatisticsAccountTopRankListServer{stream})
}

type RankNetworkStatistics_AccountTopRankListServer interface {
	Send(*rank_statistics.RankStatistics_AccountTop) error
	grpc.ServerStream
}

type rankNetworkStatisticsAccountTopRankListServer struct {
	grpc.ServerStream
}

func (x *rankNetworkStatisticsAccountTopRankListServer) Send(m *rank_statistics.RankStatistics_AccountTop) error {
	return x.ServerStream.SendMsg(m)
}

func _RankNetworkStatistics_AccountTopRankListByRankSystem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankNetworkStatisticsAccountTopRankListByRankSystemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankNetworkStatisticsServer).AccountTopRankListByRankSystem(m, &rankNetworkStatisticsAccountTopRankListByRankSystemServer{stream})
}

type RankNetworkStatistics_AccountTopRankListByRankSystemServer interface {
	Send(*rank_statistics.RankStatistics_AccountTop) error
	grpc.ServerStream
}

type rankNetworkStatisticsAccountTopRankListByRankSystemServer struct {
	grpc.ServerStream
}

func (x *rankNetworkStatisticsAccountTopRankListByRankSystemServer) Send(m *rank_statistics.RankStatistics_AccountTop) error {
	return x.ServerStream.SendMsg(m)
}

// RankNetworkStatistics_ServiceDesc is the grpc.ServiceDesc for RankNetworkStatistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankNetworkStatistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconom.client.rank.v1.RankNetworkStatistics",
	HandlerType: (*RankNetworkStatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountCountGet",
			Handler:    _RankNetworkStatistics_AccountCountGet_Handler,
		},
		{
			MethodName: "AccountTopRankGet",
			Handler:    _RankNetworkStatistics_AccountTopRankGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AccountCountList",
			Handler:       _RankNetworkStatistics_AccountCountList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AccountCountListByRankSystem",
			Handler:       _RankNetworkStatistics_AccountCountListByRankSystem_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AccountTopRankList",
			Handler:       _RankNetworkStatistics_AccountTopRankList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AccountTopRankListByRankSystem",
			Handler:       _RankNetworkStatistics_AccountTopRankListByRankSystem_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biconom/client/rank/v1/rank_network_statistics.proto",
}
