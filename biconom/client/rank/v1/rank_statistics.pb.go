// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: biconom/client/rank/v1/rank_statistics.proto

package service_client_rank_pb

import (
	rank_statistics "github.com/biconom/go-genproto/biconom/type/rank_statistics"
	rank_system "github.com/biconom/go-genproto/biconom/type/rank_system"
	sort "github.com/biconom/go-genproto/biconom/type/sort"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RankStatisticsAccountCountListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step *rank_system.RankSystem_Rank_ID `protobuf:"bytes,1,opt,name=step,proto3" json:"step,omitempty"`
	Sort *sort.Sort                      `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *RankStatisticsAccountCountListRequest) Reset() {
	*x = RankStatisticsAccountCountListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankStatisticsAccountCountListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankStatisticsAccountCountListRequest) ProtoMessage() {}

func (x *RankStatisticsAccountCountListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankStatisticsAccountCountListRequest.ProtoReflect.Descriptor instead.
func (*RankStatisticsAccountCountListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_rank_v1_rank_statistics_proto_rawDescGZIP(), []int{0}
}

func (x *RankStatisticsAccountCountListRequest) GetStep() *rank_system.RankSystem_Rank_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *RankStatisticsAccountCountListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type RankStatisticsAccountCountListByRankSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankSystem *rank_system.RankSystem_ID            `protobuf:"bytes,1,opt,name=rank_system,json=rankSystem,proto3" json:"rank_system,omitempty"`
	Step       *rank_system.RankSystem_Rank_ID_Inner `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	Sort       *sort.Sort                            `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *RankStatisticsAccountCountListByRankSystemRequest) Reset() {
	*x = RankStatisticsAccountCountListByRankSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankStatisticsAccountCountListByRankSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankStatisticsAccountCountListByRankSystemRequest) ProtoMessage() {}

func (x *RankStatisticsAccountCountListByRankSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankStatisticsAccountCountListByRankSystemRequest.ProtoReflect.Descriptor instead.
func (*RankStatisticsAccountCountListByRankSystemRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_rank_v1_rank_statistics_proto_rawDescGZIP(), []int{1}
}

func (x *RankStatisticsAccountCountListByRankSystemRequest) GetRankSystem() *rank_system.RankSystem_ID {
	if x != nil {
		return x.RankSystem
	}
	return nil
}

func (x *RankStatisticsAccountCountListByRankSystemRequest) GetStep() *rank_system.RankSystem_Rank_ID_Inner {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *RankStatisticsAccountCountListByRankSystemRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type RankStatisticsAccountTopRankListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLimit uint32                          `protobuf:"varint,1,opt,name=top_limit,json=topLimit,proto3" json:"top_limit,omitempty"`
	Step     *rank_system.RankSystem_Rank_ID `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	Sort     *sort.Sort                      `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *RankStatisticsAccountTopRankListRequest) Reset() {
	*x = RankStatisticsAccountTopRankListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankStatisticsAccountTopRankListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankStatisticsAccountTopRankListRequest) ProtoMessage() {}

func (x *RankStatisticsAccountTopRankListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankStatisticsAccountTopRankListRequest.ProtoReflect.Descriptor instead.
func (*RankStatisticsAccountTopRankListRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_rank_v1_rank_statistics_proto_rawDescGZIP(), []int{2}
}

func (x *RankStatisticsAccountTopRankListRequest) GetTopLimit() uint32 {
	if x != nil {
		return x.TopLimit
	}
	return 0
}

func (x *RankStatisticsAccountTopRankListRequest) GetStep() *rank_system.RankSystem_Rank_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *RankStatisticsAccountTopRankListRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type RankStatisticsAccountTopRankListByRankSystemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankSystem *rank_system.RankSystem_ID      `protobuf:"bytes,1,opt,name=rank_system,json=rankSystem,proto3" json:"rank_system,omitempty"`
	TopLimit   uint32                          `protobuf:"varint,2,opt,name=top_limit,json=topLimit,proto3" json:"top_limit,omitempty"`
	Step       *rank_system.RankSystem_Rank_ID `protobuf:"bytes,3,opt,name=step,proto3" json:"step,omitempty"`
	Sort       *sort.Sort                      `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *RankStatisticsAccountTopRankListByRankSystemRequest) Reset() {
	*x = RankStatisticsAccountTopRankListByRankSystemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankStatisticsAccountTopRankListByRankSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankStatisticsAccountTopRankListByRankSystemRequest) ProtoMessage() {}

func (x *RankStatisticsAccountTopRankListByRankSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankStatisticsAccountTopRankListByRankSystemRequest.ProtoReflect.Descriptor instead.
func (*RankStatisticsAccountTopRankListByRankSystemRequest) Descriptor() ([]byte, []int) {
	return file_biconom_client_rank_v1_rank_statistics_proto_rawDescGZIP(), []int{3}
}

func (x *RankStatisticsAccountTopRankListByRankSystemRequest) GetRankSystem() *rank_system.RankSystem_ID {
	if x != nil {
		return x.RankSystem
	}
	return nil
}

func (x *RankStatisticsAccountTopRankListByRankSystemRequest) GetTopLimit() uint32 {
	if x != nil {
		return x.TopLimit
	}
	return 0
}

func (x *RankStatisticsAccountTopRankListByRankSystemRequest) GetStep() *rank_system.RankSystem_Rank_ID {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *RankStatisticsAccountTopRankListByRankSystemRequest) GetSort() *sort.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

var File_biconom_client_rank_v1_rank_statistics_proto protoreflect.FileDescriptor

var file_biconom_client_rank_v1_rank_statistics_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x25, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x31,
	0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x3a, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x49, 0x44, 0x2e,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x27, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70,
	0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x33, 0x52,
	0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x49, 0x44, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x32, 0x9e, 0x06, 0x0a, 0x0e,
	0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x60,
	0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65,
	0x74, 0x12, 0x20, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x2e, 0x49, 0x44, 0x1a, 0x29, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00,
	0x12, 0x80, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x1c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6a,
	0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b,
	0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x2e, 0x49, 0x44, 0x1a,
	0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x12, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3f, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x9a, 0x01, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x52, 0x61,
	0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x4b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x22, 0x00, 0x30, 0x01, 0x42, 0x4e, 0x5a, 0x4c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x61,
	0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_biconom_client_rank_v1_rank_statistics_proto_rawDescOnce sync.Once
	file_biconom_client_rank_v1_rank_statistics_proto_rawDescData = file_biconom_client_rank_v1_rank_statistics_proto_rawDesc
)

func file_biconom_client_rank_v1_rank_statistics_proto_rawDescGZIP() []byte {
	file_biconom_client_rank_v1_rank_statistics_proto_rawDescOnce.Do(func() {
		file_biconom_client_rank_v1_rank_statistics_proto_rawDescData = protoimpl.X.CompressGZIP(file_biconom_client_rank_v1_rank_statistics_proto_rawDescData)
	})
	return file_biconom_client_rank_v1_rank_statistics_proto_rawDescData
}

var file_biconom_client_rank_v1_rank_statistics_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_biconom_client_rank_v1_rank_statistics_proto_goTypes = []interface{}{
	(*RankStatisticsAccountCountListRequest)(nil),               // 0: biconom.client.rank.v1.RankStatisticsAccountCountListRequest
	(*RankStatisticsAccountCountListByRankSystemRequest)(nil),   // 1: biconom.client.rank.v1.RankStatisticsAccountCountListByRankSystemRequest
	(*RankStatisticsAccountTopRankListRequest)(nil),             // 2: biconom.client.rank.v1.RankStatisticsAccountTopRankListRequest
	(*RankStatisticsAccountTopRankListByRankSystemRequest)(nil), // 3: biconom.client.rank.v1.RankStatisticsAccountTopRankListByRankSystemRequest
	(*rank_system.RankSystem_Rank_ID)(nil),                      // 4: biconom.type.RankSystem.Rank.ID
	(*sort.Sort)(nil),                                           // 5: biconom.type.Sort
	(*rank_system.RankSystem_ID)(nil),                           // 6: biconom.type.RankSystem.ID
	(*rank_system.RankSystem_Rank_ID_Inner)(nil),                // 7: biconom.type.RankSystem.Rank.ID.Inner
	(*rank_statistics.RankStatistics_AccountTop_ID)(nil),        // 8: biconom.type.RankStatistics.AccountTop.ID
	(*rank_statistics.RankStatistics_AccountCount)(nil),         // 9: biconom.type.RankStatistics.AccountCount
	(*rank_statistics.RankStatistics_AccountTop)(nil),           // 10: biconom.type.RankStatistics.AccountTop
}
var file_biconom_client_rank_v1_rank_statistics_proto_depIdxs = []int32{
	4,  // 0: biconom.client.rank.v1.RankStatisticsAccountCountListRequest.step:type_name -> biconom.type.RankSystem.Rank.ID
	5,  // 1: biconom.client.rank.v1.RankStatisticsAccountCountListRequest.sort:type_name -> biconom.type.Sort
	6,  // 2: biconom.client.rank.v1.RankStatisticsAccountCountListByRankSystemRequest.rank_system:type_name -> biconom.type.RankSystem.ID
	7,  // 3: biconom.client.rank.v1.RankStatisticsAccountCountListByRankSystemRequest.step:type_name -> biconom.type.RankSystem.Rank.ID.Inner
	5,  // 4: biconom.client.rank.v1.RankStatisticsAccountCountListByRankSystemRequest.sort:type_name -> biconom.type.Sort
	4,  // 5: biconom.client.rank.v1.RankStatisticsAccountTopRankListRequest.step:type_name -> biconom.type.RankSystem.Rank.ID
	5,  // 6: biconom.client.rank.v1.RankStatisticsAccountTopRankListRequest.sort:type_name -> biconom.type.Sort
	6,  // 7: biconom.client.rank.v1.RankStatisticsAccountTopRankListByRankSystemRequest.rank_system:type_name -> biconom.type.RankSystem.ID
	4,  // 8: biconom.client.rank.v1.RankStatisticsAccountTopRankListByRankSystemRequest.step:type_name -> biconom.type.RankSystem.Rank.ID
	5,  // 9: biconom.client.rank.v1.RankStatisticsAccountTopRankListByRankSystemRequest.sort:type_name -> biconom.type.Sort
	4,  // 10: biconom.client.rank.v1.RankStatistics.AccountCountGet:input_type -> biconom.type.RankSystem.Rank.ID
	0,  // 11: biconom.client.rank.v1.RankStatistics.AccountCountList:input_type -> biconom.client.rank.v1.RankStatisticsAccountCountListRequest
	1,  // 12: biconom.client.rank.v1.RankStatistics.AccountCountListByRankSystem:input_type -> biconom.client.rank.v1.RankStatisticsAccountCountListByRankSystemRequest
	8,  // 13: biconom.client.rank.v1.RankStatistics.AccountTopRankGet:input_type -> biconom.type.RankStatistics.AccountTop.ID
	2,  // 14: biconom.client.rank.v1.RankStatistics.AccountTopRankList:input_type -> biconom.client.rank.v1.RankStatisticsAccountTopRankListRequest
	3,  // 15: biconom.client.rank.v1.RankStatistics.AccountTopRankListByRankSystem:input_type -> biconom.client.rank.v1.RankStatisticsAccountTopRankListByRankSystemRequest
	9,  // 16: biconom.client.rank.v1.RankStatistics.AccountCountGet:output_type -> biconom.type.RankStatistics.AccountCount
	9,  // 17: biconom.client.rank.v1.RankStatistics.AccountCountList:output_type -> biconom.type.RankStatistics.AccountCount
	9,  // 18: biconom.client.rank.v1.RankStatistics.AccountCountListByRankSystem:output_type -> biconom.type.RankStatistics.AccountCount
	10, // 19: biconom.client.rank.v1.RankStatistics.AccountTopRankGet:output_type -> biconom.type.RankStatistics.AccountTop
	10, // 20: biconom.client.rank.v1.RankStatistics.AccountTopRankList:output_type -> biconom.type.RankStatistics.AccountTop
	10, // 21: biconom.client.rank.v1.RankStatistics.AccountTopRankListByRankSystem:output_type -> biconom.type.RankStatistics.AccountTop
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_biconom_client_rank_v1_rank_statistics_proto_init() }
func file_biconom_client_rank_v1_rank_statistics_proto_init() {
	if File_biconom_client_rank_v1_rank_statistics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankStatisticsAccountCountListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankStatisticsAccountCountListByRankSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankStatisticsAccountTopRankListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_client_rank_v1_rank_statistics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankStatisticsAccountTopRankListByRankSystemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biconom_client_rank_v1_rank_statistics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_biconom_client_rank_v1_rank_statistics_proto_goTypes,
		DependencyIndexes: file_biconom_client_rank_v1_rank_statistics_proto_depIdxs,
		MessageInfos:      file_biconom_client_rank_v1_rank_statistics_proto_msgTypes,
	}.Build()
	File_biconom_client_rank_v1_rank_statistics_proto = out.File
	file_biconom_client_rank_v1_rank_statistics_proto_rawDesc = nil
	file_biconom_client_rank_v1_rank_statistics_proto_goTypes = nil
	file_biconom_client_rank_v1_rank_statistics_proto_depIdxs = nil
}
