// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: biconom/client/rank/v1/rank_statistics.proto

package service_client_rank_pb

import (
	context "context"
	rank_system "github.com/biconom/go-genproto/biconom/type/rank_system"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RankStatisticsClient is the client API for RankStatistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RankStatisticsClient interface {
	AccountCountGet(ctx context.Context, in *rank_system.RankSystem_Rank_ID, opts ...grpc.CallOption) (*RankStatisticsAccountCount, error)
	AccountCountList(ctx context.Context, in *RankStatisticsAccountCountListRequest, opts ...grpc.CallOption) (RankStatistics_AccountCountListClient, error)
	AccountCountListByRankSystem(ctx context.Context, in *RankStatisticsAccountCountListByRankSystemRequest, opts ...grpc.CallOption) (RankStatistics_AccountCountListByRankSystemClient, error)
	AccountTopRankGet(ctx context.Context, in *RankStatisticsAccountTop_ID, opts ...grpc.CallOption) (*RankStatisticsAccountTop, error)
	AccountTopRankList(ctx context.Context, in *RankStatisticsAccountTopRankListRequest, opts ...grpc.CallOption) (RankStatistics_AccountTopRankListClient, error)
	AccountTopRankListByRankSystem(ctx context.Context, in *RankStatisticsAccountTopRankListByRankSystemRequest, opts ...grpc.CallOption) (RankStatistics_AccountTopRankListByRankSystemClient, error)
}

type rankStatisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewRankStatisticsClient(cc grpc.ClientConnInterface) RankStatisticsClient {
	return &rankStatisticsClient{cc}
}

func (c *rankStatisticsClient) AccountCountGet(ctx context.Context, in *rank_system.RankSystem_Rank_ID, opts ...grpc.CallOption) (*RankStatisticsAccountCount, error) {
	out := new(RankStatisticsAccountCount)
	err := c.cc.Invoke(ctx, "/biconom.client.rank.v1.RankStatistics/AccountCountGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankStatisticsClient) AccountCountList(ctx context.Context, in *RankStatisticsAccountCountListRequest, opts ...grpc.CallOption) (RankStatistics_AccountCountListClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankStatistics_ServiceDesc.Streams[0], "/biconom.client.rank.v1.RankStatistics/AccountCountList", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankStatisticsAccountCountListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankStatistics_AccountCountListClient interface {
	Recv() (*RankStatisticsAccountCount, error)
	grpc.ClientStream
}

type rankStatisticsAccountCountListClient struct {
	grpc.ClientStream
}

func (x *rankStatisticsAccountCountListClient) Recv() (*RankStatisticsAccountCount, error) {
	m := new(RankStatisticsAccountCount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rankStatisticsClient) AccountCountListByRankSystem(ctx context.Context, in *RankStatisticsAccountCountListByRankSystemRequest, opts ...grpc.CallOption) (RankStatistics_AccountCountListByRankSystemClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankStatistics_ServiceDesc.Streams[1], "/biconom.client.rank.v1.RankStatistics/AccountCountListByRankSystem", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankStatisticsAccountCountListByRankSystemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankStatistics_AccountCountListByRankSystemClient interface {
	Recv() (*RankStatisticsAccountCount, error)
	grpc.ClientStream
}

type rankStatisticsAccountCountListByRankSystemClient struct {
	grpc.ClientStream
}

func (x *rankStatisticsAccountCountListByRankSystemClient) Recv() (*RankStatisticsAccountCount, error) {
	m := new(RankStatisticsAccountCount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rankStatisticsClient) AccountTopRankGet(ctx context.Context, in *RankStatisticsAccountTop_ID, opts ...grpc.CallOption) (*RankStatisticsAccountTop, error) {
	out := new(RankStatisticsAccountTop)
	err := c.cc.Invoke(ctx, "/biconom.client.rank.v1.RankStatistics/AccountTopRankGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankStatisticsClient) AccountTopRankList(ctx context.Context, in *RankStatisticsAccountTopRankListRequest, opts ...grpc.CallOption) (RankStatistics_AccountTopRankListClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankStatistics_ServiceDesc.Streams[2], "/biconom.client.rank.v1.RankStatistics/AccountTopRankList", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankStatisticsAccountTopRankListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankStatistics_AccountTopRankListClient interface {
	Recv() (*RankStatisticsAccountTop, error)
	grpc.ClientStream
}

type rankStatisticsAccountTopRankListClient struct {
	grpc.ClientStream
}

func (x *rankStatisticsAccountTopRankListClient) Recv() (*RankStatisticsAccountTop, error) {
	m := new(RankStatisticsAccountTop)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rankStatisticsClient) AccountTopRankListByRankSystem(ctx context.Context, in *RankStatisticsAccountTopRankListByRankSystemRequest, opts ...grpc.CallOption) (RankStatistics_AccountTopRankListByRankSystemClient, error) {
	stream, err := c.cc.NewStream(ctx, &RankStatistics_ServiceDesc.Streams[3], "/biconom.client.rank.v1.RankStatistics/AccountTopRankListByRankSystem", opts...)
	if err != nil {
		return nil, err
	}
	x := &rankStatisticsAccountTopRankListByRankSystemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RankStatistics_AccountTopRankListByRankSystemClient interface {
	Recv() (*RankStatisticsAccountTop, error)
	grpc.ClientStream
}

type rankStatisticsAccountTopRankListByRankSystemClient struct {
	grpc.ClientStream
}

func (x *rankStatisticsAccountTopRankListByRankSystemClient) Recv() (*RankStatisticsAccountTop, error) {
	m := new(RankStatisticsAccountTop)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RankStatisticsServer is the server API for RankStatistics service.
// All implementations must embed UnimplementedRankStatisticsServer
// for forward compatibility
type RankStatisticsServer interface {
	AccountCountGet(context.Context, *rank_system.RankSystem_Rank_ID) (*RankStatisticsAccountCount, error)
	AccountCountList(*RankStatisticsAccountCountListRequest, RankStatistics_AccountCountListServer) error
	AccountCountListByRankSystem(*RankStatisticsAccountCountListByRankSystemRequest, RankStatistics_AccountCountListByRankSystemServer) error
	AccountTopRankGet(context.Context, *RankStatisticsAccountTop_ID) (*RankStatisticsAccountTop, error)
	AccountTopRankList(*RankStatisticsAccountTopRankListRequest, RankStatistics_AccountTopRankListServer) error
	AccountTopRankListByRankSystem(*RankStatisticsAccountTopRankListByRankSystemRequest, RankStatistics_AccountTopRankListByRankSystemServer) error
	mustEmbedUnimplementedRankStatisticsServer()
}

// UnimplementedRankStatisticsServer must be embedded to have forward compatible implementations.
type UnimplementedRankStatisticsServer struct {
}

func (UnimplementedRankStatisticsServer) AccountCountGet(context.Context, *rank_system.RankSystem_Rank_ID) (*RankStatisticsAccountCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCountGet not implemented")
}
func (UnimplementedRankStatisticsServer) AccountCountList(*RankStatisticsAccountCountListRequest, RankStatistics_AccountCountListServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountCountList not implemented")
}
func (UnimplementedRankStatisticsServer) AccountCountListByRankSystem(*RankStatisticsAccountCountListByRankSystemRequest, RankStatistics_AccountCountListByRankSystemServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountCountListByRankSystem not implemented")
}
func (UnimplementedRankStatisticsServer) AccountTopRankGet(context.Context, *RankStatisticsAccountTop_ID) (*RankStatisticsAccountTop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountTopRankGet not implemented")
}
func (UnimplementedRankStatisticsServer) AccountTopRankList(*RankStatisticsAccountTopRankListRequest, RankStatistics_AccountTopRankListServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountTopRankList not implemented")
}
func (UnimplementedRankStatisticsServer) AccountTopRankListByRankSystem(*RankStatisticsAccountTopRankListByRankSystemRequest, RankStatistics_AccountTopRankListByRankSystemServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountTopRankListByRankSystem not implemented")
}
func (UnimplementedRankStatisticsServer) mustEmbedUnimplementedRankStatisticsServer() {}

// UnsafeRankStatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankStatisticsServer will
// result in compilation errors.
type UnsafeRankStatisticsServer interface {
	mustEmbedUnimplementedRankStatisticsServer()
}

func RegisterRankStatisticsServer(s grpc.ServiceRegistrar, srv RankStatisticsServer) {
	s.RegisterService(&RankStatistics_ServiceDesc, srv)
}

func _RankStatistics_AccountCountGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rank_system.RankSystem_Rank_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankStatisticsServer).AccountCountGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.rank.v1.RankStatistics/AccountCountGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankStatisticsServer).AccountCountGet(ctx, req.(*rank_system.RankSystem_Rank_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankStatistics_AccountCountList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankStatisticsAccountCountListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankStatisticsServer).AccountCountList(m, &rankStatisticsAccountCountListServer{stream})
}

type RankStatistics_AccountCountListServer interface {
	Send(*RankStatisticsAccountCount) error
	grpc.ServerStream
}

type rankStatisticsAccountCountListServer struct {
	grpc.ServerStream
}

func (x *rankStatisticsAccountCountListServer) Send(m *RankStatisticsAccountCount) error {
	return x.ServerStream.SendMsg(m)
}

func _RankStatistics_AccountCountListByRankSystem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankStatisticsAccountCountListByRankSystemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankStatisticsServer).AccountCountListByRankSystem(m, &rankStatisticsAccountCountListByRankSystemServer{stream})
}

type RankStatistics_AccountCountListByRankSystemServer interface {
	Send(*RankStatisticsAccountCount) error
	grpc.ServerStream
}

type rankStatisticsAccountCountListByRankSystemServer struct {
	grpc.ServerStream
}

func (x *rankStatisticsAccountCountListByRankSystemServer) Send(m *RankStatisticsAccountCount) error {
	return x.ServerStream.SendMsg(m)
}

func _RankStatistics_AccountTopRankGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankStatisticsAccountTop_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankStatisticsServer).AccountTopRankGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.rank.v1.RankStatistics/AccountTopRankGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankStatisticsServer).AccountTopRankGet(ctx, req.(*RankStatisticsAccountTop_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankStatistics_AccountTopRankList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankStatisticsAccountTopRankListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankStatisticsServer).AccountTopRankList(m, &rankStatisticsAccountTopRankListServer{stream})
}

type RankStatistics_AccountTopRankListServer interface {
	Send(*RankStatisticsAccountTop) error
	grpc.ServerStream
}

type rankStatisticsAccountTopRankListServer struct {
	grpc.ServerStream
}

func (x *rankStatisticsAccountTopRankListServer) Send(m *RankStatisticsAccountTop) error {
	return x.ServerStream.SendMsg(m)
}

func _RankStatistics_AccountTopRankListByRankSystem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RankStatisticsAccountTopRankListByRankSystemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RankStatisticsServer).AccountTopRankListByRankSystem(m, &rankStatisticsAccountTopRankListByRankSystemServer{stream})
}

type RankStatistics_AccountTopRankListByRankSystemServer interface {
	Send(*RankStatisticsAccountTop) error
	grpc.ServerStream
}

type rankStatisticsAccountTopRankListByRankSystemServer struct {
	grpc.ServerStream
}

func (x *rankStatisticsAccountTopRankListByRankSystemServer) Send(m *RankStatisticsAccountTop) error {
	return x.ServerStream.SendMsg(m)
}

// RankStatistics_ServiceDesc is the grpc.ServiceDesc for RankStatistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RankStatistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconom.client.rank.v1.RankStatistics",
	HandlerType: (*RankStatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountCountGet",
			Handler:    _RankStatistics_AccountCountGet_Handler,
		},
		{
			MethodName: "AccountTopRankGet",
			Handler:    _RankStatistics_AccountTopRankGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AccountCountList",
			Handler:       _RankStatistics_AccountCountList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AccountCountListByRankSystem",
			Handler:       _RankStatistics_AccountCountListByRankSystem_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AccountTopRankList",
			Handler:       _RankStatistics_AccountTopRankList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AccountTopRankListByRankSystem",
			Handler:       _RankStatistics_AccountTopRankListByRankSystem_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biconom/client/rank/v1/rank_statistics.proto",
}
