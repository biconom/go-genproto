// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: biconom/client/session/v1/session.proto

package service_client_session_pb

import (
	context "context"
	filter "github.com/biconom/go-genproto/biconom/type/filter"
	session "github.com/biconom/go-genproto/biconom/type/session"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionClient interface {
	List(ctx context.Context, in *filter.Filter, opts ...grpc.CallOption) (Session_ListClient, error)
	DeactivateOther(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeactivateCurrent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sessionClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionClient(cc grpc.ClientConnInterface) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) List(ctx context.Context, in *filter.Filter, opts ...grpc.CallOption) (Session_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Session_ServiceDesc.Streams[0], "/biconom.client.session.v1.Session/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Session_ListClient interface {
	Recv() (*session.Session, error)
	grpc.ClientStream
}

type sessionListClient struct {
	grpc.ClientStream
}

func (x *sessionListClient) Recv() (*session.Session, error) {
	m := new(session.Session)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sessionClient) DeactivateOther(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/biconom.client.session.v1.Session/DeactivateOther", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) DeactivateCurrent(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/biconom.client.session.v1.Session/DeactivateCurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServer is the server API for Session service.
// All implementations must embed UnimplementedSessionServer
// for forward compatibility
type SessionServer interface {
	List(*filter.Filter, Session_ListServer) error
	DeactivateOther(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DeactivateCurrent(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedSessionServer()
}

// UnimplementedSessionServer must be embedded to have forward compatible implementations.
type UnimplementedSessionServer struct {
}

func (UnimplementedSessionServer) List(*filter.Filter, Session_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSessionServer) DeactivateOther(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateOther not implemented")
}
func (UnimplementedSessionServer) DeactivateCurrent(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateCurrent not implemented")
}
func (UnimplementedSessionServer) mustEmbedUnimplementedSessionServer() {}

// UnsafeSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServer will
// result in compilation errors.
type UnsafeSessionServer interface {
	mustEmbedUnimplementedSessionServer()
}

func RegisterSessionServer(s grpc.ServiceRegistrar, srv SessionServer) {
	s.RegisterService(&Session_ServiceDesc, srv)
}

func _Session_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(filter.Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SessionServer).List(m, &sessionListServer{stream})
}

type Session_ListServer interface {
	Send(*session.Session) error
	grpc.ServerStream
}

type sessionListServer struct {
	grpc.ServerStream
}

func (x *sessionListServer) Send(m *session.Session) error {
	return x.ServerStream.SendMsg(m)
}

func _Session_DeactivateOther_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).DeactivateOther(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.session.v1.Session/DeactivateOther",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).DeactivateOther(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_DeactivateCurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).DeactivateCurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/biconom.client.session.v1.Session/DeactivateCurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).DeactivateCurrent(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Session_ServiceDesc is the grpc.ServiceDesc for Session service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Session_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "biconom.client.session.v1.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeactivateOther",
			Handler:    _Session_DeactivateOther_Handler,
		},
		{
			MethodName: "DeactivateCurrent",
			Handler:    _Session_DeactivateCurrent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Session_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "biconom/client/session/v1/session.proto",
}
