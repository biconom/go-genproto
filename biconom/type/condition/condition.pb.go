// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: biconom/type/condition.proto

package condition_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Condition_Argument_Calc_Operator int32

const (
	Condition_Argument_Calc_SUM Condition_Argument_Calc_Operator = 0 // сложение
	Condition_Argument_Calc_SUB Condition_Argument_Calc_Operator = 1 // вычитание
	Condition_Argument_Calc_MUL Condition_Argument_Calc_Operator = 2 // умножение
	Condition_Argument_Calc_DIV Condition_Argument_Calc_Operator = 3 // деление
)

// Enum value maps for Condition_Argument_Calc_Operator.
var (
	Condition_Argument_Calc_Operator_name = map[int32]string{
		0: "SUM",
		1: "SUB",
		2: "MUL",
		3: "DIV",
	}
	Condition_Argument_Calc_Operator_value = map[string]int32{
		"SUM": 0,
		"SUB": 1,
		"MUL": 2,
		"DIV": 3,
	}
)

func (x Condition_Argument_Calc_Operator) Enum() *Condition_Argument_Calc_Operator {
	p := new(Condition_Argument_Calc_Operator)
	*p = x
	return p
}

func (x Condition_Argument_Calc_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_Argument_Calc_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_biconom_type_condition_proto_enumTypes[0].Descriptor()
}

func (Condition_Argument_Calc_Operator) Type() protoreflect.EnumType {
	return &file_biconom_type_condition_proto_enumTypes[0]
}

func (x Condition_Argument_Calc_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition_Argument_Calc_Operator.Descriptor instead.
func (Condition_Argument_Calc_Operator) EnumDescriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{0, 0, 2, 0}
}

type Condition_Target_Operator int32

const (
	Condition_Target_EQ  Condition_Target_Operator = 0
	Condition_Target_NEQ Condition_Target_Operator = 1
	Condition_Target_GT  Condition_Target_Operator = 2
	Condition_Target_LT  Condition_Target_Operator = 3
	Condition_Target_GTE Condition_Target_Operator = 4
	Condition_Target_LTE Condition_Target_Operator = 5
)

// Enum value maps for Condition_Target_Operator.
var (
	Condition_Target_Operator_name = map[int32]string{
		0: "EQ",
		1: "NEQ",
		2: "GT",
		3: "LT",
		4: "GTE",
		5: "LTE",
	}
	Condition_Target_Operator_value = map[string]int32{
		"EQ":  0,
		"NEQ": 1,
		"GT":  2,
		"LT":  3,
		"GTE": 4,
		"LTE": 5,
	}
)

func (x Condition_Target_Operator) Enum() *Condition_Target_Operator {
	p := new(Condition_Target_Operator)
	*p = x
	return p
}

func (x Condition_Target_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_Target_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_biconom_type_condition_proto_enumTypes[1].Descriptor()
}

func (Condition_Target_Operator) Type() protoreflect.EnumType {
	return &file_biconom_type_condition_proto_enumTypes[1]
}

func (x Condition_Target_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition_Target_Operator.Descriptor instead.
func (Condition_Target_Operator) EnumDescriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{0, 1, 0}
}

type ConditionOld_Argument_Calc_Operator int32

const (
	ConditionOld_Argument_Calc_SUM ConditionOld_Argument_Calc_Operator = 0 // сложение
	ConditionOld_Argument_Calc_SUB ConditionOld_Argument_Calc_Operator = 1 // вычитание
	ConditionOld_Argument_Calc_MUL ConditionOld_Argument_Calc_Operator = 2 // умножение
	ConditionOld_Argument_Calc_DIV ConditionOld_Argument_Calc_Operator = 3 // деление
)

// Enum value maps for ConditionOld_Argument_Calc_Operator.
var (
	ConditionOld_Argument_Calc_Operator_name = map[int32]string{
		0: "SUM",
		1: "SUB",
		2: "MUL",
		3: "DIV",
	}
	ConditionOld_Argument_Calc_Operator_value = map[string]int32{
		"SUM": 0,
		"SUB": 1,
		"MUL": 2,
		"DIV": 3,
	}
)

func (x ConditionOld_Argument_Calc_Operator) Enum() *ConditionOld_Argument_Calc_Operator {
	p := new(ConditionOld_Argument_Calc_Operator)
	*p = x
	return p
}

func (x ConditionOld_Argument_Calc_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionOld_Argument_Calc_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_biconom_type_condition_proto_enumTypes[2].Descriptor()
}

func (ConditionOld_Argument_Calc_Operator) Type() protoreflect.EnumType {
	return &file_biconom_type_condition_proto_enumTypes[2]
}

func (x ConditionOld_Argument_Calc_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionOld_Argument_Calc_Operator.Descriptor instead.
func (ConditionOld_Argument_Calc_Operator) EnumDescriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{1, 0, 2, 0}
}

type ConditionOld_Target_Operator int32

const (
	ConditionOld_Target_EQ  ConditionOld_Target_Operator = 0
	ConditionOld_Target_NEQ ConditionOld_Target_Operator = 1
	ConditionOld_Target_GT  ConditionOld_Target_Operator = 2
	ConditionOld_Target_LT  ConditionOld_Target_Operator = 3
	ConditionOld_Target_GTE ConditionOld_Target_Operator = 4
	ConditionOld_Target_LTE ConditionOld_Target_Operator = 5
)

// Enum value maps for ConditionOld_Target_Operator.
var (
	ConditionOld_Target_Operator_name = map[int32]string{
		0: "EQ",
		1: "NEQ",
		2: "GT",
		3: "LT",
		4: "GTE",
		5: "LTE",
	}
	ConditionOld_Target_Operator_value = map[string]int32{
		"EQ":  0,
		"NEQ": 1,
		"GT":  2,
		"LT":  3,
		"GTE": 4,
		"LTE": 5,
	}
)

func (x ConditionOld_Target_Operator) Enum() *ConditionOld_Target_Operator {
	p := new(ConditionOld_Target_Operator)
	*p = x
	return p
}

func (x ConditionOld_Target_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionOld_Target_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_biconom_type_condition_proto_enumTypes[3].Descriptor()
}

func (ConditionOld_Target_Operator) Type() protoreflect.EnumType {
	return &file_biconom_type_condition_proto_enumTypes[3]
}

func (x ConditionOld_Target_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionOld_Target_Operator.Descriptor instead.
func (ConditionOld_Target_Operator) EnumDescriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{1, 1, 0}
}

type ConditionBlock_Operator int32

const (
	ConditionBlock_AND ConditionBlock_Operator = 0
	ConditionBlock_OR  ConditionBlock_Operator = 1
)

// Enum value maps for ConditionBlock_Operator.
var (
	ConditionBlock_Operator_name = map[int32]string{
		0: "AND",
		1: "OR",
	}
	ConditionBlock_Operator_value = map[string]int32{
		"AND": 0,
		"OR":  1,
	}
)

func (x ConditionBlock_Operator) Enum() *ConditionBlock_Operator {
	p := new(ConditionBlock_Operator)
	*p = x
	return p
}

func (x ConditionBlock_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionBlock_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_biconom_type_condition_proto_enumTypes[4].Descriptor()
}

func (ConditionBlock_Operator) Type() protoreflect.EnumType {
	return &file_biconom_type_condition_proto_enumTypes[4]
}

func (x ConditionBlock_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionBlock_Operator.Descriptor instead.
func (ConditionBlock_Operator) EnumDescriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{3, 0}
}

type Model_Condition_Operator int32

const (
	Model_Condition_EQ  Model_Condition_Operator = 0
	Model_Condition_NEQ Model_Condition_Operator = 1
	Model_Condition_GT  Model_Condition_Operator = 2
	Model_Condition_LT  Model_Condition_Operator = 3
	Model_Condition_GTE Model_Condition_Operator = 4
	Model_Condition_LTE Model_Condition_Operator = 5
)

// Enum value maps for Model_Condition_Operator.
var (
	Model_Condition_Operator_name = map[int32]string{
		0: "EQ",
		1: "NEQ",
		2: "GT",
		3: "LT",
		4: "GTE",
		5: "LTE",
	}
	Model_Condition_Operator_value = map[string]int32{
		"EQ":  0,
		"NEQ": 1,
		"GT":  2,
		"LT":  3,
		"GTE": 4,
		"LTE": 5,
	}
)

func (x Model_Condition_Operator) Enum() *Model_Condition_Operator {
	p := new(Model_Condition_Operator)
	*p = x
	return p
}

func (x Model_Condition_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Model_Condition_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_biconom_type_condition_proto_enumTypes[5].Descriptor()
}

func (Model_Condition_Operator) Type() protoreflect.EnumType {
	return &file_biconom_type_condition_proto_enumTypes[5]
}

func (x Model_Condition_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Model_Condition_Operator.Descriptor instead.
func (Model_Condition_Operator) EnumDescriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 1, 0}
}

type Model_Argument_Kind int32

const (
	Model_Argument_Calc       Model_Argument_Kind = 0
	Model_Argument_QueryRank  Model_Argument_Kind = 1
	Model_Argument_StaticRank Model_Argument_Kind = 2
)

// Enum value maps for Model_Argument_Kind.
var (
	Model_Argument_Kind_name = map[int32]string{
		0: "Calc",
		1: "QueryRank",
		2: "StaticRank",
	}
	Model_Argument_Kind_value = map[string]int32{
		"Calc":       0,
		"QueryRank":  1,
		"StaticRank": 2,
	}
)

func (x Model_Argument_Kind) Enum() *Model_Argument_Kind {
	p := new(Model_Argument_Kind)
	*p = x
	return p
}

func (x Model_Argument_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Model_Argument_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biconom_type_condition_proto_enumTypes[6].Descriptor()
}

func (Model_Argument_Kind) Type() protoreflect.EnumType {
	return &file_biconom_type_condition_proto_enumTypes[6]
}

func (x Model_Argument_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Model_Argument_Kind.Descriptor instead.
func (Model_Argument_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 2, 0}
}

type Model_Calc_Operator int32

const (
	Model_Calc_SUM Model_Calc_Operator = 0 // сложение
	Model_Calc_SUB Model_Calc_Operator = 1 // вычитание
	Model_Calc_MUL Model_Calc_Operator = 2 // умножение
	Model_Calc_DIV Model_Calc_Operator = 3 // деление
)

// Enum value maps for Model_Calc_Operator.
var (
	Model_Calc_Operator_name = map[int32]string{
		0: "SUM",
		1: "SUB",
		2: "MUL",
		3: "DIV",
	}
	Model_Calc_Operator_value = map[string]int32{
		"SUM": 0,
		"SUB": 1,
		"MUL": 2,
		"DIV": 3,
	}
)

func (x Model_Calc_Operator) Enum() *Model_Calc_Operator {
	p := new(Model_Calc_Operator)
	*p = x
	return p
}

func (x Model_Calc_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Model_Calc_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_biconom_type_condition_proto_enumTypes[7].Descriptor()
}

func (Model_Calc_Operator) Type() protoreflect.EnumType {
	return &file_biconom_type_condition_proto_enumTypes[7]
}

func (x Model_Calc_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Model_Calc_Operator.Descriptor instead.
func (Model_Calc_Operator) EnumDescriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 5, 0}
}

type Model_Calc_Kind int32

const (
	Model_Calc_Uint Model_Calc_Kind = 0
)

// Enum value maps for Model_Calc_Kind.
var (
	Model_Calc_Kind_name = map[int32]string{
		0: "Uint",
	}
	Model_Calc_Kind_value = map[string]int32{
		"Uint": 0,
	}
)

func (x Model_Calc_Kind) Enum() *Model_Calc_Kind {
	p := new(Model_Calc_Kind)
	*p = x
	return p
}

func (x Model_Calc_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Model_Calc_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biconom_type_condition_proto_enumTypes[8].Descriptor()
}

func (Model_Calc_Kind) Type() protoreflect.EnumType {
	return &file_biconom_type_condition_proto_enumTypes[8]
}

func (x Model_Calc_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Model_Calc_Kind.Descriptor instead.
func (Model_Calc_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 5, 1}
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionId uint32              `protobuf:"varint,1,opt,name=condition_id,json=conditionId,proto3" json:"condition_id,omitempty"`
	Source      *Condition_Argument `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target      *Condition_Target   `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	CacheResult bool                `protobuf:"varint,4,opt,name=cache_result,json=cacheResult,proto3" json:"cache_result,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{0}
}

func (x *Condition) GetConditionId() uint32 {
	if x != nil {
		return x.ConditionId
	}
	return 0
}

func (x *Condition) GetSource() *Condition_Argument {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Condition) GetTarget() *Condition_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Condition) GetCacheResult() bool {
	if x != nil {
		return x.CacheResult
	}
	return false
}

type ConditionOld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionId uint32                 `protobuf:"varint,1,opt,name=condition_id,json=conditionId,proto3" json:"condition_id,omitempty"`
	Source      *ConditionOld_Argument `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target      *ConditionOld_Target   `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	CacheResult bool                   `protobuf:"varint,4,opt,name=cache_result,json=cacheResult,proto3" json:"cache_result,omitempty"`
}

func (x *ConditionOld) Reset() {
	*x = ConditionOld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOld) ProtoMessage() {}

func (x *ConditionOld) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOld.ProtoReflect.Descriptor instead.
func (*ConditionOld) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{1}
}

func (x *ConditionOld) GetConditionId() uint32 {
	if x != nil {
		return x.ConditionId
	}
	return 0
}

func (x *ConditionOld) GetSource() *ConditionOld_Argument {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ConditionOld) GetTarget() *ConditionOld_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ConditionOld) GetCacheResult() bool {
	if x != nil {
		return x.CacheResult
	}
	return false
}

type ConditionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId     uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ConditionId uint32 `protobuf:"varint,2,opt,name=condition_id,json=conditionId,proto3" json:"condition_id,omitempty"`
	CreatedAt   int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ConditionEvent) Reset() {
	*x = ConditionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionEvent) ProtoMessage() {}

func (x *ConditionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionEvent.ProtoReflect.Descriptor instead.
func (*ConditionEvent) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{2}
}

func (x *ConditionEvent) GetEventId() uint32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *ConditionEvent) GetConditionId() uint32 {
	if x != nil {
		return x.ConditionId
	}
	return 0
}

func (x *ConditionEvent) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ConditionBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionBlockId uint32                     `protobuf:"varint,1,opt,name=condition_block_id,json=conditionBlockId,proto3" json:"condition_block_id,omitempty"`
	Operator         ConditionBlock_Operator    `protobuf:"varint,2,opt,name=operator,proto3,enum=biconom.type.ConditionBlock_Operator" json:"operator,omitempty"`
	Arguments        []*ConditionBlock_Argument `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
	CacheResult      bool                       `protobuf:"varint,4,opt,name=cache_result,json=cacheResult,proto3" json:"cache_result,omitempty"`
}

func (x *ConditionBlock) Reset() {
	*x = ConditionBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionBlock) ProtoMessage() {}

func (x *ConditionBlock) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionBlock.ProtoReflect.Descriptor instead.
func (*ConditionBlock) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{3}
}

func (x *ConditionBlock) GetConditionBlockId() uint32 {
	if x != nil {
		return x.ConditionBlockId
	}
	return 0
}

func (x *ConditionBlock) GetOperator() ConditionBlock_Operator {
	if x != nil {
		return x.Operator
	}
	return ConditionBlock_AND
}

func (x *ConditionBlock) GetArguments() []*ConditionBlock_Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ConditionBlock) GetCacheResult() bool {
	if x != nil {
		return x.CacheResult
	}
	return false
}

type ConditionBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ConditionBucket_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Target *ConditionBucket_Target `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Events []*ConditionEvent       `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ConditionBucket) Reset() {
	*x = ConditionBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionBucket) ProtoMessage() {}

func (x *ConditionBucket) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionBucket.ProtoReflect.Descriptor instead.
func (*ConditionBucket) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{4}
}

func (x *ConditionBucket) GetHeader() *ConditionBucket_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ConditionBucket) GetTarget() *ConditionBucket_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ConditionBucket) GetEvents() []*ConditionEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5}
}

type Condition_Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Condition_Argument_Query_
	//	*Condition_Argument_Static_
	//	*Condition_Argument_Calc_
	Value      isCondition_Argument_Value `protobuf_oneof:"value"`
	CacheValue *Condition_Argument_Static `protobuf:"bytes,4,opt,name=cache_value,json=cacheValue,proto3" json:"cache_value,omitempty"`
}

func (x *Condition_Argument) Reset() {
	*x = Condition_Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Argument) ProtoMessage() {}

func (x *Condition_Argument) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Argument.ProtoReflect.Descriptor instead.
func (*Condition_Argument) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Condition_Argument) GetValue() isCondition_Argument_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Condition_Argument) GetQuery() *Condition_Argument_Query {
	if x, ok := x.GetValue().(*Condition_Argument_Query_); ok {
		return x.Query
	}
	return nil
}

func (x *Condition_Argument) GetStatic() *Condition_Argument_Static {
	if x, ok := x.GetValue().(*Condition_Argument_Static_); ok {
		return x.Static
	}
	return nil
}

func (x *Condition_Argument) GetCalc() *Condition_Argument_Calc {
	if x, ok := x.GetValue().(*Condition_Argument_Calc_); ok {
		return x.Calc
	}
	return nil
}

func (x *Condition_Argument) GetCacheValue() *Condition_Argument_Static {
	if x != nil {
		return x.CacheValue
	}
	return nil
}

type isCondition_Argument_Value interface {
	isCondition_Argument_Value()
}

type Condition_Argument_Query_ struct {
	Query *Condition_Argument_Query `protobuf:"bytes,1,opt,name=query,proto3,oneof"`
}

type Condition_Argument_Static_ struct {
	Static *Condition_Argument_Static `protobuf:"bytes,2,opt,name=static,proto3,oneof"`
}

type Condition_Argument_Calc_ struct {
	Calc *Condition_Argument_Calc `protobuf:"bytes,3,opt,name=calc,proto3,oneof"`
}

func (*Condition_Argument_Query_) isCondition_Argument_Value() {}

func (*Condition_Argument_Static_) isCondition_Argument_Value() {}

func (*Condition_Argument_Calc_) isCondition_Argument_Value() {}

type Condition_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator Condition_Target_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=biconom.type.Condition_Target_Operator" json:"operator,omitempty"`
	Result   *Condition_Argument       `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Condition_Target) Reset() {
	*x = Condition_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Target) ProtoMessage() {}

func (x *Condition_Target) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Target.ProtoReflect.Descriptor instead.
func (*Condition_Target) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Condition_Target) GetOperator() Condition_Target_Operator {
	if x != nil {
		return x.Operator
	}
	return Condition_Target_EQ
}

func (x *Condition_Target) GetResult() *Condition_Argument {
	if x != nil {
		return x.Result
	}
	return nil
}

type Condition_Argument_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Condition_Argument_Query_Rank_
	Value isCondition_Argument_Query_Value `protobuf_oneof:"value"`
}

func (x *Condition_Argument_Query) Reset() {
	*x = Condition_Argument_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Argument_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Argument_Query) ProtoMessage() {}

func (x *Condition_Argument_Query) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Argument_Query.ProtoReflect.Descriptor instead.
func (*Condition_Argument_Query) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Condition_Argument_Query) GetValue() isCondition_Argument_Query_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Condition_Argument_Query) GetRank() *Condition_Argument_Query_Rank {
	if x, ok := x.GetValue().(*Condition_Argument_Query_Rank_); ok {
		return x.Rank
	}
	return nil
}

type isCondition_Argument_Query_Value interface {
	isCondition_Argument_Query_Value()
}

type Condition_Argument_Query_Rank_ struct {
	Rank *Condition_Argument_Query_Rank `protobuf:"bytes,1,opt,name=rank,proto3,oneof"`
}

func (*Condition_Argument_Query_Rank_) isCondition_Argument_Query_Value() {}

type Condition_Argument_Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Condition_Argument_Static_Rank_
	Value isCondition_Argument_Static_Value `protobuf_oneof:"value"`
}

func (x *Condition_Argument_Static) Reset() {
	*x = Condition_Argument_Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Argument_Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Argument_Static) ProtoMessage() {}

func (x *Condition_Argument_Static) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Argument_Static.ProtoReflect.Descriptor instead.
func (*Condition_Argument_Static) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *Condition_Argument_Static) GetValue() isCondition_Argument_Static_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Condition_Argument_Static) GetRank() *Condition_Argument_Static_Rank {
	if x, ok := x.GetValue().(*Condition_Argument_Static_Rank_); ok {
		return x.Rank
	}
	return nil
}

type isCondition_Argument_Static_Value interface {
	isCondition_Argument_Static_Value()
}

type Condition_Argument_Static_Rank_ struct {
	Rank *Condition_Argument_Static_Rank `protobuf:"bytes,1,opt,name=rank,proto3,oneof"` //google.protobuf.Value custom_value = 2;
}

func (*Condition_Argument_Static_Rank_) isCondition_Argument_Static_Value() {}

type Condition_Argument_Calc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator Condition_Argument_Calc_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=biconom.type.Condition_Argument_Calc_Operator" json:"operator,omitempty"`
	First    *Condition_Argument              `protobuf:"bytes,2,opt,name=first,proto3" json:"first,omitempty"`
	Second   *Condition_Argument              `protobuf:"bytes,3,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *Condition_Argument_Calc) Reset() {
	*x = Condition_Argument_Calc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Argument_Calc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Argument_Calc) ProtoMessage() {}

func (x *Condition_Argument_Calc) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Argument_Calc.ProtoReflect.Descriptor instead.
func (*Condition_Argument_Calc) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Condition_Argument_Calc) GetOperator() Condition_Argument_Calc_Operator {
	if x != nil {
		return x.Operator
	}
	return Condition_Argument_Calc_SUM
}

func (x *Condition_Argument_Calc) GetFirst() *Condition_Argument {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *Condition_Argument_Calc) GetSecond() *Condition_Argument {
	if x != nil {
		return x.Second
	}
	return nil
}

type Condition_Argument_Query_Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId uint32 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (x *Condition_Argument_Query_Rank) Reset() {
	*x = Condition_Argument_Query_Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Argument_Query_Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Argument_Query_Rank) ProtoMessage() {}

func (x *Condition_Argument_Query_Rank) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Argument_Query_Rank.ProtoReflect.Descriptor instead.
func (*Condition_Argument_Query_Rank) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Condition_Argument_Query_Rank) GetBucketId() uint32 {
	if x != nil {
		return x.BucketId
	}
	return 0
}

type Condition_Argument_Static_Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId uint32 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	RankId   uint32 `protobuf:"varint,2,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
}

func (x *Condition_Argument_Static_Rank) Reset() {
	*x = Condition_Argument_Static_Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Argument_Static_Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Argument_Static_Rank) ProtoMessage() {}

func (x *Condition_Argument_Static_Rank) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Argument_Static_Rank.ProtoReflect.Descriptor instead.
func (*Condition_Argument_Static_Rank) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Condition_Argument_Static_Rank) GetBucketId() uint32 {
	if x != nil {
		return x.BucketId
	}
	return 0
}

func (x *Condition_Argument_Static_Rank) GetRankId() uint32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

type ConditionOld_Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConditionOld_Argument_Query_
	//	*ConditionOld_Argument_Static_
	//	*ConditionOld_Argument_Calc_
	Value      isConditionOld_Argument_Value `protobuf_oneof:"value"`
	CacheValue *ConditionOld_Argument_Static `protobuf:"bytes,4,opt,name=cache_value,json=cacheValue,proto3" json:"cache_value,omitempty"`
}

func (x *ConditionOld_Argument) Reset() {
	*x = ConditionOld_Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOld_Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOld_Argument) ProtoMessage() {}

func (x *ConditionOld_Argument) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOld_Argument.ProtoReflect.Descriptor instead.
func (*ConditionOld_Argument) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{1, 0}
}

func (m *ConditionOld_Argument) GetValue() isConditionOld_Argument_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConditionOld_Argument) GetQuery() *ConditionOld_Argument_Query {
	if x, ok := x.GetValue().(*ConditionOld_Argument_Query_); ok {
		return x.Query
	}
	return nil
}

func (x *ConditionOld_Argument) GetStatic() *ConditionOld_Argument_Static {
	if x, ok := x.GetValue().(*ConditionOld_Argument_Static_); ok {
		return x.Static
	}
	return nil
}

func (x *ConditionOld_Argument) GetCalc() *ConditionOld_Argument_Calc {
	if x, ok := x.GetValue().(*ConditionOld_Argument_Calc_); ok {
		return x.Calc
	}
	return nil
}

func (x *ConditionOld_Argument) GetCacheValue() *ConditionOld_Argument_Static {
	if x != nil {
		return x.CacheValue
	}
	return nil
}

type isConditionOld_Argument_Value interface {
	isConditionOld_Argument_Value()
}

type ConditionOld_Argument_Query_ struct {
	Query *ConditionOld_Argument_Query `protobuf:"bytes,1,opt,name=query,proto3,oneof"`
}

type ConditionOld_Argument_Static_ struct {
	Static *ConditionOld_Argument_Static `protobuf:"bytes,2,opt,name=static,proto3,oneof"`
}

type ConditionOld_Argument_Calc_ struct {
	Calc *ConditionOld_Argument_Calc `protobuf:"bytes,3,opt,name=calc,proto3,oneof"`
}

func (*ConditionOld_Argument_Query_) isConditionOld_Argument_Value() {}

func (*ConditionOld_Argument_Static_) isConditionOld_Argument_Value() {}

func (*ConditionOld_Argument_Calc_) isConditionOld_Argument_Value() {}

type ConditionOld_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator ConditionOld_Target_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=biconom.type.ConditionOld_Target_Operator" json:"operator,omitempty"`
	Result   *ConditionOld_Argument       `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ConditionOld_Target) Reset() {
	*x = ConditionOld_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOld_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOld_Target) ProtoMessage() {}

func (x *ConditionOld_Target) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOld_Target.ProtoReflect.Descriptor instead.
func (*ConditionOld_Target) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ConditionOld_Target) GetOperator() ConditionOld_Target_Operator {
	if x != nil {
		return x.Operator
	}
	return ConditionOld_Target_EQ
}

func (x *ConditionOld_Target) GetResult() *ConditionOld_Argument {
	if x != nil {
		return x.Result
	}
	return nil
}

type ConditionOld_Argument_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConditionOld_Argument_Query_Rank_
	Value isConditionOld_Argument_Query_Value `protobuf_oneof:"value"`
}

func (x *ConditionOld_Argument_Query) Reset() {
	*x = ConditionOld_Argument_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOld_Argument_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOld_Argument_Query) ProtoMessage() {}

func (x *ConditionOld_Argument_Query) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOld_Argument_Query.ProtoReflect.Descriptor instead.
func (*ConditionOld_Argument_Query) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (m *ConditionOld_Argument_Query) GetValue() isConditionOld_Argument_Query_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConditionOld_Argument_Query) GetRank() *ConditionOld_Argument_Query_Rank {
	if x, ok := x.GetValue().(*ConditionOld_Argument_Query_Rank_); ok {
		return x.Rank
	}
	return nil
}

type isConditionOld_Argument_Query_Value interface {
	isConditionOld_Argument_Query_Value()
}

type ConditionOld_Argument_Query_Rank_ struct {
	Rank *ConditionOld_Argument_Query_Rank `protobuf:"bytes,1,opt,name=rank,proto3,oneof"`
}

func (*ConditionOld_Argument_Query_Rank_) isConditionOld_Argument_Query_Value() {}

type ConditionOld_Argument_Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConditionOld_Argument_Static_Rank_
	Value isConditionOld_Argument_Static_Value `protobuf_oneof:"value"`
}

func (x *ConditionOld_Argument_Static) Reset() {
	*x = ConditionOld_Argument_Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOld_Argument_Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOld_Argument_Static) ProtoMessage() {}

func (x *ConditionOld_Argument_Static) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOld_Argument_Static.ProtoReflect.Descriptor instead.
func (*ConditionOld_Argument_Static) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (m *ConditionOld_Argument_Static) GetValue() isConditionOld_Argument_Static_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConditionOld_Argument_Static) GetRank() *ConditionOld_Argument_Static_Rank {
	if x, ok := x.GetValue().(*ConditionOld_Argument_Static_Rank_); ok {
		return x.Rank
	}
	return nil
}

type isConditionOld_Argument_Static_Value interface {
	isConditionOld_Argument_Static_Value()
}

type ConditionOld_Argument_Static_Rank_ struct {
	Rank *ConditionOld_Argument_Static_Rank `protobuf:"bytes,1,opt,name=rank,proto3,oneof"` //google.protobuf.Value custom_value = 2;
}

func (*ConditionOld_Argument_Static_Rank_) isConditionOld_Argument_Static_Value() {}

type ConditionOld_Argument_Calc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator ConditionOld_Argument_Calc_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=biconom.type.ConditionOld_Argument_Calc_Operator" json:"operator,omitempty"`
	First    *ConditionOld_Argument              `protobuf:"bytes,2,opt,name=first,proto3" json:"first,omitempty"`
	Second   *ConditionOld_Argument              `protobuf:"bytes,3,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *ConditionOld_Argument_Calc) Reset() {
	*x = ConditionOld_Argument_Calc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOld_Argument_Calc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOld_Argument_Calc) ProtoMessage() {}

func (x *ConditionOld_Argument_Calc) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOld_Argument_Calc.ProtoReflect.Descriptor instead.
func (*ConditionOld_Argument_Calc) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{1, 0, 2}
}

func (x *ConditionOld_Argument_Calc) GetOperator() ConditionOld_Argument_Calc_Operator {
	if x != nil {
		return x.Operator
	}
	return ConditionOld_Argument_Calc_SUM
}

func (x *ConditionOld_Argument_Calc) GetFirst() *ConditionOld_Argument {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *ConditionOld_Argument_Calc) GetSecond() *ConditionOld_Argument {
	if x != nil {
		return x.Second
	}
	return nil
}

type ConditionOld_Argument_Query_Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId uint32 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
}

func (x *ConditionOld_Argument_Query_Rank) Reset() {
	*x = ConditionOld_Argument_Query_Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOld_Argument_Query_Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOld_Argument_Query_Rank) ProtoMessage() {}

func (x *ConditionOld_Argument_Query_Rank) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOld_Argument_Query_Rank.ProtoReflect.Descriptor instead.
func (*ConditionOld_Argument_Query_Rank) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

func (x *ConditionOld_Argument_Query_Rank) GetBucketId() uint32 {
	if x != nil {
		return x.BucketId
	}
	return 0
}

type ConditionOld_Argument_Static_Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId uint32 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	RankId   uint32 `protobuf:"varint,2,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
}

func (x *ConditionOld_Argument_Static_Rank) Reset() {
	*x = ConditionOld_Argument_Static_Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionOld_Argument_Static_Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionOld_Argument_Static_Rank) ProtoMessage() {}

func (x *ConditionOld_Argument_Static_Rank) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionOld_Argument_Static_Rank.ProtoReflect.Descriptor instead.
func (*ConditionOld_Argument_Static_Rank) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{1, 0, 1, 0}
}

func (x *ConditionOld_Argument_Static_Rank) GetBucketId() uint32 {
	if x != nil {
		return x.BucketId
	}
	return 0
}

func (x *ConditionOld_Argument_Static_Rank) GetRankId() uint32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

type ConditionBlock_Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConditionBlock_Argument_Condition
	//	*ConditionBlock_Argument_Block
	Value isConditionBlock_Argument_Value `protobuf_oneof:"value"`
}

func (x *ConditionBlock_Argument) Reset() {
	*x = ConditionBlock_Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionBlock_Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionBlock_Argument) ProtoMessage() {}

func (x *ConditionBlock_Argument) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionBlock_Argument.ProtoReflect.Descriptor instead.
func (*ConditionBlock_Argument) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{3, 0}
}

func (m *ConditionBlock_Argument) GetValue() isConditionBlock_Argument_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConditionBlock_Argument) GetCondition() *Condition {
	if x, ok := x.GetValue().(*ConditionBlock_Argument_Condition); ok {
		return x.Condition
	}
	return nil
}

func (x *ConditionBlock_Argument) GetBlock() *ConditionBlock {
	if x, ok := x.GetValue().(*ConditionBlock_Argument_Block); ok {
		return x.Block
	}
	return nil
}

type isConditionBlock_Argument_Value interface {
	isConditionBlock_Argument_Value()
}

type ConditionBlock_Argument_Condition struct {
	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3,oneof"`
}

type ConditionBlock_Argument_Block struct {
	Block *ConditionBlock `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}

func (*ConditionBlock_Argument_Condition) isConditionBlock_Argument_Value() {}

func (*ConditionBlock_Argument_Block) isConditionBlock_Argument_Value() {}

type ConditionBucket_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId uint32 `protobuf:"varint,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	Comment  string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ConditionBucket_Header) Reset() {
	*x = ConditionBucket_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionBucket_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionBucket_Header) ProtoMessage() {}

func (x *ConditionBucket_Header) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionBucket_Header.ProtoReflect.Descriptor instead.
func (*ConditionBucket_Header) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ConditionBucket_Header) GetBucketId() uint32 {
	if x != nil {
		return x.BucketId
	}
	return 0
}

func (x *ConditionBucket_Header) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ConditionBucket_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConditionBucket_Target_Condition
	//	*ConditionBucket_Target_Block
	Value isConditionBucket_Target_Value `protobuf_oneof:"value"`
}

func (x *ConditionBucket_Target) Reset() {
	*x = ConditionBucket_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionBucket_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionBucket_Target) ProtoMessage() {}

func (x *ConditionBucket_Target) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionBucket_Target.ProtoReflect.Descriptor instead.
func (*ConditionBucket_Target) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{4, 1}
}

func (m *ConditionBucket_Target) GetValue() isConditionBucket_Target_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConditionBucket_Target) GetCondition() *Condition {
	if x, ok := x.GetValue().(*ConditionBucket_Target_Condition); ok {
		return x.Condition
	}
	return nil
}

func (x *ConditionBucket_Target) GetBlock() *ConditionBlock {
	if x, ok := x.GetValue().(*ConditionBucket_Target_Block); ok {
		return x.Block
	}
	return nil
}

type isConditionBucket_Target_Value interface {
	isConditionBucket_Target_Value()
}

type ConditionBucket_Target_Condition struct {
	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3,oneof"`
}

type ConditionBucket_Target_Block struct {
	Block *ConditionBlock `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}

func (*ConditionBucket_Target_Condition) isConditionBucket_Target_Value() {}

func (*ConditionBucket_Target_Block) isConditionBucket_Target_Value() {}

type Model_ConditionBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionBucketId   uint32 `protobuf:"varint,1,opt,name=condition_bucket_id,json=conditionBucketId,proto3" json:"condition_bucket_id,omitempty"`
	ConditionBlockId    uint32 `protobuf:"varint,2,opt,name=condition_block_id,json=conditionBlockId,proto3" json:"condition_block_id,omitempty"`
	ConditionBlockRefId uint32 `protobuf:"varint,3,opt,name=condition_block_ref_id,json=conditionBlockRefId,proto3" json:"condition_block_ref_id,omitempty"`
	OperatorAnd         bool   `protobuf:"varint,4,opt,name=operatorAnd,proto3" json:"operatorAnd,omitempty"`
}

func (x *Model_ConditionBlock) Reset() {
	*x = Model_ConditionBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model_ConditionBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model_ConditionBlock) ProtoMessage() {}

func (x *Model_ConditionBlock) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model_ConditionBlock.ProtoReflect.Descriptor instead.
func (*Model_ConditionBlock) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Model_ConditionBlock) GetConditionBucketId() uint32 {
	if x != nil {
		return x.ConditionBucketId
	}
	return 0
}

func (x *Model_ConditionBlock) GetConditionBlockId() uint32 {
	if x != nil {
		return x.ConditionBlockId
	}
	return 0
}

func (x *Model_ConditionBlock) GetConditionBlockRefId() uint32 {
	if x != nil {
		return x.ConditionBlockRefId
	}
	return 0
}

func (x *Model_ConditionBlock) GetOperatorAnd() bool {
	if x != nil {
		return x.OperatorAnd
	}
	return false
}

type Model_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionBucketId uint32                   `protobuf:"varint,1,opt,name=condition_bucket_id,json=conditionBucketId,proto3" json:"condition_bucket_id,omitempty"`
	ConditionId       uint32                   `protobuf:"varint,2,opt,name=condition_id,json=conditionId,proto3" json:"condition_id,omitempty"`
	ConditionBlockId  uint32                   `protobuf:"varint,3,opt,name=condition_block_id,json=conditionBlockId,proto3" json:"condition_block_id,omitempty"`
	SourceArgumentId  uint32                   `protobuf:"varint,4,opt,name=source_argument_id,json=sourceArgumentId,proto3" json:"source_argument_id,omitempty"`
	Operator          Model_Condition_Operator `protobuf:"varint,5,opt,name=operator,proto3,enum=biconom.type.Model_Condition_Operator" json:"operator,omitempty"`
	TargetArgumentId  uint32                   `protobuf:"varint,6,opt,name=target_argument_id,json=targetArgumentId,proto3" json:"target_argument_id,omitempty"`
}

func (x *Model_Condition) Reset() {
	*x = Model_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model_Condition) ProtoMessage() {}

func (x *Model_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model_Condition.ProtoReflect.Descriptor instead.
func (*Model_Condition) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Model_Condition) GetConditionBucketId() uint32 {
	if x != nil {
		return x.ConditionBucketId
	}
	return 0
}

func (x *Model_Condition) GetConditionId() uint32 {
	if x != nil {
		return x.ConditionId
	}
	return 0
}

func (x *Model_Condition) GetConditionBlockId() uint32 {
	if x != nil {
		return x.ConditionBlockId
	}
	return 0
}

func (x *Model_Condition) GetSourceArgumentId() uint32 {
	if x != nil {
		return x.SourceArgumentId
	}
	return 0
}

func (x *Model_Condition) GetOperator() Model_Condition_Operator {
	if x != nil {
		return x.Operator
	}
	return Model_Condition_EQ
}

func (x *Model_Condition) GetTargetArgumentId() uint32 {
	if x != nil {
		return x.TargetArgumentId
	}
	return 0
}

type Model_Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionBucketId uint32              `protobuf:"varint,1,opt,name=condition_bucket_id,json=conditionBucketId,proto3" json:"condition_bucket_id,omitempty"`
	ArgumentId        uint32              `protobuf:"varint,2,opt,name=argument_id,json=argumentId,proto3" json:"argument_id,omitempty"`
	KindId            Model_Argument_Kind `protobuf:"varint,3,opt,name=kind_id,json=kindId,proto3,enum=biconom.type.Model_Argument_Kind" json:"kind_id,omitempty"`
}

func (x *Model_Argument) Reset() {
	*x = Model_Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model_Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model_Argument) ProtoMessage() {}

func (x *Model_Argument) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model_Argument.ProtoReflect.Descriptor instead.
func (*Model_Argument) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Model_Argument) GetConditionBucketId() uint32 {
	if x != nil {
		return x.ConditionBucketId
	}
	return 0
}

func (x *Model_Argument) GetArgumentId() uint32 {
	if x != nil {
		return x.ArgumentId
	}
	return 0
}

func (x *Model_Argument) GetKindId() Model_Argument_Kind {
	if x != nil {
		return x.KindId
	}
	return Model_Argument_Calc
}

type Model_QueryRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionBucketId uint32 `protobuf:"varint,1,opt,name=condition_bucket_id,json=conditionBucketId,proto3" json:"condition_bucket_id,omitempty"`
	ArgumentId        uint32 `protobuf:"varint,2,opt,name=argument_id,json=argumentId,proto3" json:"argument_id,omitempty"`
	RankBucketId      uint32 `protobuf:"varint,3,opt,name=rank_bucket_id,json=rankBucketId,proto3" json:"rank_bucket_id,omitempty"`
}

func (x *Model_QueryRank) Reset() {
	*x = Model_QueryRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model_QueryRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model_QueryRank) ProtoMessage() {}

func (x *Model_QueryRank) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model_QueryRank.ProtoReflect.Descriptor instead.
func (*Model_QueryRank) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 3}
}

func (x *Model_QueryRank) GetConditionBucketId() uint32 {
	if x != nil {
		return x.ConditionBucketId
	}
	return 0
}

func (x *Model_QueryRank) GetArgumentId() uint32 {
	if x != nil {
		return x.ArgumentId
	}
	return 0
}

func (x *Model_QueryRank) GetRankBucketId() uint32 {
	if x != nil {
		return x.RankBucketId
	}
	return 0
}

type Model_QueryRankState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionBucketId uint32 `protobuf:"varint,1,opt,name=condition_bucket_id,json=conditionBucketId,proto3" json:"condition_bucket_id,omitempty"`
	ArgumentId        uint32 `protobuf:"varint,2,opt,name=argument_id,json=argumentId,proto3" json:"argument_id,omitempty"`
	AccountId         uint32 `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	StateEnabled      uint32 `protobuf:"varint,4,opt,name=state_enabled,json=stateEnabled,proto3" json:"state_enabled,omitempty"`
	RankBucketId      uint32 `protobuf:"varint,5,opt,name=rank_bucket_id,json=rankBucketId,proto3" json:"rank_bucket_id,omitempty"`
	RankId            uint32 `protobuf:"varint,6,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
	CreatedAt         int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Model_QueryRankState) Reset() {
	*x = Model_QueryRankState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model_QueryRankState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model_QueryRankState) ProtoMessage() {}

func (x *Model_QueryRankState) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model_QueryRankState.ProtoReflect.Descriptor instead.
func (*Model_QueryRankState) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 4}
}

func (x *Model_QueryRankState) GetConditionBucketId() uint32 {
	if x != nil {
		return x.ConditionBucketId
	}
	return 0
}

func (x *Model_QueryRankState) GetArgumentId() uint32 {
	if x != nil {
		return x.ArgumentId
	}
	return 0
}

func (x *Model_QueryRankState) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Model_QueryRankState) GetStateEnabled() uint32 {
	if x != nil {
		return x.StateEnabled
	}
	return 0
}

func (x *Model_QueryRankState) GetRankBucketId() uint32 {
	if x != nil {
		return x.RankBucketId
	}
	return 0
}

func (x *Model_QueryRankState) GetRankId() uint32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

func (x *Model_QueryRankState) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type Model_Calc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionBucketId uint32              `protobuf:"varint,1,opt,name=condition_bucket_id,json=conditionBucketId,proto3" json:"condition_bucket_id,omitempty"`
	ArgumentId        uint32              `protobuf:"varint,2,opt,name=argument_id,json=argumentId,proto3" json:"argument_id,omitempty"`
	Operator          Model_Calc_Operator `protobuf:"varint,3,opt,name=operator,proto3,enum=biconom.type.Model_Calc_Operator" json:"operator,omitempty"`
	ArgumentIds       []uint32            `protobuf:"varint,4,rep,packed,name=argument_ids,json=argumentIds,proto3" json:"argument_ids,omitempty"`
	ResultKindId      Model_Calc_Kind     `protobuf:"varint,5,opt,name=result_kind_id,json=resultKindId,proto3,enum=biconom.type.Model_Calc_Kind" json:"result_kind_id,omitempty"`
}

func (x *Model_Calc) Reset() {
	*x = Model_Calc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model_Calc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model_Calc) ProtoMessage() {}

func (x *Model_Calc) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model_Calc.ProtoReflect.Descriptor instead.
func (*Model_Calc) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 5}
}

func (x *Model_Calc) GetConditionBucketId() uint32 {
	if x != nil {
		return x.ConditionBucketId
	}
	return 0
}

func (x *Model_Calc) GetArgumentId() uint32 {
	if x != nil {
		return x.ArgumentId
	}
	return 0
}

func (x *Model_Calc) GetOperator() Model_Calc_Operator {
	if x != nil {
		return x.Operator
	}
	return Model_Calc_SUM
}

func (x *Model_Calc) GetArgumentIds() []uint32 {
	if x != nil {
		return x.ArgumentIds
	}
	return nil
}

func (x *Model_Calc) GetResultKindId() Model_Calc_Kind {
	if x != nil {
		return x.ResultKindId
	}
	return Model_Calc_Uint
}

type Model_CalcUintState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionBucketId uint32 `protobuf:"varint,1,opt,name=condition_bucket_id,json=conditionBucketId,proto3" json:"condition_bucket_id,omitempty"`
	ArgumentId        uint32 `protobuf:"varint,2,opt,name=argument_id,json=argumentId,proto3" json:"argument_id,omitempty"`
	AccountId         uint32 `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	StateEnabled      uint32 `protobuf:"varint,4,opt,name=state_enabled,json=stateEnabled,proto3" json:"state_enabled,omitempty"`
	Result            uint32 `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
	CreatedAt         int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Model_CalcUintState) Reset() {
	*x = Model_CalcUintState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model_CalcUintState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model_CalcUintState) ProtoMessage() {}

func (x *Model_CalcUintState) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model_CalcUintState.ProtoReflect.Descriptor instead.
func (*Model_CalcUintState) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 6}
}

func (x *Model_CalcUintState) GetConditionBucketId() uint32 {
	if x != nil {
		return x.ConditionBucketId
	}
	return 0
}

func (x *Model_CalcUintState) GetArgumentId() uint32 {
	if x != nil {
		return x.ArgumentId
	}
	return 0
}

func (x *Model_CalcUintState) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Model_CalcUintState) GetStateEnabled() uint32 {
	if x != nil {
		return x.StateEnabled
	}
	return 0
}

func (x *Model_CalcUintState) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *Model_CalcUintState) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type Model_StaticRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionBucketId uint32 `protobuf:"varint,1,opt,name=condition_bucket_id,json=conditionBucketId,proto3" json:"condition_bucket_id,omitempty"`
	ArgumentId        uint32 `protobuf:"varint,2,opt,name=argument_id,json=argumentId,proto3" json:"argument_id,omitempty"`
	RankBucketId      uint32 `protobuf:"varint,3,opt,name=rank_bucket_id,json=rankBucketId,proto3" json:"rank_bucket_id,omitempty"`
	RankId            uint32 `protobuf:"varint,4,opt,name=rank_id,json=rankId,proto3" json:"rank_id,omitempty"`
}

func (x *Model_StaticRank) Reset() {
	*x = Model_StaticRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_condition_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model_StaticRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model_StaticRank) ProtoMessage() {}

func (x *Model_StaticRank) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_condition_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model_StaticRank.ProtoReflect.Descriptor instead.
func (*Model_StaticRank) Descriptor() ([]byte, []int) {
	return file_biconom_type_condition_proto_rawDescGZIP(), []int{5, 7}
}

func (x *Model_StaticRank) GetConditionBucketId() uint32 {
	if x != nil {
		return x.ConditionBucketId
	}
	return 0
}

func (x *Model_StaticRank) GetArgumentId() uint32 {
	if x != nil {
		return x.ArgumentId
	}
	return 0
}

func (x *Model_StaticRank) GetRankBucketId() uint32 {
	if x != nil {
		return x.RankBucketId
	}
	return 0
}

func (x *Model_StaticRank) GetRankId() uint32 {
	if x != nil {
		return x.RankId
	}
	return 0
}

var File_biconom_type_condition_proto protoreflect.FileDescriptor

var file_biconom_type_condition_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x09, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x1a, 0xa4, 0x06, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12,
	0x48, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x0a, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x78, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x41, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x00, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x1a, 0x23, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x93, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x42,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x1a, 0x3c, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xf4, 0x01, 0x0a, 0x04, 0x43, 0x61,
	0x6c, 0x63, 0x12, 0x4a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36,
	0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x22, 0x2e, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x42, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49, 0x56, 0x10, 0x03,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc6, 0x01, 0x0a, 0x06, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x3d, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x51, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45,
	0x10, 0x05, 0x22, 0xdd, 0x09, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6c, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0xbf, 0x06, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x2e, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c,
	0x64, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x7b, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x44, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x1a, 0x23, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x96, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x1a, 0x3c, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfd, 0x01, 0x0a, 0x04, 0x43,
	0x61, 0x6c, 0x63, 0x12, 0x4d, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c,
	0x64, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x39, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x2e, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x2e, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x55, 0x42, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x55, 0x4c, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49, 0x56, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xcc, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x46,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6c, 0x64, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6c, 0x64, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x3d, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x51, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45,
	0x10, 0x05, 0x22, 0x6d, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x8b, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x82, 0x01,
	0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x1b, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x01, 0x22,
	0x87, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3f, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x80, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3, 0x0e, 0x0a, 0x05, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x1a, 0xc5, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x1a, 0xeb, 0x02, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4e, 0x45, 0x51, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x02, 0x12,
	0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x04,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45, 0x10, 0x05, 0x1a, 0xc8, 0x01, 0x0a, 0x08, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x6b, 0x69, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x6b, 0x69, 0x6e,
	0x64, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x61, 0x6c, 0x63, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x61,
	0x6e, 0x6b, 0x10, 0x02, 0x1a, 0x82, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x6e,
	0x6b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x1a, 0x83, 0x02, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a,
	0xc0, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x61, 0x6c, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x2e, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x64,
	0x22, 0x2e, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x42, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49, 0x56, 0x10, 0x03,
	0x22, 0x10, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x69, 0x6e, 0x74,
	0x10, 0x00, 0x1a, 0xdb, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x63, 0x55, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x1a, 0x9c, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x42,
	0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_biconom_type_condition_proto_rawDescOnce sync.Once
	file_biconom_type_condition_proto_rawDescData = file_biconom_type_condition_proto_rawDesc
)

func file_biconom_type_condition_proto_rawDescGZIP() []byte {
	file_biconom_type_condition_proto_rawDescOnce.Do(func() {
		file_biconom_type_condition_proto_rawDescData = protoimpl.X.CompressGZIP(file_biconom_type_condition_proto_rawDescData)
	})
	return file_biconom_type_condition_proto_rawDescData
}

var file_biconom_type_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_biconom_type_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_biconom_type_condition_proto_goTypes = []interface{}{
	(Condition_Argument_Calc_Operator)(0),     // 0: biconom.type.Condition.Argument.Calc.Operator
	(Condition_Target_Operator)(0),            // 1: biconom.type.Condition.Target.Operator
	(ConditionOld_Argument_Calc_Operator)(0),  // 2: biconom.type.ConditionOld.Argument.Calc.Operator
	(ConditionOld_Target_Operator)(0),         // 3: biconom.type.ConditionOld.Target.Operator
	(ConditionBlock_Operator)(0),              // 4: biconom.type.ConditionBlock.Operator
	(Model_Condition_Operator)(0),             // 5: biconom.type.Model.Condition.Operator
	(Model_Argument_Kind)(0),                  // 6: biconom.type.Model.Argument.Kind
	(Model_Calc_Operator)(0),                  // 7: biconom.type.Model.Calc.Operator
	(Model_Calc_Kind)(0),                      // 8: biconom.type.Model.Calc.Kind
	(*Condition)(nil),                         // 9: biconom.type.Condition
	(*ConditionOld)(nil),                      // 10: biconom.type.ConditionOld
	(*ConditionEvent)(nil),                    // 11: biconom.type.ConditionEvent
	(*ConditionBlock)(nil),                    // 12: biconom.type.ConditionBlock
	(*ConditionBucket)(nil),                   // 13: biconom.type.ConditionBucket
	(*Model)(nil),                             // 14: biconom.type.Model
	(*Condition_Argument)(nil),                // 15: biconom.type.Condition.Argument
	(*Condition_Target)(nil),                  // 16: biconom.type.Condition.Target
	(*Condition_Argument_Query)(nil),          // 17: biconom.type.Condition.Argument.Query
	(*Condition_Argument_Static)(nil),         // 18: biconom.type.Condition.Argument.Static
	(*Condition_Argument_Calc)(nil),           // 19: biconom.type.Condition.Argument.Calc
	(*Condition_Argument_Query_Rank)(nil),     // 20: biconom.type.Condition.Argument.Query.Rank
	(*Condition_Argument_Static_Rank)(nil),    // 21: biconom.type.Condition.Argument.Static.Rank
	(*ConditionOld_Argument)(nil),             // 22: biconom.type.ConditionOld.Argument
	(*ConditionOld_Target)(nil),               // 23: biconom.type.ConditionOld.Target
	(*ConditionOld_Argument_Query)(nil),       // 24: biconom.type.ConditionOld.Argument.Query
	(*ConditionOld_Argument_Static)(nil),      // 25: biconom.type.ConditionOld.Argument.Static
	(*ConditionOld_Argument_Calc)(nil),        // 26: biconom.type.ConditionOld.Argument.Calc
	(*ConditionOld_Argument_Query_Rank)(nil),  // 27: biconom.type.ConditionOld.Argument.Query.Rank
	(*ConditionOld_Argument_Static_Rank)(nil), // 28: biconom.type.ConditionOld.Argument.Static.Rank
	(*ConditionBlock_Argument)(nil),           // 29: biconom.type.ConditionBlock.Argument
	(*ConditionBucket_Header)(nil),            // 30: biconom.type.ConditionBucket.Header
	(*ConditionBucket_Target)(nil),            // 31: biconom.type.ConditionBucket.Target
	(*Model_ConditionBlock)(nil),              // 32: biconom.type.Model.ConditionBlock
	(*Model_Condition)(nil),                   // 33: biconom.type.Model.Condition
	(*Model_Argument)(nil),                    // 34: biconom.type.Model.Argument
	(*Model_QueryRank)(nil),                   // 35: biconom.type.Model.QueryRank
	(*Model_QueryRankState)(nil),              // 36: biconom.type.Model.QueryRankState
	(*Model_Calc)(nil),                        // 37: biconom.type.Model.Calc
	(*Model_CalcUintState)(nil),               // 38: biconom.type.Model.CalcUintState
	(*Model_StaticRank)(nil),                  // 39: biconom.type.Model.StaticRank
}
var file_biconom_type_condition_proto_depIdxs = []int32{
	15, // 0: biconom.type.Condition.source:type_name -> biconom.type.Condition.Argument
	16, // 1: biconom.type.Condition.target:type_name -> biconom.type.Condition.Target
	22, // 2: biconom.type.ConditionOld.source:type_name -> biconom.type.ConditionOld.Argument
	23, // 3: biconom.type.ConditionOld.target:type_name -> biconom.type.ConditionOld.Target
	4,  // 4: biconom.type.ConditionBlock.operator:type_name -> biconom.type.ConditionBlock.Operator
	29, // 5: biconom.type.ConditionBlock.arguments:type_name -> biconom.type.ConditionBlock.Argument
	30, // 6: biconom.type.ConditionBucket.header:type_name -> biconom.type.ConditionBucket.Header
	31, // 7: biconom.type.ConditionBucket.target:type_name -> biconom.type.ConditionBucket.Target
	11, // 8: biconom.type.ConditionBucket.events:type_name -> biconom.type.ConditionEvent
	17, // 9: biconom.type.Condition.Argument.query:type_name -> biconom.type.Condition.Argument.Query
	18, // 10: biconom.type.Condition.Argument.static:type_name -> biconom.type.Condition.Argument.Static
	19, // 11: biconom.type.Condition.Argument.calc:type_name -> biconom.type.Condition.Argument.Calc
	18, // 12: biconom.type.Condition.Argument.cache_value:type_name -> biconom.type.Condition.Argument.Static
	1,  // 13: biconom.type.Condition.Target.operator:type_name -> biconom.type.Condition.Target.Operator
	15, // 14: biconom.type.Condition.Target.result:type_name -> biconom.type.Condition.Argument
	20, // 15: biconom.type.Condition.Argument.Query.rank:type_name -> biconom.type.Condition.Argument.Query.Rank
	21, // 16: biconom.type.Condition.Argument.Static.rank:type_name -> biconom.type.Condition.Argument.Static.Rank
	0,  // 17: biconom.type.Condition.Argument.Calc.operator:type_name -> biconom.type.Condition.Argument.Calc.Operator
	15, // 18: biconom.type.Condition.Argument.Calc.first:type_name -> biconom.type.Condition.Argument
	15, // 19: biconom.type.Condition.Argument.Calc.second:type_name -> biconom.type.Condition.Argument
	24, // 20: biconom.type.ConditionOld.Argument.query:type_name -> biconom.type.ConditionOld.Argument.Query
	25, // 21: biconom.type.ConditionOld.Argument.static:type_name -> biconom.type.ConditionOld.Argument.Static
	26, // 22: biconom.type.ConditionOld.Argument.calc:type_name -> biconom.type.ConditionOld.Argument.Calc
	25, // 23: biconom.type.ConditionOld.Argument.cache_value:type_name -> biconom.type.ConditionOld.Argument.Static
	3,  // 24: biconom.type.ConditionOld.Target.operator:type_name -> biconom.type.ConditionOld.Target.Operator
	22, // 25: biconom.type.ConditionOld.Target.result:type_name -> biconom.type.ConditionOld.Argument
	27, // 26: biconom.type.ConditionOld.Argument.Query.rank:type_name -> biconom.type.ConditionOld.Argument.Query.Rank
	28, // 27: biconom.type.ConditionOld.Argument.Static.rank:type_name -> biconom.type.ConditionOld.Argument.Static.Rank
	2,  // 28: biconom.type.ConditionOld.Argument.Calc.operator:type_name -> biconom.type.ConditionOld.Argument.Calc.Operator
	22, // 29: biconom.type.ConditionOld.Argument.Calc.first:type_name -> biconom.type.ConditionOld.Argument
	22, // 30: biconom.type.ConditionOld.Argument.Calc.second:type_name -> biconom.type.ConditionOld.Argument
	9,  // 31: biconom.type.ConditionBlock.Argument.condition:type_name -> biconom.type.Condition
	12, // 32: biconom.type.ConditionBlock.Argument.block:type_name -> biconom.type.ConditionBlock
	9,  // 33: biconom.type.ConditionBucket.Target.condition:type_name -> biconom.type.Condition
	12, // 34: biconom.type.ConditionBucket.Target.block:type_name -> biconom.type.ConditionBlock
	5,  // 35: biconom.type.Model.Condition.operator:type_name -> biconom.type.Model.Condition.Operator
	6,  // 36: biconom.type.Model.Argument.kind_id:type_name -> biconom.type.Model.Argument.Kind
	7,  // 37: biconom.type.Model.Calc.operator:type_name -> biconom.type.Model.Calc.Operator
	8,  // 38: biconom.type.Model.Calc.result_kind_id:type_name -> biconom.type.Model.Calc.Kind
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_biconom_type_condition_proto_init() }
func file_biconom_type_condition_proto_init() {
	if File_biconom_type_condition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biconom_type_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Argument_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Argument_Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Argument_Calc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Argument_Query_Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Argument_Static_Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOld_Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOld_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOld_Argument_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOld_Argument_Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOld_Argument_Calc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOld_Argument_Query_Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionOld_Argument_Static_Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionBlock_Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionBucket_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionBucket_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model_ConditionBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model_Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model_QueryRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model_QueryRankState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model_Calc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model_CalcUintState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_condition_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model_StaticRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_biconom_type_condition_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Condition_Argument_Query_)(nil),
		(*Condition_Argument_Static_)(nil),
		(*Condition_Argument_Calc_)(nil),
	}
	file_biconom_type_condition_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Condition_Argument_Query_Rank_)(nil),
	}
	file_biconom_type_condition_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Condition_Argument_Static_Rank_)(nil),
	}
	file_biconom_type_condition_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ConditionOld_Argument_Query_)(nil),
		(*ConditionOld_Argument_Static_)(nil),
		(*ConditionOld_Argument_Calc_)(nil),
	}
	file_biconom_type_condition_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ConditionOld_Argument_Query_Rank_)(nil),
	}
	file_biconom_type_condition_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ConditionOld_Argument_Static_Rank_)(nil),
	}
	file_biconom_type_condition_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*ConditionBlock_Argument_Condition)(nil),
		(*ConditionBlock_Argument_Block)(nil),
	}
	file_biconom_type_condition_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ConditionBucket_Target_Condition)(nil),
		(*ConditionBucket_Target_Block)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biconom_type_condition_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_biconom_type_condition_proto_goTypes,
		DependencyIndexes: file_biconom_type_condition_proto_depIdxs,
		EnumInfos:         file_biconom_type_condition_proto_enumTypes,
		MessageInfos:      file_biconom_type_condition_proto_msgTypes,
	}.Build()
	File_biconom_type_condition_proto = out.File
	file_biconom_type_condition_proto_rawDesc = nil
	file_biconom_type_condition_proto_goTypes = nil
	file_biconom_type_condition_proto_depIdxs = nil
}
