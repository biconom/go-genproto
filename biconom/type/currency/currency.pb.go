// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: biconom/type/currency.proto

package currency_pb

import (
	bot_key "github.com/biconom/go-genproto/biconom/type/bot_key"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId   uint32 `protobuf:"varint,1,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	CurrencyName string `protobuf:"bytes,2,opt,name=currency_name,json=currencyName,proto3" json:"currency_name,omitempty"`
	Decimal      uint32 `protobuf:"varint,3,opt,name=decimal,proto3" json:"decimal,omitempty"`
	Published    bool   `protobuf:"varint,4,opt,name=published,proto3" json:"published,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0}
}

func (x *Currency) GetCurrencyId() uint32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *Currency) GetCurrencyName() string {
	if x != nil {
		return x.CurrencyName
	}
	return ""
}

func (x *Currency) GetDecimal() uint32 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *Currency) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

type Currency_ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UniqueField:
	//	*Currency_ID_CurrencyId
	//	*Currency_ID_CurrencyName
	UniqueField isCurrency_ID_UniqueField `protobuf_oneof:"unique_field"`
}

func (x *Currency_ID) Reset() {
	*x = Currency_ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_ID) ProtoMessage() {}

func (x *Currency_ID) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_ID.ProtoReflect.Descriptor instead.
func (*Currency_ID) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Currency_ID) GetUniqueField() isCurrency_ID_UniqueField {
	if m != nil {
		return m.UniqueField
	}
	return nil
}

func (x *Currency_ID) GetCurrencyId() uint32 {
	if x, ok := x.GetUniqueField().(*Currency_ID_CurrencyId); ok {
		return x.CurrencyId
	}
	return 0
}

func (x *Currency_ID) GetCurrencyName() string {
	if x, ok := x.GetUniqueField().(*Currency_ID_CurrencyName); ok {
		return x.CurrencyName
	}
	return ""
}

type isCurrency_ID_UniqueField interface {
	isCurrency_ID_UniqueField()
}

type Currency_ID_CurrencyId struct {
	CurrencyId uint32 `protobuf:"varint,1,opt,name=currency_id,json=currencyId,proto3,oneof"`
}

type Currency_ID_CurrencyName struct {
	CurrencyName string `protobuf:"bytes,2,opt,name=currency_name,json=currencyName,proto3,oneof"`
}

func (*Currency_ID_CurrencyId) isCurrency_ID_UniqueField() {}

func (*Currency_ID_CurrencyName) isCurrency_ID_UniqueField() {}

type Currency_Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyPairId uint32    `protobuf:"varint,1,opt,name=currency_pair_id,json=currencyPairId,proto3" json:"currency_pair_id,omitempty"`
	SourceCurrency *Currency `protobuf:"bytes,2,opt,name=source_currency,json=sourceCurrency,proto3" json:"source_currency,omitempty"`
	TargetCurrency *Currency `protobuf:"bytes,3,opt,name=target_currency,json=targetCurrency,proto3" json:"target_currency,omitempty"`
	Published      bool      `protobuf:"varint,4,opt,name=published,proto3" json:"published,omitempty"`
}

func (x *Currency_Pair) Reset() {
	*x = Currency_Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair) ProtoMessage() {}

func (x *Currency_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair.ProtoReflect.Descriptor instead.
func (*Currency_Pair) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Currency_Pair) GetCurrencyPairId() uint32 {
	if x != nil {
		return x.CurrencyPairId
	}
	return 0
}

func (x *Currency_Pair) GetSourceCurrency() *Currency {
	if x != nil {
		return x.SourceCurrency
	}
	return nil
}

func (x *Currency_Pair) GetTargetCurrency() *Currency {
	if x != nil {
		return x.TargetCurrency
	}
	return nil
}

func (x *Currency_Pair) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

type Currency_Pair_ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UniqueField:
	//	*Currency_Pair_ID_CurrencyPairId
	//	*Currency_Pair_ID_Currencies_
	UniqueField isCurrency_Pair_ID_UniqueField `protobuf_oneof:"unique_field"`
}

func (x *Currency_Pair_ID) Reset() {
	*x = Currency_Pair_ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_ID) ProtoMessage() {}

func (x *Currency_Pair_ID) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_ID.ProtoReflect.Descriptor instead.
func (*Currency_Pair_ID) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Currency_Pair_ID) GetUniqueField() isCurrency_Pair_ID_UniqueField {
	if m != nil {
		return m.UniqueField
	}
	return nil
}

func (x *Currency_Pair_ID) GetCurrencyPairId() uint32 {
	if x, ok := x.GetUniqueField().(*Currency_Pair_ID_CurrencyPairId); ok {
		return x.CurrencyPairId
	}
	return 0
}

func (x *Currency_Pair_ID) GetCurrencies() *Currency_Pair_ID_Currencies {
	if x, ok := x.GetUniqueField().(*Currency_Pair_ID_Currencies_); ok {
		return x.Currencies
	}
	return nil
}

type isCurrency_Pair_ID_UniqueField interface {
	isCurrency_Pair_ID_UniqueField()
}

type Currency_Pair_ID_CurrencyPairId struct {
	CurrencyPairId uint32 `protobuf:"varint,1,opt,name=currency_pair_id,json=currencyPairId,proto3,oneof"`
}

type Currency_Pair_ID_Currencies_ struct {
	Currencies *Currency_Pair_ID_Currencies `protobuf:"bytes,2,opt,name=currencies,proto3,oneof"`
}

func (*Currency_Pair_ID_CurrencyPairId) isCurrency_Pair_ID_UniqueField() {}

func (*Currency_Pair_ID_Currencies_) isCurrency_Pair_ID_UniqueField() {}

type Currency_Pair_Rate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Currency_Pair_Rate) Reset() {
	*x = Currency_Pair_Rate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_Rate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_Rate) ProtoMessage() {}

func (x *Currency_Pair_Rate) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_Rate.ProtoReflect.Descriptor instead.
func (*Currency_Pair_Rate) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 1}
}

type Currency_Pair_ID_Currencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCurrency *Currency_ID `protobuf:"bytes,1,opt,name=source_currency,json=sourceCurrency,proto3" json:"source_currency,omitempty"`
	TargetCurrency *Currency_ID `protobuf:"bytes,2,opt,name=target_currency,json=targetCurrency,proto3" json:"target_currency,omitempty"`
}

func (x *Currency_Pair_ID_Currencies) Reset() {
	*x = Currency_Pair_ID_Currencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_ID_Currencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_ID_Currencies) ProtoMessage() {}

func (x *Currency_Pair_ID_Currencies) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_ID_Currencies.ProtoReflect.Descriptor instead.
func (*Currency_Pair_ID_Currencies) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *Currency_Pair_ID_Currencies) GetSourceCurrency() *Currency_ID {
	if x != nil {
		return x.SourceCurrency
	}
	return nil
}

func (x *Currency_Pair_ID_Currencies) GetTargetCurrency() *Currency_ID {
	if x != nil {
		return x.TargetCurrency
	}
	return nil
}

type Currency_Pair_Rate_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Currency_Pair_Rate_Source_Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Values []*Currency_Pair_Rate_Source_Option_Value `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Currency_Pair_Rate_Source) Reset() {
	*x = Currency_Pair_Rate_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_Rate_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_Rate_Source) ProtoMessage() {}

func (x *Currency_Pair_Rate_Source) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_Rate_Source.ProtoReflect.Descriptor instead.
func (*Currency_Pair_Rate_Source) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (x *Currency_Pair_Rate_Source) GetHeader() *Currency_Pair_Rate_Source_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Currency_Pair_Rate_Source) GetValues() []*Currency_Pair_Rate_Source_Option_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Currency_Pair_Rate_Source_ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UniqueField:
	//	*Currency_Pair_Rate_Source_ID_RateSourceId
	//	*Currency_Pair_Rate_Source_ID_RateSourceName
	UniqueField isCurrency_Pair_Rate_Source_ID_UniqueField `protobuf_oneof:"unique_field"`
}

func (x *Currency_Pair_Rate_Source_ID) Reset() {
	*x = Currency_Pair_Rate_Source_ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_Rate_Source_ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_Rate_Source_ID) ProtoMessage() {}

func (x *Currency_Pair_Rate_Source_ID) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_Rate_Source_ID.ProtoReflect.Descriptor instead.
func (*Currency_Pair_Rate_Source_ID) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0}
}

func (m *Currency_Pair_Rate_Source_ID) GetUniqueField() isCurrency_Pair_Rate_Source_ID_UniqueField {
	if m != nil {
		return m.UniqueField
	}
	return nil
}

func (x *Currency_Pair_Rate_Source_ID) GetRateSourceId() uint32 {
	if x, ok := x.GetUniqueField().(*Currency_Pair_Rate_Source_ID_RateSourceId); ok {
		return x.RateSourceId
	}
	return 0
}

func (x *Currency_Pair_Rate_Source_ID) GetRateSourceName() string {
	if x, ok := x.GetUniqueField().(*Currency_Pair_Rate_Source_ID_RateSourceName); ok {
		return x.RateSourceName
	}
	return ""
}

type isCurrency_Pair_Rate_Source_ID_UniqueField interface {
	isCurrency_Pair_Rate_Source_ID_UniqueField()
}

type Currency_Pair_Rate_Source_ID_RateSourceId struct {
	RateSourceId uint32 `protobuf:"varint,1,opt,name=rate_source_id,json=rateSourceId,proto3,oneof"`
}

type Currency_Pair_Rate_Source_ID_RateSourceName struct {
	RateSourceName string `protobuf:"bytes,2,opt,name=rate_source_name,json=rateSourceName,proto3,oneof"`
}

func (*Currency_Pair_Rate_Source_ID_RateSourceId) isCurrency_Pair_Rate_Source_ID_UniqueField() {}

func (*Currency_Pair_Rate_Source_ID_RateSourceName) isCurrency_Pair_Rate_Source_ID_UniqueField() {}

type Currency_Pair_Rate_Source_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSourceId   uint32 `protobuf:"varint,1,opt,name=rate_source_id,json=rateSourceId,proto3" json:"rate_source_id,omitempty"`
	RateSourceName string `protobuf:"bytes,2,opt,name=rate_source_name,json=rateSourceName,proto3" json:"rate_source_name,omitempty"`
	CreatedAt      uint32 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Published      bool   `protobuf:"varint,4,opt,name=published,proto3" json:"published,omitempty"`
}

func (x *Currency_Pair_Rate_Source_Header) Reset() {
	*x = Currency_Pair_Rate_Source_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_Rate_Source_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_Rate_Source_Header) ProtoMessage() {}

func (x *Currency_Pair_Rate_Source_Header) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_Rate_Source_Header.ProtoReflect.Descriptor instead.
func (*Currency_Pair_Rate_Source_Header) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 1, 0, 1}
}

func (x *Currency_Pair_Rate_Source_Header) GetRateSourceId() uint32 {
	if x != nil {
		return x.RateSourceId
	}
	return 0
}

func (x *Currency_Pair_Rate_Source_Header) GetRateSourceName() string {
	if x != nil {
		return x.RateSourceName
	}
	return ""
}

func (x *Currency_Pair_Rate_Source_Header) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Currency_Pair_Rate_Source_Header) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

type Currency_Pair_Rate_Source_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Currency_Pair_Rate_Source_Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Value  *Currency_Pair_Rate_Source_Option_Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Currency_Pair_Rate_Source_Option) Reset() {
	*x = Currency_Pair_Rate_Source_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_Rate_Source_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_Rate_Source_Option) ProtoMessage() {}

func (x *Currency_Pair_Rate_Source_Option) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_Rate_Source_Option.ProtoReflect.Descriptor instead.
func (*Currency_Pair_Rate_Source_Option) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2}
}

func (x *Currency_Pair_Rate_Source_Option) GetHeader() *Currency_Pair_Rate_Source_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Currency_Pair_Rate_Source_Option) GetValue() *Currency_Pair_Rate_Source_Option_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Currency_Pair_Rate_Source_BotKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Currency_Pair_Rate_Source_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	BotKey *bot_key.BotKey                   `protobuf:"bytes,2,opt,name=bot_key,json=botKey,proto3" json:"bot_key,omitempty"`
}

func (x *Currency_Pair_Rate_Source_BotKey) Reset() {
	*x = Currency_Pair_Rate_Source_BotKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_Rate_Source_BotKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_Rate_Source_BotKey) ProtoMessage() {}

func (x *Currency_Pair_Rate_Source_BotKey) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_Rate_Source_BotKey.ProtoReflect.Descriptor instead.
func (*Currency_Pair_Rate_Source_BotKey) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3}
}

func (x *Currency_Pair_Rate_Source_BotKey) GetHeader() *Currency_Pair_Rate_Source_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Currency_Pair_Rate_Source_BotKey) GetBotKey() *bot_key.BotKey {
	if x != nil {
		return x.BotKey
	}
	return nil
}

type Currency_Pair_Rate_Source_Option_ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSource   *Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=rate_source,json=rateSource,proto3" json:"rate_source,omitempty"`
	CurrencyPair *Currency_Pair_ID             `protobuf:"bytes,2,opt,name=currency_pair,json=currencyPair,proto3" json:"currency_pair,omitempty"`
}

func (x *Currency_Pair_Rate_Source_Option_ID) Reset() {
	*x = Currency_Pair_Rate_Source_Option_ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_Rate_Source_Option_ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_Rate_Source_Option_ID) ProtoMessage() {}

func (x *Currency_Pair_Rate_Source_Option_ID) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_Rate_Source_Option_ID.ProtoReflect.Descriptor instead.
func (*Currency_Pair_Rate_Source_Option_ID) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2, 0}
}

func (x *Currency_Pair_Rate_Source_Option_ID) GetRateSource() *Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.RateSource
	}
	return nil
}

func (x *Currency_Pair_Rate_Source_Option_ID) GetCurrencyPair() *Currency_Pair_ID {
	if x != nil {
		return x.CurrencyPair
	}
	return nil
}

type Currency_Pair_Rate_Source_Option_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyPair *Currency_Pair `protobuf:"bytes,1,opt,name=currency_pair,json=currencyPair,proto3" json:"currency_pair,omitempty"`
	SourceValue  string         `protobuf:"bytes,2,opt,name=source_value,json=sourceValue,proto3" json:"source_value,omitempty"`
	TargetValue  string         `protobuf:"bytes,3,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
	ModifiedAt   uint32         `protobuf:"varint,4,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (x *Currency_Pair_Rate_Source_Option_Value) Reset() {
	*x = Currency_Pair_Rate_Source_Option_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_Rate_Source_Option_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_Rate_Source_Option_Value) ProtoMessage() {}

func (x *Currency_Pair_Rate_Source_Option_Value) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_Rate_Source_Option_Value.ProtoReflect.Descriptor instead.
func (*Currency_Pair_Rate_Source_Option_Value) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 1, 0, 2, 1}
}

func (x *Currency_Pair_Rate_Source_Option_Value) GetCurrencyPair() *Currency_Pair {
	if x != nil {
		return x.CurrencyPair
	}
	return nil
}

func (x *Currency_Pair_Rate_Source_Option_Value) GetSourceValue() string {
	if x != nil {
		return x.SourceValue
	}
	return ""
}

func (x *Currency_Pair_Rate_Source_Option_Value) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

func (x *Currency_Pair_Rate_Source_Option_Value) GetModifiedAt() uint32 {
	if x != nil {
		return x.ModifiedAt
	}
	return 0
}

type Currency_Pair_Rate_Source_BotKey_ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateSource *Currency_Pair_Rate_Source_ID `protobuf:"bytes,1,opt,name=rate_source,json=rateSource,proto3" json:"rate_source,omitempty"`
	BotKey     *bot_key.BotKey_ID            `protobuf:"bytes,2,opt,name=bot_key,json=botKey,proto3" json:"bot_key,omitempty"`
}

func (x *Currency_Pair_Rate_Source_BotKey_ID) Reset() {
	*x = Currency_Pair_Rate_Source_BotKey_ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biconom_type_currency_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency_Pair_Rate_Source_BotKey_ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency_Pair_Rate_Source_BotKey_ID) ProtoMessage() {}

func (x *Currency_Pair_Rate_Source_BotKey_ID) ProtoReflect() protoreflect.Message {
	mi := &file_biconom_type_currency_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency_Pair_Rate_Source_BotKey_ID.ProtoReflect.Descriptor instead.
func (*Currency_Pair_Rate_Source_BotKey_ID) Descriptor() ([]byte, []int) {
	return file_biconom_type_currency_proto_rawDescGZIP(), []int{0, 1, 1, 0, 3, 0}
}

func (x *Currency_Pair_Rate_Source_BotKey_ID) GetRateSource() *Currency_Pair_Rate_Source_ID {
	if x != nil {
		return x.RateSource
	}
	return nil
}

func (x *Currency_Pair_Rate_Source_BotKey_ID) GetBotKey() *bot_key.BotKey_ID {
	if x != nil {
		return x.BotKey
	}
	return nil
}

var File_biconom_type_currency_proto protoreflect.FileDescriptor

var file_biconom_type_currency_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x1a, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x62, 0x6f, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x0f, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x1a, 0x5e, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x1a, 0x96, 0x0d, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x1a, 0xa4, 0x02, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62,
	0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x49, 0x44, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x94, 0x01, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x49, 0x44, 0x52, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x9c, 0x09, 0x0a,
	0x04, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x93, 0x09, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x46, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x68, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x1a, 0x95, 0x01, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x1a, 0xe8, 0x03, 0x0a, 0x06, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x4b,
	0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52,
	0x0a, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e,
	0x49, 0x44, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x1a, 0xb0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x1a, 0x85, 0x02, 0x0a, 0x06, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x46,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x6f, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x62,
	0x6f, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x83, 0x01, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x0b,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x49, 0x44, 0x52, 0x0a, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x62, 0x6f, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x6f, 0x74, 0x4b, 0x65, 0x79,
	0x2e, 0x49, 0x44, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x42, 0x5a, 0x40, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x69,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x3b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_biconom_type_currency_proto_rawDescOnce sync.Once
	file_biconom_type_currency_proto_rawDescData = file_biconom_type_currency_proto_rawDesc
)

func file_biconom_type_currency_proto_rawDescGZIP() []byte {
	file_biconom_type_currency_proto_rawDescOnce.Do(func() {
		file_biconom_type_currency_proto_rawDescData = protoimpl.X.CompressGZIP(file_biconom_type_currency_proto_rawDescData)
	})
	return file_biconom_type_currency_proto_rawDescData
}

var file_biconom_type_currency_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_biconom_type_currency_proto_goTypes = []interface{}{
	(*Currency)(nil),                               // 0: biconom.type.Currency
	(*Currency_ID)(nil),                            // 1: biconom.type.Currency.ID
	(*Currency_Pair)(nil),                          // 2: biconom.type.Currency.Pair
	(*Currency_Pair_ID)(nil),                       // 3: biconom.type.Currency.Pair.ID
	(*Currency_Pair_Rate)(nil),                     // 4: biconom.type.Currency.Pair.Rate
	(*Currency_Pair_ID_Currencies)(nil),            // 5: biconom.type.Currency.Pair.ID.Currencies
	(*Currency_Pair_Rate_Source)(nil),              // 6: biconom.type.Currency.Pair.Rate.Source
	(*Currency_Pair_Rate_Source_ID)(nil),           // 7: biconom.type.Currency.Pair.Rate.Source.ID
	(*Currency_Pair_Rate_Source_Header)(nil),       // 8: biconom.type.Currency.Pair.Rate.Source.Header
	(*Currency_Pair_Rate_Source_Option)(nil),       // 9: biconom.type.Currency.Pair.Rate.Source.Option
	(*Currency_Pair_Rate_Source_BotKey)(nil),       // 10: biconom.type.Currency.Pair.Rate.Source.BotKey
	(*Currency_Pair_Rate_Source_Option_ID)(nil),    // 11: biconom.type.Currency.Pair.Rate.Source.Option.ID
	(*Currency_Pair_Rate_Source_Option_Value)(nil), // 12: biconom.type.Currency.Pair.Rate.Source.Option.Value
	(*Currency_Pair_Rate_Source_BotKey_ID)(nil),    // 13: biconom.type.Currency.Pair.Rate.Source.BotKey.ID
	(*bot_key.BotKey)(nil),                         // 14: biconom.type.BotKey
	(*bot_key.BotKey_ID)(nil),                      // 15: biconom.type.BotKey.ID
}
var file_biconom_type_currency_proto_depIdxs = []int32{
	0,  // 0: biconom.type.Currency.Pair.source_currency:type_name -> biconom.type.Currency
	0,  // 1: biconom.type.Currency.Pair.target_currency:type_name -> biconom.type.Currency
	5,  // 2: biconom.type.Currency.Pair.ID.currencies:type_name -> biconom.type.Currency.Pair.ID.Currencies
	1,  // 3: biconom.type.Currency.Pair.ID.Currencies.source_currency:type_name -> biconom.type.Currency.ID
	1,  // 4: biconom.type.Currency.Pair.ID.Currencies.target_currency:type_name -> biconom.type.Currency.ID
	8,  // 5: biconom.type.Currency.Pair.Rate.Source.header:type_name -> biconom.type.Currency.Pair.Rate.Source.Header
	12, // 6: biconom.type.Currency.Pair.Rate.Source.values:type_name -> biconom.type.Currency.Pair.Rate.Source.Option.Value
	8,  // 7: biconom.type.Currency.Pair.Rate.Source.Option.header:type_name -> biconom.type.Currency.Pair.Rate.Source.Header
	12, // 8: biconom.type.Currency.Pair.Rate.Source.Option.value:type_name -> biconom.type.Currency.Pair.Rate.Source.Option.Value
	8,  // 9: biconom.type.Currency.Pair.Rate.Source.BotKey.header:type_name -> biconom.type.Currency.Pair.Rate.Source.Header
	14, // 10: biconom.type.Currency.Pair.Rate.Source.BotKey.bot_key:type_name -> biconom.type.BotKey
	7,  // 11: biconom.type.Currency.Pair.Rate.Source.Option.ID.rate_source:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	3,  // 12: biconom.type.Currency.Pair.Rate.Source.Option.ID.currency_pair:type_name -> biconom.type.Currency.Pair.ID
	2,  // 13: biconom.type.Currency.Pair.Rate.Source.Option.Value.currency_pair:type_name -> biconom.type.Currency.Pair
	7,  // 14: biconom.type.Currency.Pair.Rate.Source.BotKey.ID.rate_source:type_name -> biconom.type.Currency.Pair.Rate.Source.ID
	15, // 15: biconom.type.Currency.Pair.Rate.Source.BotKey.ID.bot_key:type_name -> biconom.type.BotKey.ID
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_biconom_type_currency_proto_init() }
func file_biconom_type_currency_proto_init() {
	if File_biconom_type_currency_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biconom_type_currency_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_Rate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_ID_Currencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_Rate_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_Rate_Source_ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_Rate_Source_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_Rate_Source_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_Rate_Source_BotKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_Rate_Source_Option_ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_Rate_Source_Option_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biconom_type_currency_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency_Pair_Rate_Source_BotKey_ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_biconom_type_currency_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Currency_ID_CurrencyId)(nil),
		(*Currency_ID_CurrencyName)(nil),
	}
	file_biconom_type_currency_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Currency_Pair_ID_CurrencyPairId)(nil),
		(*Currency_Pair_ID_Currencies_)(nil),
	}
	file_biconom_type_currency_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Currency_Pair_Rate_Source_ID_RateSourceId)(nil),
		(*Currency_Pair_Rate_Source_ID_RateSourceName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biconom_type_currency_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_biconom_type_currency_proto_goTypes,
		DependencyIndexes: file_biconom_type_currency_proto_depIdxs,
		MessageInfos:      file_biconom_type_currency_proto_msgTypes,
	}.Build()
	File_biconom_type_currency_proto = out.File
	file_biconom_type_currency_proto_rawDesc = nil
	file_biconom_type_currency_proto_goTypes = nil
	file_biconom_type_currency_proto_depIdxs = nil
}
